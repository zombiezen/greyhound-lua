/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif

/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1)); /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
  return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1));  /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) 
    else {
      return 0; // Exits stoically if an invalid key is initialized.
    }
#endif
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* registering a module in lua. Pushes the module table on the stack. */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
#ifdef SWIG_LUA_MODULE_GLOBAL
  /* If requested, install the module directly into the global namespace. */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
#else
  /* Do not install the module table as global name. The stack top has
     the module table with the name below. We pop the top and replace
     the name with it. */
  lua_replace(L,-2);
#endif
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}
#endif

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State* L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  assert(lua_isuserdata(L,1));  /* just in case */
  unsigned long userData = (unsigned long)lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  
  lua_getfield(L, -1, ".type");
  const char* className = lua_tostring(L, -1);
  
  char output[256];
  sprintf(output, "<%s userdata: %lX>", className, userData);
  
  lua_pushstring(L, (const char*)output);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add tostring method for better output */
  SWIG_Lua_add_function(L,"__tostring",SWIG_Lua_class_tostring);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ADXL345_I2C swig_types[0]
#define SWIGTYPE_p_Accelerometer swig_types[1]
#define SWIGTYPE_p_AnalogChannel swig_types[2]
#define SWIGTYPE_p_AnalogModule swig_types[3]
#define SWIGTYPE_p_AnalogTrigger swig_types[4]
#define SWIGTYPE_p_AnalogTriggerOutput swig_types[5]
#define SWIGTYPE_p_AxisType swig_types[6]
#define SWIGTYPE_p_ButtonType swig_types[7]
#define SWIGTYPE_p_Code swig_types[8]
#define SWIGTYPE_p_ComplexData swig_types[9]
#define SWIGTYPE_p_Compressor swig_types[10]
#define SWIGTYPE_p_Counter swig_types[11]
#define SWIGTYPE_p_CounterBase swig_types[12]
#define SWIGTYPE_p_Dashboard swig_types[13]
#define SWIGTYPE_p_DashboardBase swig_types[14]
#define SWIGTYPE_p_DigitalInput swig_types[15]
#define SWIGTYPE_p_DigitalModule swig_types[16]
#define SWIGTYPE_p_DigitalOutput swig_types[17]
#define SWIGTYPE_p_DigitalSource swig_types[18]
#define SWIGTYPE_p_Direction swig_types[19]
#define SWIGTYPE_p_DistanceUnit swig_types[20]
#define SWIGTYPE_p_DoubleSolenoid swig_types[21]
#define SWIGTYPE_p_DriverStation swig_types[22]
#define SWIGTYPE_p_DriverStationEnhancedIO swig_types[23]
#define SWIGTYPE_p_DriverStationLCD swig_types[24]
#define SWIGTYPE_p_Encoder swig_types[25]
#define SWIGTYPE_p_EncodingType swig_types[26]
#define SWIGTYPE_p_EntryValue swig_types[27]
#define SWIGTYPE_p_Error swig_types[28]
#define SWIGTYPE_p_ErrorBase swig_types[29]
#define SWIGTYPE_p_FlowControl swig_types[30]
#define SWIGTYPE_p_GearTooth swig_types[31]
#define SWIGTYPE_p_GenericHID swig_types[32]
#define SWIGTYPE_p_Gyro swig_types[33]
#define SWIGTYPE_p_HiTechnicCompass swig_types[34]
#define SWIGTYPE_p_I2C swig_types[35]
#define SWIGTYPE_p_IRemoteConnectionListener swig_types[36]
#define SWIGTYPE_p_ITableListener swig_types[37]
#define SWIGTYPE_p_InterruptableSensorBase swig_types[38]
#define SWIGTYPE_p_Jaguar swig_types[39]
#define SWIGTYPE_p_Joystick swig_types[40]
#define SWIGTYPE_p_JoystickHand swig_types[41]
#define SWIGTYPE_p_LiveWindow swig_types[42]
#define SWIGTYPE_p_Mode swig_types[43]
#define SWIGTYPE_p_Module swig_types[44]
#define SWIGTYPE_p_MotorSafety swig_types[45]
#define SWIGTYPE_p_MotorSafetyHelper swig_types[46]
#define SWIGTYPE_p_MotorType swig_types[47]
#define SWIGTYPE_p_NetworkTable swig_types[48]
#define SWIGTYPE_p_NetworkTableEntryType swig_types[49]
#define SWIGTYPE_p_NetworkTableProvider swig_types[50]
#define SWIGTYPE_p_PIDController swig_types[51]
#define SWIGTYPE_p_PIDOutput swig_types[52]
#define SWIGTYPE_p_PIDSource swig_types[53]
#define SWIGTYPE_p_PWM swig_types[54]
#define SWIGTYPE_p_Parity swig_types[55]
#define SWIGTYPE_p_PeriodMultiplier swig_types[56]
#define SWIGTYPE_p_Relay swig_types[57]
#define SWIGTYPE_p_RobotDrive swig_types[58]
#define SWIGTYPE_p_SEM_ID swig_types[59]
#define SWIGTYPE_p_SafePWM swig_types[60]
#define SWIGTYPE_p_SensorBase swig_types[61]
#define SWIGTYPE_p_SerialPort swig_types[62]
#define SWIGTYPE_p_Servo swig_types[63]
#define SWIGTYPE_p_SmartDashboard swig_types[64]
#define SWIGTYPE_p_Solenoid swig_types[65]
#define SWIGTYPE_p_SolenoidBase swig_types[66]
#define SWIGTYPE_p_SpeedController swig_types[67]
#define SWIGTYPE_p_StopBits swig_types[68]
#define SWIGTYPE_p_Talon swig_types[69]
#define SWIGTYPE_p_Timer swig_types[70]
#define SWIGTYPE_p_Type swig_types[71]
#define SWIGTYPE_p_Ultrasonic swig_types[72]
#define SWIGTYPE_p_Value swig_types[73]
#define SWIGTYPE_p_Victor swig_types[74]
#define SWIGTYPE_p_Watchdog swig_types[75]
#define SWIGTYPE_p_WriteBufferMode swig_types[76]
#define SWIGTYPE_p_int swig_types[77]
#define SWIGTYPE_p_long_long swig_types[78]
#define SWIGTYPE_p_nLoadOut__tModuleType swig_types[79]
#define SWIGTYPE_p_p_char swig_types[80]
#define SWIGTYPE_p_short swig_types[81]
#define SWIGTYPE_p_signed_char swig_types[82]
#define SWIGTYPE_p_std__string swig_types[83]
#define SWIGTYPE_p_std__vectorT_char_const_p_t swig_types[84]
#define SWIGTYPE_p_tRioStatusCode swig_types[85]
#define SWIGTYPE_p_unsigned_char swig_types[86]
#define SWIGTYPE_p_unsigned_int swig_types[87]
#define SWIGTYPE_p_unsigned_long_long swig_types[88]
#define SWIGTYPE_p_unsigned_short swig_types[89]
static swig_type_info *swig_types[91];
static swig_module_info swig_module = {swig_types, 90, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "wpilib"
#define SWIG_init      luaopen_wpilib
#define SWIG_init_user luaopen_wpilib_user

#define SWIG_LUACODE   luaopen_wpilib_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include <WPILib/WPILib.h>

SWIGINTERN char const *std_vector_Sl_char_SS_const_Sm__Sg____getitem__(std::vector< char const * > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_char_SS_const_Sm__Sg____setitem__(std::vector< char const * > *self,unsigned int idx,char const *val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}

static UINT8 *new_UINT8array(int nelements) { 
  return new UINT8[nelements]; 
}

static void delete_UINT8array(UINT8 *ary) { 
  delete [] ary; 
}

static UINT8 UINT8array_getitem(UINT8 *ary, int index) {
    return ary[index];
}
static void UINT8array_setitem(UINT8 *ary, int index, UINT8 value) {
    ary[index] = value;
}

SWIGINTERN bool DigitalInput_GetBool(DigitalInput *self){
            return self->Get() != 0;
        }
SWIGINTERN void DriverStationLCD_Print(DriverStationLCD *self,DriverStationLCD::Line line,INT32 startingColumn,char const *s){
            self->Printf(line, startingColumn, "%s", s);
        }
SWIGINTERN void DriverStationLCD_PrintLine(DriverStationLCD *self,DriverStationLCD::Line line,char const *s){
            self->PrintfLine(line, "%s", s);
        }


bool IsEnabled()
{
    return RobotBase::getInstance().IsEnabled();
}

bool IsDisabled()
{
    return RobotBase::getInstance().IsDisabled();
}

bool IsAutonomous()
{
    return RobotBase::getInstance().IsAutonomous();
}

bool IsOperatorControl()
{
    return RobotBase::getInstance().IsOperatorControl();
}

bool IsTest()
{
    return RobotBase::getInstance().IsTest();
}

bool IsSystemActive()
{
    return RobotBase::getInstance().IsSystemActive();
}

bool IsNewDataAvailable()
{
    return RobotBase::getInstance().IsNewDataAvailable();
}

Watchdog *GetWatchdog()
{
    return &RobotBase::getInstance().GetWatchdog();
}


#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_new_vector_charp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char const * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< char const * >::vector",0,0)
  result = (std::vector< char const * > *)new std::vector< char const * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_char_const_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vector_charp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< char const * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< char const * >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< char const * >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< char const * > *)new std::vector< char const * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_char_const_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vector_charp__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char const * > *arg1 = 0 ;
  std::vector< char const * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< char const * >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< char const * >::vector",1,"std::vector< char const * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_const_p_t,0))){
    SWIG_fail_ptr("new_vector_charp",1,SWIGTYPE_p_std__vectorT_char_const_p_t);
  }
  
  result = (std::vector< char const * > *)new std::vector< char const * >((std::vector< char const * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_char_const_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vector_charp__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  char *arg2 = (char *) 0 ;
  std::vector< char const * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< char const * >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< char const * >::vector",1,"unsigned int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::vector< char const * >::vector",2,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (std::vector< char const * > *)new std::vector< char const * >(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_char_const_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vector_charp(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_vector_charp__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_char_const_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_vector_charp__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_vector_charp__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_vector_charp__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_vector_charp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< char const * >::vector()\n"
    "    std::vector< char const * >::vector(unsigned int)\n"
    "    std::vector< char const * >::vector(std::vector< char const * > const &)\n"
    "    std::vector< char const * >::vector(unsigned int,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_vector_charp_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< char const * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char const * >::size",1,"std::vector< char const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_const_p_t,0))){
    SWIG_fail_ptr("vector_charp_size",1,SWIGTYPE_p_std__vectorT_char_const_p_t);
  }
  
  result = (unsigned int)((std::vector< char const * > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_charp_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< char const * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char const * >::max_size",1,"std::vector< char const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_const_p_t,0))){
    SWIG_fail_ptr("vector_charp_max_size",1,SWIGTYPE_p_std__vectorT_char_const_p_t);
  }
  
  result = (unsigned int)((std::vector< char const * > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_charp_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< char const * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char const * >::empty",1,"std::vector< char const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_const_p_t,0))){
    SWIG_fail_ptr("vector_charp_empty",1,SWIGTYPE_p_std__vectorT_char_const_p_t);
  }
  
  result = (bool)((std::vector< char const * > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_charp_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  
  SWIG_check_num_args("std::vector< char const * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char const * >::clear",1,"std::vector< char const * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_const_p_t,0))){
    SWIG_fail_ptr("vector_charp_clear",1,SWIGTYPE_p_std__vectorT_char_const_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_charp_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::vector< char const * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char const * >::push_back",1,"std::vector< char const * > *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::vector< char const * >::push_back",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_const_p_t,0))){
    SWIG_fail_ptr("vector_charp_push_back",1,SWIGTYPE_p_std__vectorT_char_const_p_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->push_back((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_charp_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  
  SWIG_check_num_args("std::vector< char const * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char const * >::pop_back",1,"std::vector< char const * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_const_p_t,0))){
    SWIG_fail_ptr("vector_charp_pop_back",1,SWIGTYPE_p_std__vectorT_char_const_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_charp_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::vector< char const * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char const * >::front",1,"std::vector< char const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_const_p_t,0))){
    SWIG_fail_ptr("vector_charp_front",1,SWIGTYPE_p_std__vectorT_char_const_p_t);
  }
  
  result = (char *)((std::vector< char const * > const *)arg1)->front();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_charp_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::vector< char const * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char const * >::back",1,"std::vector< char const * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_const_p_t,0))){
    SWIG_fail_ptr("vector_charp_back",1,SWIGTYPE_p_std__vectorT_char_const_p_t);
  }
  
  result = (char *)((std::vector< char const * > const *)arg1)->back();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_charp___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  unsigned int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::vector< char const * >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char const * >::__getitem__",1,"std::vector< char const * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< char const * >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_const_p_t,0))){
    SWIG_fail_ptr("vector_charp___getitem",1,SWIGTYPE_p_std__vectorT_char_const_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (char *)std_vector_Sl_char_SS_const_Sm__Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vector_charp___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("std::vector< char const * >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< char const * >::__setitem__",1,"std::vector< char const * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< char const * >::__setitem__",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("std::vector< char const * >::__setitem__",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_const_p_t,0))){
    SWIG_fail_ptr("vector_charp___setitem",1,SWIGTYPE_p_std__vectorT_char_const_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  try {
    std_vector_Sl_char_SS_const_Sm__Sg____setitem__(arg1,arg2,(char const *)arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_vector_charp(void *obj) {
std::vector< char const * > *arg1 = (std::vector< char const * > *) obj;
delete arg1;
}
static swig_lua_method swig_std_vector_Sl_char_SS_const_Sm__Sg__methods[] = {
    {"size", _wrap_vector_charp_size}, 
    {"max_size", _wrap_vector_charp_max_size}, 
    {"empty", _wrap_vector_charp_empty}, 
    {"clear", _wrap_vector_charp_clear}, 
    {"push_back", _wrap_vector_charp_push_back}, 
    {"pop_back", _wrap_vector_charp_pop_back}, 
    {"front", _wrap_vector_charp_front}, 
    {"back", _wrap_vector_charp_back}, 
    {"__getitem", _wrap_vector_charp___getitem}, 
    {"__setitem", _wrap_vector_charp___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_std_vector_Sl_char_SS_const_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_vector_Sl_char_SS_const_Sm__Sg__bases[] = {0};
static const char *swig_std_vector_Sl_char_SS_const_Sm__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_Sl_char_SS_const_Sm__Sg_ = { "vector_charp", &SWIGTYPE_p_std__vectorT_char_const_p_t,_wrap_new_vector_charp, swig_delete_vector_charp, swig_std_vector_Sl_char_SS_const_Sm__Sg__methods, swig_std_vector_Sl_char_SS_const_Sm__Sg__attributes, swig_std_vector_Sl_char_SS_const_Sm__Sg__bases, swig_std_vector_Sl_char_SS_const_Sm__Sg__base_names };

static int _wrap_new_UINT8array(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  UINT8 *result = 0 ;
  
  SWIG_check_num_args("new_UINT8array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("new_UINT8array",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (UINT8 *)new_UINT8array(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_delete_UINT8array(lua_State* L) {
  int SWIG_arg = 0;
  UINT8 *arg1 = (UINT8 *) 0 ;
  
  SWIG_check_num_args("delete_UINT8array",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delete_UINT8array",1,"UINT8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("delete_UINT8array",1,SWIGTYPE_p_unsigned_char);
  }
  
  delete_UINT8array(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UINT8array_getitem(lua_State* L) {
  int SWIG_arg = 0;
  UINT8 *arg1 = (UINT8 *) 0 ;
  int arg2 ;
  UINT8 result;
  
  SWIG_check_num_args("UINT8array_getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UINT8array_getitem",1,"UINT8 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UINT8array_getitem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("UINT8array_getitem",1,SWIGTYPE_p_unsigned_char);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (UINT8)UINT8array_getitem(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UINT8array_setitem(lua_State* L) {
  int SWIG_arg = 0;
  UINT8 *arg1 = (UINT8 *) 0 ;
  int arg2 ;
  UINT8 arg3 ;
  
  SWIG_check_num_args("UINT8array_setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UINT8array_setitem",1,"UINT8 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UINT8array_setitem",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("UINT8array_setitem",3,"UINT8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("UINT8array_setitem",1,SWIGTYPE_p_unsigned_char);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT8)lua_tonumber(L, 3);
  UINT8array_setitem(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Error(lua_State* L) {
  int SWIG_arg = 0;
  Error *result = 0 ;
  
  SWIG_check_num_args("Error::Error",0,0)
  result = (Error *)new Error();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Error,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_Clone(lua_State* L) {
  int SWIG_arg = 0;
  Error *arg1 = (Error *) 0 ;
  Error *arg2 = 0 ;
  
  SWIG_check_num_args("Error::Clone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Error::Clone",1,"Error *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Error::Clone",2,"Error &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Error,0))){
    SWIG_fail_ptr("Error_Clone",1,SWIGTYPE_p_Error);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Error,0))){
    SWIG_fail_ptr("Error_Clone",2,SWIGTYPE_p_Error);
  }
  
  (arg1)->Clone(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_GetCode(lua_State* L) {
  int SWIG_arg = 0;
  Error *arg1 = (Error *) 0 ;
  Error::Code result;
  
  SWIG_check_num_args("Error::GetCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Error::GetCode",1,"Error const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Error,0))){
    SWIG_fail_ptr("Error_GetCode",1,SWIGTYPE_p_Error);
  }
  
  result = ((Error const *)arg1)->GetCode();
  {
    Error::Code * resultptr = new Error::Code((const Error::Code &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_tRioStatusCode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_GetMessage(lua_State* L) {
  int SWIG_arg = 0;
  Error *arg1 = (Error *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Error::GetMessage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Error::GetMessage",1,"Error const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Error,0))){
    SWIG_fail_ptr("Error_GetMessage",1,SWIGTYPE_p_Error);
  }
  
  result = (char *)((Error const *)arg1)->GetMessage();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_GetFilename(lua_State* L) {
  int SWIG_arg = 0;
  Error *arg1 = (Error *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Error::GetFilename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Error::GetFilename",1,"Error const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Error,0))){
    SWIG_fail_ptr("Error_GetFilename",1,SWIGTYPE_p_Error);
  }
  
  result = (char *)((Error const *)arg1)->GetFilename();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_GetFunction(lua_State* L) {
  int SWIG_arg = 0;
  Error *arg1 = (Error *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Error::GetFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Error::GetFunction",1,"Error const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Error,0))){
    SWIG_fail_ptr("Error_GetFunction",1,SWIGTYPE_p_Error);
  }
  
  result = (char *)((Error const *)arg1)->GetFunction();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_GetLineNumber(lua_State* L) {
  int SWIG_arg = 0;
  Error *arg1 = (Error *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("Error::GetLineNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Error::GetLineNumber",1,"Error const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Error,0))){
    SWIG_fail_ptr("Error_GetLineNumber",1,SWIGTYPE_p_Error);
  }
  
  result = (UINT32)((Error const *)arg1)->GetLineNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_GetOriginatingObject(lua_State* L) {
  int SWIG_arg = 0;
  Error *arg1 = (Error *) 0 ;
  ErrorBase *result = 0 ;
  
  SWIG_check_num_args("Error::GetOriginatingObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Error::GetOriginatingObject",1,"Error const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Error,0))){
    SWIG_fail_ptr("Error_GetOriginatingObject",1,SWIGTYPE_p_Error);
  }
  
  result = (ErrorBase *)((Error const *)arg1)->GetOriginatingObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ErrorBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_GetTime(lua_State* L) {
  int SWIG_arg = 0;
  Error *arg1 = (Error *) 0 ;
  double result;
  
  SWIG_check_num_args("Error::GetTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Error::GetTime",1,"Error const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Error,0))){
    SWIG_fail_ptr("Error_GetTime",1,SWIGTYPE_p_Error);
  }
  
  result = (double)((Error const *)arg1)->GetTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_Clear(lua_State* L) {
  int SWIG_arg = 0;
  Error *arg1 = (Error *) 0 ;
  
  SWIG_check_num_args("Error::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Error::Clear",1,"Error *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Error,0))){
    SWIG_fail_ptr("Error_Clear",1,SWIGTYPE_p_Error);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_EnableStackTrace(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("Error::EnableStackTrace",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("Error::EnableStackTrace",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  Error::EnableStackTrace(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_EnableSuspendOnError(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("Error::EnableSuspendOnError",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("Error::EnableSuspendOnError",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  Error::EnableSuspendOnError(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Error(void *obj) {
Error *arg1 = (Error *) obj;
delete arg1;
}
static swig_lua_method swig_Error_methods[] = {
    {"Clone", _wrap_Error_Clone}, 
    {"GetCode", _wrap_Error_GetCode}, 
    {"GetMessage", _wrap_Error_GetMessage}, 
    {"GetFilename", _wrap_Error_GetFilename}, 
    {"GetFunction", _wrap_Error_GetFunction}, 
    {"GetLineNumber", _wrap_Error_GetLineNumber}, 
    {"GetOriginatingObject", _wrap_Error_GetOriginatingObject}, 
    {"GetTime", _wrap_Error_GetTime}, 
    {"Clear", _wrap_Error_Clear}, 
    {0,0}
};
static swig_lua_attribute swig_Error_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Error_bases[] = {0};
static const char *swig_Error_base_names[] = {0};
static swig_lua_class _wrap_class_Error = { "Error", &SWIGTYPE_p_Error,_wrap_new_Error, swig_delete_Error, swig_Error_methods, swig_Error_attributes, swig_Error_bases, swig_Error_base_names };

static int _wrap_ErrorBase_GetError(lua_State* L) {
  int SWIG_arg = 0;
  ErrorBase *arg1 = (ErrorBase *) 0 ;
  Error *result = 0 ;
  
  SWIG_check_num_args("ErrorBase::GetError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ErrorBase::GetError",1,"ErrorBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ErrorBase,0))){
    SWIG_fail_ptr("ErrorBase_GetError",1,SWIGTYPE_p_ErrorBase);
  }
  
  result = (Error *) &(arg1)->GetError();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Error,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ErrorBase_ClearError(lua_State* L) {
  int SWIG_arg = 0;
  ErrorBase *arg1 = (ErrorBase *) 0 ;
  
  SWIG_check_num_args("ErrorBase::ClearError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ErrorBase::ClearError",1,"ErrorBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ErrorBase,0))){
    SWIG_fail_ptr("ErrorBase_ClearError",1,SWIGTYPE_p_ErrorBase);
  }
  
  (arg1)->ClearError();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ErrorBase_StatusIsFatal(lua_State* L) {
  int SWIG_arg = 0;
  ErrorBase *arg1 = (ErrorBase *) 0 ;
  bool result;
  
  SWIG_check_num_args("ErrorBase::StatusIsFatal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ErrorBase::StatusIsFatal",1,"ErrorBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ErrorBase,0))){
    SWIG_fail_ptr("ErrorBase_StatusIsFatal",1,SWIGTYPE_p_ErrorBase);
  }
  
  result = (bool)((ErrorBase const *)arg1)->StatusIsFatal();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ErrorBase_GetGlobalError(lua_State* L) {
  int SWIG_arg = 0;
  Error *result = 0 ;
  
  SWIG_check_num_args("ErrorBase::GetGlobalError",0,0)
  result = (Error *) &ErrorBase::GetGlobalError();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Error,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ErrorBase(void *obj) {
ErrorBase *arg1 = (ErrorBase *) obj;
delete arg1;
}
static swig_lua_method swig_ErrorBase_methods[] = {
    {"GetError", _wrap_ErrorBase_GetError}, 
    {"ClearError", _wrap_ErrorBase_ClearError}, 
    {"StatusIsFatal", _wrap_ErrorBase_StatusIsFatal}, 
    {0,0}
};
static swig_lua_attribute swig_ErrorBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ErrorBase_bases[] = {0};
static const char *swig_ErrorBase_base_names[] = {0};
static swig_lua_class _wrap_class_ErrorBase = { "ErrorBase", &SWIGTYPE_p_ErrorBase,0, swig_delete_ErrorBase, swig_ErrorBase_methods, swig_ErrorBase_attributes, swig_ErrorBase_bases, swig_ErrorBase_base_names };

static int _wrap_new_SensorBase(lua_State* L) {
  int SWIG_arg = 0;
  SensorBase *result = 0 ;
  
  SWIG_check_num_args("SensorBase::SensorBase",0,0)
  result = (SensorBase *)new SensorBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SensorBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorBase_DeleteSingletons(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("SensorBase::DeleteSingletons",0,0)
  SensorBase::DeleteSingletons();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorBase_GetDefaultAnalogModule(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 result;
  
  SWIG_check_num_args("SensorBase::GetDefaultAnalogModule",0,0)
  result = (UINT32)SensorBase::GetDefaultAnalogModule();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorBase_GetDefaultDigitalModule(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 result;
  
  SWIG_check_num_args("SensorBase::GetDefaultDigitalModule",0,0)
  result = (UINT32)SensorBase::GetDefaultDigitalModule();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorBase_GetDefaultSolenoidModule(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 result;
  
  SWIG_check_num_args("SensorBase::GetDefaultSolenoidModule",0,0)
  result = (UINT32)SensorBase::GetDefaultSolenoidModule();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorBase_CheckAnalogModule(lua_State* L) {
  int SWIG_arg = 0;
  UINT8 arg1 ;
  bool result;
  
  SWIG_check_num_args("SensorBase::CheckAnalogModule",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SensorBase::CheckAnalogModule",1,"UINT8");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT8)lua_tonumber(L, 1);
  result = (bool)SensorBase::CheckAnalogModule(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorBase_CheckDigitalModule(lua_State* L) {
  int SWIG_arg = 0;
  UINT8 arg1 ;
  bool result;
  
  SWIG_check_num_args("SensorBase::CheckDigitalModule",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SensorBase::CheckDigitalModule",1,"UINT8");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT8)lua_tonumber(L, 1);
  result = (bool)SensorBase::CheckDigitalModule(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorBase_CheckPWMModule(lua_State* L) {
  int SWIG_arg = 0;
  UINT8 arg1 ;
  bool result;
  
  SWIG_check_num_args("SensorBase::CheckPWMModule",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SensorBase::CheckPWMModule",1,"UINT8");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT8)lua_tonumber(L, 1);
  result = (bool)SensorBase::CheckPWMModule(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorBase_CheckRelayModule(lua_State* L) {
  int SWIG_arg = 0;
  UINT8 arg1 ;
  bool result;
  
  SWIG_check_num_args("SensorBase::CheckRelayModule",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SensorBase::CheckRelayModule",1,"UINT8");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT8)lua_tonumber(L, 1);
  result = (bool)SensorBase::CheckRelayModule(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorBase_CheckSolenoidModule(lua_State* L) {
  int SWIG_arg = 0;
  UINT8 arg1 ;
  bool result;
  
  SWIG_check_num_args("SensorBase::CheckSolenoidModule",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SensorBase::CheckSolenoidModule",1,"UINT8");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT8)lua_tonumber(L, 1);
  result = (bool)SensorBase::CheckSolenoidModule(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorBase_CheckDigitalChannel(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  bool result;
  
  SWIG_check_num_args("SensorBase::CheckDigitalChannel",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SensorBase::CheckDigitalChannel",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (bool)SensorBase::CheckDigitalChannel(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorBase_CheckRelayChannel(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  bool result;
  
  SWIG_check_num_args("SensorBase::CheckRelayChannel",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SensorBase::CheckRelayChannel",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (bool)SensorBase::CheckRelayChannel(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorBase_CheckPWMChannel(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  bool result;
  
  SWIG_check_num_args("SensorBase::CheckPWMChannel",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SensorBase::CheckPWMChannel",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (bool)SensorBase::CheckPWMChannel(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorBase_CheckAnalogChannel(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  bool result;
  
  SWIG_check_num_args("SensorBase::CheckAnalogChannel",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SensorBase::CheckAnalogChannel",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (bool)SensorBase::CheckAnalogChannel(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SensorBase_CheckSolenoidChannel(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  bool result;
  
  SWIG_check_num_args("SensorBase::CheckSolenoidChannel",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SensorBase::CheckSolenoidChannel",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (bool)SensorBase::CheckSolenoidChannel(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SensorBase(void *obj) {
SensorBase *arg1 = (SensorBase *) obj;
delete arg1;
}
static swig_lua_method swig_SensorBase_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_SensorBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_SensorBase_bases[] = {0,0};
static const char *swig_SensorBase_base_names[] = {"ErrorBase *",0};
static swig_lua_class _wrap_class_SensorBase = { "SensorBase", &SWIGTYPE_p_SensorBase,_wrap_new_SensorBase, swig_delete_SensorBase, swig_SensorBase_methods, swig_SensorBase_attributes, swig_SensorBase_bases, swig_SensorBase_base_names };

static int _wrap_InterruptableSensorBase_RequestInterrupts(lua_State* L) {
  int SWIG_arg = 0;
  InterruptableSensorBase *arg1 = (InterruptableSensorBase *) 0 ;
  
  SWIG_check_num_args("InterruptableSensorBase::RequestInterrupts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InterruptableSensorBase::RequestInterrupts",1,"InterruptableSensorBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InterruptableSensorBase,0))){
    SWIG_fail_ptr("InterruptableSensorBase_RequestInterrupts",1,SWIGTYPE_p_InterruptableSensorBase);
  }
  
  (arg1)->RequestInterrupts();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InterruptableSensorBase_CancelInterrupts(lua_State* L) {
  int SWIG_arg = 0;
  InterruptableSensorBase *arg1 = (InterruptableSensorBase *) 0 ;
  
  SWIG_check_num_args("InterruptableSensorBase::CancelInterrupts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InterruptableSensorBase::CancelInterrupts",1,"InterruptableSensorBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InterruptableSensorBase,0))){
    SWIG_fail_ptr("InterruptableSensorBase_CancelInterrupts",1,SWIGTYPE_p_InterruptableSensorBase);
  }
  
  (arg1)->CancelInterrupts();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InterruptableSensorBase_WaitForInterrupt(lua_State* L) {
  int SWIG_arg = 0;
  InterruptableSensorBase *arg1 = (InterruptableSensorBase *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("InterruptableSensorBase::WaitForInterrupt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InterruptableSensorBase::WaitForInterrupt",1,"InterruptableSensorBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("InterruptableSensorBase::WaitForInterrupt",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InterruptableSensorBase,0))){
    SWIG_fail_ptr("InterruptableSensorBase_WaitForInterrupt",1,SWIGTYPE_p_InterruptableSensorBase);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->WaitForInterrupt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InterruptableSensorBase_EnableInterrupts(lua_State* L) {
  int SWIG_arg = 0;
  InterruptableSensorBase *arg1 = (InterruptableSensorBase *) 0 ;
  
  SWIG_check_num_args("InterruptableSensorBase::EnableInterrupts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InterruptableSensorBase::EnableInterrupts",1,"InterruptableSensorBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InterruptableSensorBase,0))){
    SWIG_fail_ptr("InterruptableSensorBase_EnableInterrupts",1,SWIGTYPE_p_InterruptableSensorBase);
  }
  
  (arg1)->EnableInterrupts();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InterruptableSensorBase_DisableInterrupts(lua_State* L) {
  int SWIG_arg = 0;
  InterruptableSensorBase *arg1 = (InterruptableSensorBase *) 0 ;
  
  SWIG_check_num_args("InterruptableSensorBase::DisableInterrupts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InterruptableSensorBase::DisableInterrupts",1,"InterruptableSensorBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InterruptableSensorBase,0))){
    SWIG_fail_ptr("InterruptableSensorBase_DisableInterrupts",1,SWIGTYPE_p_InterruptableSensorBase);
  }
  
  (arg1)->DisableInterrupts();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InterruptableSensorBase_ReadInterruptTimestamp(lua_State* L) {
  int SWIG_arg = 0;
  InterruptableSensorBase *arg1 = (InterruptableSensorBase *) 0 ;
  double result;
  
  SWIG_check_num_args("InterruptableSensorBase::ReadInterruptTimestamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InterruptableSensorBase::ReadInterruptTimestamp",1,"InterruptableSensorBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InterruptableSensorBase,0))){
    SWIG_fail_ptr("InterruptableSensorBase_ReadInterruptTimestamp",1,SWIGTYPE_p_InterruptableSensorBase);
  }
  
  result = (double)(arg1)->ReadInterruptTimestamp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InterruptableSensorBase(void *obj) {
InterruptableSensorBase *arg1 = (InterruptableSensorBase *) obj;
delete arg1;
}
static swig_lua_method swig_InterruptableSensorBase_methods[] = {
    {"RequestInterrupts", _wrap_InterruptableSensorBase_RequestInterrupts}, 
    {"CancelInterrupts", _wrap_InterruptableSensorBase_CancelInterrupts}, 
    {"WaitForInterrupt", _wrap_InterruptableSensorBase_WaitForInterrupt}, 
    {"EnableInterrupts", _wrap_InterruptableSensorBase_EnableInterrupts}, 
    {"DisableInterrupts", _wrap_InterruptableSensorBase_DisableInterrupts}, 
    {"ReadInterruptTimestamp", _wrap_InterruptableSensorBase_ReadInterruptTimestamp}, 
    {0,0}
};
static swig_lua_attribute swig_InterruptableSensorBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_InterruptableSensorBase_bases[] = {0,0};
static const char *swig_InterruptableSensorBase_base_names[] = {"SensorBase *",0};
static swig_lua_class _wrap_class_InterruptableSensorBase = { "InterruptableSensorBase", &SWIGTYPE_p_InterruptableSensorBase,0, swig_delete_InterruptableSensorBase, swig_InterruptableSensorBase_methods, swig_InterruptableSensorBase_attributes, swig_InterruptableSensorBase_bases, swig_InterruptableSensorBase_base_names };

static int _wrap_I2C_Transaction(lua_State* L) {
  int SWIG_arg = 0;
  I2C *arg1 = (I2C *) 0 ;
  UINT8 *arg2 = (UINT8 *) 0 ;
  UINT8 arg3 ;
  UINT8 *arg4 = (UINT8 *) 0 ;
  UINT8 arg5 ;
  bool result;
  
  SWIG_check_num_args("I2C::Transaction",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("I2C::Transaction",1,"I2C *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("I2C::Transaction",2,"UINT8 *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("I2C::Transaction",3,"UINT8");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("I2C::Transaction",4,"UINT8 *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("I2C::Transaction",5,"UINT8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_I2C,0))){
    SWIG_fail_ptr("I2C_Transaction",1,SWIGTYPE_p_I2C);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("I2C_Transaction",2,SWIGTYPE_p_unsigned_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT8)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("I2C_Transaction",4,SWIGTYPE_p_unsigned_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UINT8)lua_tonumber(L, 5);
  result = (bool)(arg1)->Transaction(arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_I2C_AddressOnly(lua_State* L) {
  int SWIG_arg = 0;
  I2C *arg1 = (I2C *) 0 ;
  bool result;
  
  SWIG_check_num_args("I2C::AddressOnly",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("I2C::AddressOnly",1,"I2C *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_I2C,0))){
    SWIG_fail_ptr("I2C_AddressOnly",1,SWIGTYPE_p_I2C);
  }
  
  result = (bool)(arg1)->AddressOnly();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_I2C_Write(lua_State* L) {
  int SWIG_arg = 0;
  I2C *arg1 = (I2C *) 0 ;
  UINT8 arg2 ;
  UINT8 arg3 ;
  bool result;
  
  SWIG_check_num_args("I2C::Write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("I2C::Write",1,"I2C *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("I2C::Write",2,"UINT8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("I2C::Write",3,"UINT8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_I2C,0))){
    SWIG_fail_ptr("I2C_Write",1,SWIGTYPE_p_I2C);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT8)lua_tonumber(L, 3);
  result = (bool)(arg1)->Write(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_I2C_Read(lua_State* L) {
  int SWIG_arg = 0;
  I2C *arg1 = (I2C *) 0 ;
  UINT8 arg2 ;
  UINT8 arg3 ;
  UINT8 *arg4 = (UINT8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("I2C::Read",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("I2C::Read",1,"I2C *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("I2C::Read",2,"UINT8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("I2C::Read",3,"UINT8");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("I2C::Read",4,"UINT8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_I2C,0))){
    SWIG_fail_ptr("I2C_Read",1,SWIGTYPE_p_I2C);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT8)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("I2C_Read",4,SWIGTYPE_p_unsigned_char);
  }
  
  result = (bool)(arg1)->Read(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_I2C_Broadcast(lua_State* L) {
  int SWIG_arg = 0;
  I2C *arg1 = (I2C *) 0 ;
  UINT8 arg2 ;
  UINT8 arg3 ;
  
  SWIG_check_num_args("I2C::Broadcast",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("I2C::Broadcast",1,"I2C *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("I2C::Broadcast",2,"UINT8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("I2C::Broadcast",3,"UINT8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_I2C,0))){
    SWIG_fail_ptr("I2C_Broadcast",1,SWIGTYPE_p_I2C);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT8)lua_tonumber(L, 3);
  (arg1)->Broadcast(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_I2C_SetCompatibilityMode(lua_State* L) {
  int SWIG_arg = 0;
  I2C *arg1 = (I2C *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("I2C::SetCompatibilityMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("I2C::SetCompatibilityMode",1,"I2C *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("I2C::SetCompatibilityMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_I2C,0))){
    SWIG_fail_ptr("I2C_SetCompatibilityMode",1,SWIGTYPE_p_I2C);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetCompatibilityMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_I2C_VerifySensor(lua_State* L) {
  int SWIG_arg = 0;
  I2C *arg1 = (I2C *) 0 ;
  UINT8 arg2 ;
  UINT8 arg3 ;
  UINT8 *arg4 = (UINT8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("I2C::VerifySensor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("I2C::VerifySensor",1,"I2C *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("I2C::VerifySensor",2,"UINT8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("I2C::VerifySensor",3,"UINT8");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("I2C::VerifySensor",4,"UINT8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_I2C,0))){
    SWIG_fail_ptr("I2C_VerifySensor",1,SWIGTYPE_p_I2C);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT8)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT8)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("I2C_VerifySensor",4,SWIGTYPE_p_unsigned_char);
  }
  
  result = (bool)(arg1)->VerifySensor(arg2,arg3,(UINT8 const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_I2C(void *obj) {
I2C *arg1 = (I2C *) obj;
delete arg1;
}
static swig_lua_method swig_I2C_methods[] = {
    {"Transaction", _wrap_I2C_Transaction}, 
    {"AddressOnly", _wrap_I2C_AddressOnly}, 
    {"Write", _wrap_I2C_Write}, 
    {"Read", _wrap_I2C_Read}, 
    {"Broadcast", _wrap_I2C_Broadcast}, 
    {"SetCompatibilityMode", _wrap_I2C_SetCompatibilityMode}, 
    {"VerifySensor", _wrap_I2C_VerifySensor}, 
    {0,0}
};
static swig_lua_attribute swig_I2C_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_I2C_bases[] = {0};
static const char *swig_I2C_base_names[] = {0};
static swig_lua_class _wrap_class_I2C = { "I2C", &SWIGTYPE_p_I2C,0, swig_delete_I2C, swig_I2C_methods, swig_I2C_attributes, swig_I2C_bases, swig_I2C_base_names };

static int _wrap_DigitalSource_GetChannelForRouting(lua_State* L) {
  int SWIG_arg = 0;
  DigitalSource *arg1 = (DigitalSource *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("DigitalSource::GetChannelForRouting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalSource::GetChannelForRouting",1,"DigitalSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("DigitalSource_GetChannelForRouting",1,SWIGTYPE_p_DigitalSource);
  }
  
  result = (UINT32)(arg1)->GetChannelForRouting();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalSource_GetModuleForRouting(lua_State* L) {
  int SWIG_arg = 0;
  DigitalSource *arg1 = (DigitalSource *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("DigitalSource::GetModuleForRouting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalSource::GetModuleForRouting",1,"DigitalSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("DigitalSource_GetModuleForRouting",1,SWIGTYPE_p_DigitalSource);
  }
  
  result = (UINT32)(arg1)->GetModuleForRouting();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalSource_GetAnalogTriggerForRouting(lua_State* L) {
  int SWIG_arg = 0;
  DigitalSource *arg1 = (DigitalSource *) 0 ;
  bool result;
  
  SWIG_check_num_args("DigitalSource::GetAnalogTriggerForRouting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalSource::GetAnalogTriggerForRouting",1,"DigitalSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("DigitalSource_GetAnalogTriggerForRouting",1,SWIGTYPE_p_DigitalSource);
  }
  
  result = (bool)(arg1)->GetAnalogTriggerForRouting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalSource_RequestInterrupts(lua_State* L) {
  int SWIG_arg = 0;
  DigitalSource *arg1 = (DigitalSource *) 0 ;
  
  SWIG_check_num_args("DigitalSource::RequestInterrupts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalSource::RequestInterrupts",1,"DigitalSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("DigitalSource_RequestInterrupts",1,SWIGTYPE_p_DigitalSource);
  }
  
  (arg1)->RequestInterrupts();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DigitalSource(void *obj) {
DigitalSource *arg1 = (DigitalSource *) obj;
delete arg1;
}
static swig_lua_method swig_DigitalSource_methods[] = {
    {"GetChannelForRouting", _wrap_DigitalSource_GetChannelForRouting}, 
    {"GetModuleForRouting", _wrap_DigitalSource_GetModuleForRouting}, 
    {"GetAnalogTriggerForRouting", _wrap_DigitalSource_GetAnalogTriggerForRouting}, 
    {"RequestInterrupts", _wrap_DigitalSource_RequestInterrupts}, 
    {0,0}
};
static swig_lua_attribute swig_DigitalSource_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_DigitalSource_bases[] = {0,0};
static const char *swig_DigitalSource_base_names[] = {"InterruptableSensorBase *",0};
static swig_lua_class _wrap_class_DigitalSource = { "DigitalSource", &SWIGTYPE_p_DigitalSource,0, swig_delete_DigitalSource, swig_DigitalSource_methods, swig_DigitalSource_attributes, swig_DigitalSource_bases, swig_DigitalSource_base_names };

static int _wrap_SolenoidBase_GetAll(lua_State* L) {
  int SWIG_arg = 0;
  SolenoidBase *arg1 = (SolenoidBase *) 0 ;
  UINT8 result;
  
  SWIG_check_num_args("SolenoidBase::GetAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SolenoidBase::GetAll",1,"SolenoidBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SolenoidBase,0))){
    SWIG_fail_ptr("SolenoidBase_GetAll",1,SWIGTYPE_p_SolenoidBase);
  }
  
  result = (UINT8)(arg1)->GetAll();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SolenoidBase(void *obj) {
SolenoidBase *arg1 = (SolenoidBase *) obj;
delete arg1;
}
static swig_lua_method swig_SolenoidBase_methods[] = {
    {"GetAll", _wrap_SolenoidBase_GetAll}, 
    {0,0}
};
static swig_lua_attribute swig_SolenoidBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_SolenoidBase_bases[] = {0,0};
static const char *swig_SolenoidBase_base_names[] = {"SensorBase *",0};
static swig_lua_class _wrap_class_SolenoidBase = { "SolenoidBase", &SWIGTYPE_p_SolenoidBase,0, swig_delete_SolenoidBase, swig_SolenoidBase_methods, swig_SolenoidBase_attributes, swig_SolenoidBase_bases, swig_SolenoidBase_base_names };

static int _wrap_CounterBase_Start(lua_State* L) {
  int SWIG_arg = 0;
  CounterBase *arg1 = (CounterBase *) 0 ;
  
  SWIG_check_num_args("CounterBase::Start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CounterBase::Start",1,"CounterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CounterBase,0))){
    SWIG_fail_ptr("CounterBase_Start",1,SWIGTYPE_p_CounterBase);
  }
  
  (arg1)->Start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CounterBase_Get(lua_State* L) {
  int SWIG_arg = 0;
  CounterBase *arg1 = (CounterBase *) 0 ;
  INT32 result;
  
  SWIG_check_num_args("CounterBase::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CounterBase::Get",1,"CounterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CounterBase,0))){
    SWIG_fail_ptr("CounterBase_Get",1,SWIGTYPE_p_CounterBase);
  }
  
  result = (INT32)(arg1)->Get();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CounterBase_Reset(lua_State* L) {
  int SWIG_arg = 0;
  CounterBase *arg1 = (CounterBase *) 0 ;
  
  SWIG_check_num_args("CounterBase::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CounterBase::Reset",1,"CounterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CounterBase,0))){
    SWIG_fail_ptr("CounterBase_Reset",1,SWIGTYPE_p_CounterBase);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CounterBase_Stop(lua_State* L) {
  int SWIG_arg = 0;
  CounterBase *arg1 = (CounterBase *) 0 ;
  
  SWIG_check_num_args("CounterBase::Stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CounterBase::Stop",1,"CounterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CounterBase,0))){
    SWIG_fail_ptr("CounterBase_Stop",1,SWIGTYPE_p_CounterBase);
  }
  
  (arg1)->Stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CounterBase_GetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  CounterBase *arg1 = (CounterBase *) 0 ;
  double result;
  
  SWIG_check_num_args("CounterBase::GetPeriod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CounterBase::GetPeriod",1,"CounterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CounterBase,0))){
    SWIG_fail_ptr("CounterBase_GetPeriod",1,SWIGTYPE_p_CounterBase);
  }
  
  result = (double)(arg1)->GetPeriod();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CounterBase_SetMaxPeriod(lua_State* L) {
  int SWIG_arg = 0;
  CounterBase *arg1 = (CounterBase *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("CounterBase::SetMaxPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CounterBase::SetMaxPeriod",1,"CounterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CounterBase::SetMaxPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CounterBase,0))){
    SWIG_fail_ptr("CounterBase_SetMaxPeriod",1,SWIGTYPE_p_CounterBase);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->SetMaxPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CounterBase_GetStopped(lua_State* L) {
  int SWIG_arg = 0;
  CounterBase *arg1 = (CounterBase *) 0 ;
  bool result;
  
  SWIG_check_num_args("CounterBase::GetStopped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CounterBase::GetStopped",1,"CounterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CounterBase,0))){
    SWIG_fail_ptr("CounterBase_GetStopped",1,SWIGTYPE_p_CounterBase);
  }
  
  result = (bool)(arg1)->GetStopped();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CounterBase_GetDirection(lua_State* L) {
  int SWIG_arg = 0;
  CounterBase *arg1 = (CounterBase *) 0 ;
  bool result;
  
  SWIG_check_num_args("CounterBase::GetDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CounterBase::GetDirection",1,"CounterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CounterBase,0))){
    SWIG_fail_ptr("CounterBase_GetDirection",1,SWIGTYPE_p_CounterBase);
  }
  
  result = (bool)(arg1)->GetDirection();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CounterBase(void *obj) {
CounterBase *arg1 = (CounterBase *) obj;
delete arg1;
}
static swig_lua_method swig_CounterBase_methods[] = {
    {"Start", _wrap_CounterBase_Start}, 
    {"Get", _wrap_CounterBase_Get}, 
    {"Reset", _wrap_CounterBase_Reset}, 
    {"Stop", _wrap_CounterBase_Stop}, 
    {"GetPeriod", _wrap_CounterBase_GetPeriod}, 
    {"SetMaxPeriod", _wrap_CounterBase_SetMaxPeriod}, 
    {"GetStopped", _wrap_CounterBase_GetStopped}, 
    {"GetDirection", _wrap_CounterBase_GetDirection}, 
    {0,0}
};
static swig_lua_attribute swig_CounterBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_CounterBase_bases[] = {0};
static const char *swig_CounterBase_base_names[] = {0};
static swig_lua_class _wrap_class_CounterBase = { "CounterBase", &SWIGTYPE_p_CounterBase,0, swig_delete_CounterBase, swig_CounterBase_methods, swig_CounterBase_attributes, swig_CounterBase_bases, swig_CounterBase_base_names };

static int _wrap_DashboardBase_GetStatusBuffer(lua_State* L) {
  int SWIG_arg = 0;
  DashboardBase *arg1 = (DashboardBase *) 0 ;
  char **arg2 = (char **) 0 ;
  INT32 *arg3 = (INT32 *) 0 ;
  
  SWIG_check_num_args("DashboardBase::GetStatusBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DashboardBase::GetStatusBuffer",1,"DashboardBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DashboardBase::GetStatusBuffer",2,"char **");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DashboardBase::GetStatusBuffer",3,"INT32 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DashboardBase,0))){
    SWIG_fail_ptr("DashboardBase_GetStatusBuffer",1,SWIGTYPE_p_DashboardBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("DashboardBase_GetStatusBuffer",2,SWIGTYPE_p_p_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DashboardBase_GetStatusBuffer",3,SWIGTYPE_p_int);
  }
  
  (arg1)->GetStatusBuffer(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DashboardBase_Flush(lua_State* L) {
  int SWIG_arg = 0;
  DashboardBase *arg1 = (DashboardBase *) 0 ;
  
  SWIG_check_num_args("DashboardBase::Flush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DashboardBase::Flush",1,"DashboardBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DashboardBase,0))){
    SWIG_fail_ptr("DashboardBase_Flush",1,SWIGTYPE_p_DashboardBase);
  }
  
  (arg1)->Flush();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DashboardBase(void *obj) {
DashboardBase *arg1 = (DashboardBase *) obj;
delete arg1;
}
static swig_lua_method swig_DashboardBase_methods[] = {
    {"GetStatusBuffer", _wrap_DashboardBase_GetStatusBuffer}, 
    {"Flush", _wrap_DashboardBase_Flush}, 
    {0,0}
};
static swig_lua_attribute swig_DashboardBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_DashboardBase_bases[] = {0,0};
static const char *swig_DashboardBase_base_names[] = {"ErrorBase *",0};
static swig_lua_class _wrap_class_DashboardBase = { "DashboardBase", &SWIGTYPE_p_DashboardBase,0, swig_delete_DashboardBase, swig_DashboardBase_methods, swig_DashboardBase_attributes, swig_DashboardBase_bases, swig_DashboardBase_base_names };

static int _wrap_SpeedController_Set(lua_State* L) {
  int SWIG_arg = 0;
  SpeedController *arg1 = (SpeedController *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SpeedController::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpeedController::Set",1,"SpeedController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SpeedController::Set",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpeedController,0))){
    SWIG_fail_ptr("SpeedController_Set",1,SWIGTYPE_p_SpeedController);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpeedController_Get(lua_State* L) {
  int SWIG_arg = 0;
  SpeedController *arg1 = (SpeedController *) 0 ;
  float result;
  
  SWIG_check_num_args("SpeedController::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpeedController::Get",1,"SpeedController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpeedController,0))){
    SWIG_fail_ptr("SpeedController_Get",1,SWIGTYPE_p_SpeedController);
  }
  
  result = (float)(arg1)->Get();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SpeedController(void *obj) {
SpeedController *arg1 = (SpeedController *) obj;
delete arg1;
}
static swig_lua_method swig_SpeedController_methods[] = {
    {"Set", _wrap_SpeedController_Set}, 
    {"Get", _wrap_SpeedController_Get}, 
    {0,0}
};
static swig_lua_attribute swig_SpeedController_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_SpeedController_bases[] = {0};
static const char *swig_SpeedController_base_names[] = {0};
static swig_lua_class _wrap_class_SpeedController = { "SpeedController", &SWIGTYPE_p_SpeedController,0, swig_delete_SpeedController, swig_SpeedController_methods, swig_SpeedController_attributes, swig_SpeedController_bases, swig_SpeedController_base_names };

static int _wrap_new_PWM__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  PWM *result = 0 ;
  
  SWIG_check_num_args("PWM::PWM",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PWM::PWM",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (PWM *)new PWM(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PWM,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PWM__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  PWM *result = 0 ;
  
  SWIG_check_num_args("PWM::PWM",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PWM::PWM",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PWM::PWM",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (PWM *)new PWM(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PWM,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PWM(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_PWM__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_PWM__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_PWM'\n"
    "  Possible C/C++ prototypes are:\n"
    "    PWM::PWM(UINT32)\n"
    "    PWM::PWM(UINT32,UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_PWM_SetRaw(lua_State* L) {
  int SWIG_arg = 0;
  PWM *arg1 = (PWM *) 0 ;
  UINT8 arg2 ;
  
  SWIG_check_num_args("PWM::SetRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PWM::SetRaw",1,"PWM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PWM::SetRaw",2,"UINT8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PWM,0))){
    SWIG_fail_ptr("PWM_SetRaw",1,SWIGTYPE_p_PWM);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT8)lua_tonumber(L, 2);
  (arg1)->SetRaw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PWM_GetRaw(lua_State* L) {
  int SWIG_arg = 0;
  PWM *arg1 = (PWM *) 0 ;
  UINT8 result;
  
  SWIG_check_num_args("PWM::GetRaw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PWM::GetRaw",1,"PWM *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PWM,0))){
    SWIG_fail_ptr("PWM_GetRaw",1,SWIGTYPE_p_PWM);
  }
  
  result = (UINT8)(arg1)->GetRaw();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PWM_SetPeriodMultiplier(lua_State* L) {
  int SWIG_arg = 0;
  PWM *arg1 = (PWM *) 0 ;
  PWM::PeriodMultiplier arg2 ;
  
  SWIG_check_num_args("PWM::SetPeriodMultiplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PWM::SetPeriodMultiplier",1,"PWM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PWM::SetPeriodMultiplier",2,"PWM::PeriodMultiplier");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PWM,0))){
    SWIG_fail_ptr("PWM_SetPeriodMultiplier",1,SWIGTYPE_p_PWM);
  }
  
  arg2 = (PWM::PeriodMultiplier)(int)lua_tonumber(L, 2);
  (arg1)->SetPeriodMultiplier(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PWM_EnableDeadbandElimination(lua_State* L) {
  int SWIG_arg = 0;
  PWM *arg1 = (PWM *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("PWM::EnableDeadbandElimination",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PWM::EnableDeadbandElimination",1,"PWM *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("PWM::EnableDeadbandElimination",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PWM,0))){
    SWIG_fail_ptr("PWM_EnableDeadbandElimination",1,SWIGTYPE_p_PWM);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->EnableDeadbandElimination(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PWM_SetBounds(lua_State* L) {
  int SWIG_arg = 0;
  PWM *arg1 = (PWM *) 0 ;
  INT32 arg2 ;
  INT32 arg3 ;
  INT32 arg4 ;
  INT32 arg5 ;
  INT32 arg6 ;
  
  SWIG_check_num_args("PWM::SetBounds",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PWM::SetBounds",1,"PWM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PWM::SetBounds",2,"INT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("PWM::SetBounds",3,"INT32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("PWM::SetBounds",4,"INT32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("PWM::SetBounds",5,"INT32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("PWM::SetBounds",6,"INT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PWM,0))){
    SWIG_fail_ptr("PWM_SetBounds",1,SWIGTYPE_p_PWM);
  }
  
  arg2 = (INT32)lua_tonumber(L, 2);
  arg3 = (INT32)lua_tonumber(L, 3);
  arg4 = (INT32)lua_tonumber(L, 4);
  arg5 = (INT32)lua_tonumber(L, 5);
  arg6 = (INT32)lua_tonumber(L, 6);
  (arg1)->SetBounds(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PWM(void *obj) {
PWM *arg1 = (PWM *) obj;
delete arg1;
}
static swig_lua_method swig_PWM_methods[] = {
    {"SetRaw", _wrap_PWM_SetRaw}, 
    {"GetRaw", _wrap_PWM_GetRaw}, 
    {"SetPeriodMultiplier", _wrap_PWM_SetPeriodMultiplier}, 
    {"EnableDeadbandElimination", _wrap_PWM_EnableDeadbandElimination}, 
    {"SetBounds", _wrap_PWM_SetBounds}, 
    {0,0}
};
static swig_lua_attribute swig_PWM_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_PWM_bases[] = {0,0};
static const char *swig_PWM_base_names[] = {"SensorBase *",0};
static swig_lua_class _wrap_class_PWM = { "PWM", &SWIGTYPE_p_PWM,_wrap_new_PWM, swig_delete_PWM, swig_PWM_methods, swig_PWM_attributes, swig_PWM_bases, swig_PWM_base_names };

static int _wrap_GenericHID_GetX__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  GenericHID *arg1 = (GenericHID *) 0 ;
  GenericHID::JoystickHand arg2 ;
  float result;
  
  SWIG_check_num_args("GenericHID::GetX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GenericHID::GetX",1,"GenericHID *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GenericHID::GetX",2,"GenericHID::JoystickHand");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("GenericHID_GetX",1,SWIGTYPE_p_GenericHID);
  }
  
  arg2 = (GenericHID::JoystickHand)(int)lua_tonumber(L, 2);
  result = (float)(arg1)->GetX(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericHID_GetX__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GenericHID *arg1 = (GenericHID *) 0 ;
  float result;
  
  SWIG_check_num_args("GenericHID::GetX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GenericHID::GetX",1,"GenericHID *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("GenericHID_GetX",1,SWIGTYPE_p_GenericHID);
  }
  
  result = (float)(arg1)->GetX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericHID_GetX(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GenericHID_GetX__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GenericHID_GetX__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GenericHID_GetX'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GenericHID::GetX(GenericHID::JoystickHand)\n"
    "    GenericHID::GetX()\n");
  lua_error(L);return 0;
}


static int _wrap_GenericHID_GetY__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  GenericHID *arg1 = (GenericHID *) 0 ;
  GenericHID::JoystickHand arg2 ;
  float result;
  
  SWIG_check_num_args("GenericHID::GetY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GenericHID::GetY",1,"GenericHID *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GenericHID::GetY",2,"GenericHID::JoystickHand");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("GenericHID_GetY",1,SWIGTYPE_p_GenericHID);
  }
  
  arg2 = (GenericHID::JoystickHand)(int)lua_tonumber(L, 2);
  result = (float)(arg1)->GetY(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericHID_GetY__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GenericHID *arg1 = (GenericHID *) 0 ;
  float result;
  
  SWIG_check_num_args("GenericHID::GetY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GenericHID::GetY",1,"GenericHID *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("GenericHID_GetY",1,SWIGTYPE_p_GenericHID);
  }
  
  result = (float)(arg1)->GetY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericHID_GetY(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GenericHID_GetY__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GenericHID_GetY__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GenericHID_GetY'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GenericHID::GetY(GenericHID::JoystickHand)\n"
    "    GenericHID::GetY()\n");
  lua_error(L);return 0;
}


static int _wrap_GenericHID_GetZ(lua_State* L) {
  int SWIG_arg = 0;
  GenericHID *arg1 = (GenericHID *) 0 ;
  float result;
  
  SWIG_check_num_args("GenericHID::GetZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GenericHID::GetZ",1,"GenericHID *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("GenericHID_GetZ",1,SWIGTYPE_p_GenericHID);
  }
  
  result = (float)(arg1)->GetZ();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericHID_GetTwist(lua_State* L) {
  int SWIG_arg = 0;
  GenericHID *arg1 = (GenericHID *) 0 ;
  float result;
  
  SWIG_check_num_args("GenericHID::GetTwist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GenericHID::GetTwist",1,"GenericHID *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("GenericHID_GetTwist",1,SWIGTYPE_p_GenericHID);
  }
  
  result = (float)(arg1)->GetTwist();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericHID_GetThrottle(lua_State* L) {
  int SWIG_arg = 0;
  GenericHID *arg1 = (GenericHID *) 0 ;
  float result;
  
  SWIG_check_num_args("GenericHID::GetThrottle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GenericHID::GetThrottle",1,"GenericHID *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("GenericHID_GetThrottle",1,SWIGTYPE_p_GenericHID);
  }
  
  result = (float)(arg1)->GetThrottle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericHID_GetRawAxis(lua_State* L) {
  int SWIG_arg = 0;
  GenericHID *arg1 = (GenericHID *) 0 ;
  UINT32 arg2 ;
  float result;
  
  SWIG_check_num_args("GenericHID::GetRawAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GenericHID::GetRawAxis",1,"GenericHID *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GenericHID::GetRawAxis",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("GenericHID_GetRawAxis",1,SWIGTYPE_p_GenericHID);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (float)(arg1)->GetRawAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericHID_GetTrigger__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  GenericHID *arg1 = (GenericHID *) 0 ;
  GenericHID::JoystickHand arg2 ;
  bool result;
  
  SWIG_check_num_args("GenericHID::GetTrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GenericHID::GetTrigger",1,"GenericHID *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GenericHID::GetTrigger",2,"GenericHID::JoystickHand");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("GenericHID_GetTrigger",1,SWIGTYPE_p_GenericHID);
  }
  
  arg2 = (GenericHID::JoystickHand)(int)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetTrigger(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericHID_GetTrigger__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GenericHID *arg1 = (GenericHID *) 0 ;
  bool result;
  
  SWIG_check_num_args("GenericHID::GetTrigger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GenericHID::GetTrigger",1,"GenericHID *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("GenericHID_GetTrigger",1,SWIGTYPE_p_GenericHID);
  }
  
  result = (bool)(arg1)->GetTrigger();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericHID_GetTrigger(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GenericHID_GetTrigger__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GenericHID_GetTrigger__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GenericHID_GetTrigger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GenericHID::GetTrigger(GenericHID::JoystickHand)\n"
    "    GenericHID::GetTrigger()\n");
  lua_error(L);return 0;
}


static int _wrap_GenericHID_GetTop__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  GenericHID *arg1 = (GenericHID *) 0 ;
  GenericHID::JoystickHand arg2 ;
  bool result;
  
  SWIG_check_num_args("GenericHID::GetTop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GenericHID::GetTop",1,"GenericHID *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GenericHID::GetTop",2,"GenericHID::JoystickHand");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("GenericHID_GetTop",1,SWIGTYPE_p_GenericHID);
  }
  
  arg2 = (GenericHID::JoystickHand)(int)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetTop(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericHID_GetTop__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GenericHID *arg1 = (GenericHID *) 0 ;
  bool result;
  
  SWIG_check_num_args("GenericHID::GetTop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GenericHID::GetTop",1,"GenericHID *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("GenericHID_GetTop",1,SWIGTYPE_p_GenericHID);
  }
  
  result = (bool)(arg1)->GetTop();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericHID_GetTop(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GenericHID_GetTop__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GenericHID_GetTop__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GenericHID_GetTop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GenericHID::GetTop(GenericHID::JoystickHand)\n"
    "    GenericHID::GetTop()\n");
  lua_error(L);return 0;
}


static int _wrap_GenericHID_GetBumper__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  GenericHID *arg1 = (GenericHID *) 0 ;
  GenericHID::JoystickHand arg2 ;
  bool result;
  
  SWIG_check_num_args("GenericHID::GetBumper",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GenericHID::GetBumper",1,"GenericHID *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GenericHID::GetBumper",2,"GenericHID::JoystickHand");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("GenericHID_GetBumper",1,SWIGTYPE_p_GenericHID);
  }
  
  arg2 = (GenericHID::JoystickHand)(int)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetBumper(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericHID_GetBumper__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GenericHID *arg1 = (GenericHID *) 0 ;
  bool result;
  
  SWIG_check_num_args("GenericHID::GetBumper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GenericHID::GetBumper",1,"GenericHID *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("GenericHID_GetBumper",1,SWIGTYPE_p_GenericHID);
  }
  
  result = (bool)(arg1)->GetBumper();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericHID_GetBumper(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GenericHID_GetBumper__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_GenericHID_GetBumper__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'GenericHID_GetBumper'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GenericHID::GetBumper(GenericHID::JoystickHand)\n"
    "    GenericHID::GetBumper()\n");
  lua_error(L);return 0;
}


static int _wrap_GenericHID_GetRawButton(lua_State* L) {
  int SWIG_arg = 0;
  GenericHID *arg1 = (GenericHID *) 0 ;
  UINT32 arg2 ;
  bool result;
  
  SWIG_check_num_args("GenericHID::GetRawButton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GenericHID::GetRawButton",1,"GenericHID *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GenericHID::GetRawButton",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("GenericHID_GetRawButton",1,SWIGTYPE_p_GenericHID);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetRawButton(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GenericHID(void *obj) {
GenericHID *arg1 = (GenericHID *) obj;
delete arg1;
}
static swig_lua_method swig_GenericHID_methods[] = {
    {"GetX", _wrap_GenericHID_GetX}, 
    {"GetY", _wrap_GenericHID_GetY}, 
    {"GetZ", _wrap_GenericHID_GetZ}, 
    {"GetTwist", _wrap_GenericHID_GetTwist}, 
    {"GetThrottle", _wrap_GenericHID_GetThrottle}, 
    {"GetRawAxis", _wrap_GenericHID_GetRawAxis}, 
    {"GetTrigger", _wrap_GenericHID_GetTrigger}, 
    {"GetTop", _wrap_GenericHID_GetTop}, 
    {"GetBumper", _wrap_GenericHID_GetBumper}, 
    {"GetRawButton", _wrap_GenericHID_GetRawButton}, 
    {0,0}
};
static swig_lua_attribute swig_GenericHID_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GenericHID_bases[] = {0};
static const char *swig_GenericHID_base_names[] = {0};
static swig_lua_class _wrap_class_GenericHID = { "GenericHID", &SWIGTYPE_p_GenericHID,0, swig_delete_GenericHID, swig_GenericHID_methods, swig_GenericHID_attributes, swig_GenericHID_bases, swig_GenericHID_base_names };

static int _wrap_PIDOutput_PIDWrite(lua_State* L) {
  int SWIG_arg = 0;
  PIDOutput *arg1 = (PIDOutput *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("PIDOutput::PIDWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDOutput::PIDWrite",1,"PIDOutput *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PIDOutput::PIDWrite",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDOutput,0))){
    SWIG_fail_ptr("PIDOutput_PIDWrite",1,SWIGTYPE_p_PIDOutput);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->PIDWrite(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PIDOutput(void *obj) {
PIDOutput *arg1 = (PIDOutput *) obj;
delete arg1;
}
static swig_lua_method swig_PIDOutput_methods[] = {
    {"PIDWrite", _wrap_PIDOutput_PIDWrite}, 
    {0,0}
};
static swig_lua_attribute swig_PIDOutput_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_PIDOutput_bases[] = {0};
static const char *swig_PIDOutput_base_names[] = {0};
static swig_lua_class _wrap_class_PIDOutput = { "PIDOutput", &SWIGTYPE_p_PIDOutput,0, swig_delete_PIDOutput, swig_PIDOutput_methods, swig_PIDOutput_attributes, swig_PIDOutput_bases, swig_PIDOutput_base_names };

static int _wrap_PIDSource_PIDGet(lua_State* L) {
  int SWIG_arg = 0;
  PIDSource *arg1 = (PIDSource *) 0 ;
  double result;
  
  SWIG_check_num_args("PIDSource::PIDGet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDSource::PIDGet",1,"PIDSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDSource,0))){
    SWIG_fail_ptr("PIDSource_PIDGet",1,SWIGTYPE_p_PIDSource);
  }
  
  result = (double)(arg1)->PIDGet();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PIDSource(void *obj) {
PIDSource *arg1 = (PIDSource *) obj;
delete arg1;
}
static swig_lua_method swig_PIDSource_methods[] = {
    {"PIDGet", _wrap_PIDSource_PIDGet}, 
    {0,0}
};
static swig_lua_attribute swig_PIDSource_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_PIDSource_bases[] = {0};
static const char *swig_PIDSource_base_names[] = {0};
static swig_lua_class _wrap_class_PIDSource = { "PIDSource", &SWIGTYPE_p_PIDSource,0, swig_delete_PIDSource, swig_PIDSource_methods, swig_PIDSource_attributes, swig_PIDSource_bases, swig_PIDSource_base_names };

static int _wrap_Module_GetNumber(lua_State* L) {
  int SWIG_arg = 0;
  Module *arg1 = (Module *) 0 ;
  UINT8 result;
  
  SWIG_check_num_args("Module::GetNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Module::GetNumber",1,"Module *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Module,0))){
    SWIG_fail_ptr("Module_GetNumber",1,SWIGTYPE_p_Module);
  }
  
  result = (UINT8)(arg1)->GetNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Module_GetModule(lua_State* L) {
  int SWIG_arg = 0;
  nLoadOut::tModuleType arg1 ;
  UINT8 arg2 ;
  nLoadOut::tModuleType *argp1 ;
  Module *result = 0 ;
  
  SWIG_check_num_args("Module::GetModule",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Module::GetModule",1,"nLoadOut::tModuleType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Module::GetModule",2,"UINT8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_nLoadOut__tModuleType,0))){
    SWIG_fail_ptr("Module_GetModule",1,SWIGTYPE_p_nLoadOut__tModuleType);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT8)lua_tonumber(L, 2);
  result = (Module *)Module::GetModule(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Module,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_Module_methods[] = {
    {"GetNumber", _wrap_Module_GetNumber}, 
    {0,0}
};
static swig_lua_attribute swig_Module_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Module_bases[] = {0,0};
static const char *swig_Module_base_names[] = {"SensorBase *",0};
static swig_lua_class _wrap_class_Module = { "Module", &SWIGTYPE_p_Module,0,0, swig_Module_methods, swig_Module_attributes, swig_Module_bases, swig_Module_base_names };

static int _wrap_MotorSafety_SetExpiration(lua_State* L) {
  int SWIG_arg = 0;
  MotorSafety *arg1 = (MotorSafety *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("MotorSafety::SetExpiration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MotorSafety::SetExpiration",1,"MotorSafety *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MotorSafety::SetExpiration",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MotorSafety,0))){
    SWIG_fail_ptr("MotorSafety_SetExpiration",1,SWIGTYPE_p_MotorSafety);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetExpiration(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorSafety_GetExpiration(lua_State* L) {
  int SWIG_arg = 0;
  MotorSafety *arg1 = (MotorSafety *) 0 ;
  float result;
  
  SWIG_check_num_args("MotorSafety::GetExpiration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MotorSafety::GetExpiration",1,"MotorSafety *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MotorSafety,0))){
    SWIG_fail_ptr("MotorSafety_GetExpiration",1,SWIGTYPE_p_MotorSafety);
  }
  
  result = (float)(arg1)->GetExpiration();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorSafety_IsAlive(lua_State* L) {
  int SWIG_arg = 0;
  MotorSafety *arg1 = (MotorSafety *) 0 ;
  bool result;
  
  SWIG_check_num_args("MotorSafety::IsAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MotorSafety::IsAlive",1,"MotorSafety *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MotorSafety,0))){
    SWIG_fail_ptr("MotorSafety_IsAlive",1,SWIGTYPE_p_MotorSafety);
  }
  
  result = (bool)(arg1)->IsAlive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorSafety_StopMotor(lua_State* L) {
  int SWIG_arg = 0;
  MotorSafety *arg1 = (MotorSafety *) 0 ;
  
  SWIG_check_num_args("MotorSafety::StopMotor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MotorSafety::StopMotor",1,"MotorSafety *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MotorSafety,0))){
    SWIG_fail_ptr("MotorSafety_StopMotor",1,SWIGTYPE_p_MotorSafety);
  }
  
  (arg1)->StopMotor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorSafety_SetSafetyEnabled(lua_State* L) {
  int SWIG_arg = 0;
  MotorSafety *arg1 = (MotorSafety *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("MotorSafety::SetSafetyEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MotorSafety::SetSafetyEnabled",1,"MotorSafety *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("MotorSafety::SetSafetyEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MotorSafety,0))){
    SWIG_fail_ptr("MotorSafety_SetSafetyEnabled",1,SWIGTYPE_p_MotorSafety);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetSafetyEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorSafety_IsSafetyEnabled(lua_State* L) {
  int SWIG_arg = 0;
  MotorSafety *arg1 = (MotorSafety *) 0 ;
  bool result;
  
  SWIG_check_num_args("MotorSafety::IsSafetyEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MotorSafety::IsSafetyEnabled",1,"MotorSafety *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MotorSafety,0))){
    SWIG_fail_ptr("MotorSafety_IsSafetyEnabled",1,SWIGTYPE_p_MotorSafety);
  }
  
  result = (bool)(arg1)->IsSafetyEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MotorSafety(void *obj) {
MotorSafety *arg1 = (MotorSafety *) obj;
delete arg1;
}
static swig_lua_method swig_MotorSafety_methods[] = {
    {"SetExpiration", _wrap_MotorSafety_SetExpiration}, 
    {"GetExpiration", _wrap_MotorSafety_GetExpiration}, 
    {"IsAlive", _wrap_MotorSafety_IsAlive}, 
    {"StopMotor", _wrap_MotorSafety_StopMotor}, 
    {"SetSafetyEnabled", _wrap_MotorSafety_SetSafetyEnabled}, 
    {"IsSafetyEnabled", _wrap_MotorSafety_IsSafetyEnabled}, 
    {0,0}
};
static swig_lua_attribute swig_MotorSafety_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_MotorSafety_bases[] = {0};
static const char *swig_MotorSafety_base_names[] = {0};
static swig_lua_class _wrap_class_MotorSafety = { "MotorSafety", &SWIGTYPE_p_MotorSafety,0, swig_delete_MotorSafety, swig_MotorSafety_methods, swig_MotorSafety_attributes, swig_MotorSafety_bases, swig_MotorSafety_base_names };

static int _wrap_new_MotorSafetyHelper(lua_State* L) {
  int SWIG_arg = 0;
  MotorSafety *arg1 = (MotorSafety *) 0 ;
  MotorSafetyHelper *result = 0 ;
  
  SWIG_check_num_args("MotorSafetyHelper::MotorSafetyHelper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MotorSafetyHelper::MotorSafetyHelper",1,"MotorSafety *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MotorSafety,0))){
    SWIG_fail_ptr("new_MotorSafetyHelper",1,SWIGTYPE_p_MotorSafety);
  }
  
  result = (MotorSafetyHelper *)new MotorSafetyHelper(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MotorSafetyHelper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorSafetyHelper_Feed(lua_State* L) {
  int SWIG_arg = 0;
  MotorSafetyHelper *arg1 = (MotorSafetyHelper *) 0 ;
  
  SWIG_check_num_args("MotorSafetyHelper::Feed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MotorSafetyHelper::Feed",1,"MotorSafetyHelper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MotorSafetyHelper,0))){
    SWIG_fail_ptr("MotorSafetyHelper_Feed",1,SWIGTYPE_p_MotorSafetyHelper);
  }
  
  (arg1)->Feed();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorSafetyHelper_SetExpiration(lua_State* L) {
  int SWIG_arg = 0;
  MotorSafetyHelper *arg1 = (MotorSafetyHelper *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("MotorSafetyHelper::SetExpiration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MotorSafetyHelper::SetExpiration",1,"MotorSafetyHelper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MotorSafetyHelper::SetExpiration",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MotorSafetyHelper,0))){
    SWIG_fail_ptr("MotorSafetyHelper_SetExpiration",1,SWIGTYPE_p_MotorSafetyHelper);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetExpiration(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorSafetyHelper_GetExpiration(lua_State* L) {
  int SWIG_arg = 0;
  MotorSafetyHelper *arg1 = (MotorSafetyHelper *) 0 ;
  float result;
  
  SWIG_check_num_args("MotorSafetyHelper::GetExpiration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MotorSafetyHelper::GetExpiration",1,"MotorSafetyHelper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MotorSafetyHelper,0))){
    SWIG_fail_ptr("MotorSafetyHelper_GetExpiration",1,SWIGTYPE_p_MotorSafetyHelper);
  }
  
  result = (float)(arg1)->GetExpiration();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorSafetyHelper_IsAlive(lua_State* L) {
  int SWIG_arg = 0;
  MotorSafetyHelper *arg1 = (MotorSafetyHelper *) 0 ;
  bool result;
  
  SWIG_check_num_args("MotorSafetyHelper::IsAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MotorSafetyHelper::IsAlive",1,"MotorSafetyHelper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MotorSafetyHelper,0))){
    SWIG_fail_ptr("MotorSafetyHelper_IsAlive",1,SWIGTYPE_p_MotorSafetyHelper);
  }
  
  result = (bool)(arg1)->IsAlive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorSafetyHelper_Check(lua_State* L) {
  int SWIG_arg = 0;
  MotorSafetyHelper *arg1 = (MotorSafetyHelper *) 0 ;
  
  SWIG_check_num_args("MotorSafetyHelper::Check",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MotorSafetyHelper::Check",1,"MotorSafetyHelper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MotorSafetyHelper,0))){
    SWIG_fail_ptr("MotorSafetyHelper_Check",1,SWIGTYPE_p_MotorSafetyHelper);
  }
  
  (arg1)->Check();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorSafetyHelper_SetSafetyEnabled(lua_State* L) {
  int SWIG_arg = 0;
  MotorSafetyHelper *arg1 = (MotorSafetyHelper *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("MotorSafetyHelper::SetSafetyEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MotorSafetyHelper::SetSafetyEnabled",1,"MotorSafetyHelper *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("MotorSafetyHelper::SetSafetyEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MotorSafetyHelper,0))){
    SWIG_fail_ptr("MotorSafetyHelper_SetSafetyEnabled",1,SWIGTYPE_p_MotorSafetyHelper);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetSafetyEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorSafetyHelper_IsSafetyEnabled(lua_State* L) {
  int SWIG_arg = 0;
  MotorSafetyHelper *arg1 = (MotorSafetyHelper *) 0 ;
  bool result;
  
  SWIG_check_num_args("MotorSafetyHelper::IsSafetyEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MotorSafetyHelper::IsSafetyEnabled",1,"MotorSafetyHelper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MotorSafetyHelper,0))){
    SWIG_fail_ptr("MotorSafetyHelper_IsSafetyEnabled",1,SWIGTYPE_p_MotorSafetyHelper);
  }
  
  result = (bool)(arg1)->IsSafetyEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MotorSafetyHelper_CheckMotors(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("MotorSafetyHelper::CheckMotors",0,0)
  MotorSafetyHelper::CheckMotors();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MotorSafetyHelper(void *obj) {
MotorSafetyHelper *arg1 = (MotorSafetyHelper *) obj;
delete arg1;
}
static swig_lua_method swig_MotorSafetyHelper_methods[] = {
    {"Feed", _wrap_MotorSafetyHelper_Feed}, 
    {"SetExpiration", _wrap_MotorSafetyHelper_SetExpiration}, 
    {"GetExpiration", _wrap_MotorSafetyHelper_GetExpiration}, 
    {"IsAlive", _wrap_MotorSafetyHelper_IsAlive}, 
    {"Check", _wrap_MotorSafetyHelper_Check}, 
    {"SetSafetyEnabled", _wrap_MotorSafetyHelper_SetSafetyEnabled}, 
    {"IsSafetyEnabled", _wrap_MotorSafetyHelper_IsSafetyEnabled}, 
    {0,0}
};
static swig_lua_attribute swig_MotorSafetyHelper_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_MotorSafetyHelper_bases[] = {0};
static const char *swig_MotorSafetyHelper_base_names[] = {0};
static swig_lua_class _wrap_class_MotorSafetyHelper = { "MotorSafetyHelper", &SWIGTYPE_p_MotorSafetyHelper,_wrap_new_MotorSafetyHelper, swig_delete_MotorSafetyHelper, swig_MotorSafetyHelper_methods, swig_MotorSafetyHelper_attributes, swig_MotorSafetyHelper_bases, swig_MotorSafetyHelper_base_names };

static int _wrap_new_SafePWM__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  SafePWM *result = 0 ;
  
  SWIG_check_num_args("SafePWM::SafePWM",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SafePWM::SafePWM",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (SafePWM *)new SafePWM(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SafePWM,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SafePWM__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  SafePWM *result = 0 ;
  
  SWIG_check_num_args("SafePWM::SafePWM",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SafePWM::SafePWM",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SafePWM::SafePWM",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (SafePWM *)new SafePWM(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SafePWM,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SafePWM(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SafePWM__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SafePWM__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_SafePWM'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SafePWM::SafePWM(UINT32)\n"
    "    SafePWM::SafePWM(UINT32,UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_SafePWM_SetExpiration(lua_State* L) {
  int SWIG_arg = 0;
  SafePWM *arg1 = (SafePWM *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SafePWM::SetExpiration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SafePWM::SetExpiration",1,"SafePWM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SafePWM::SetExpiration",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SafePWM,0))){
    SWIG_fail_ptr("SafePWM_SetExpiration",1,SWIGTYPE_p_SafePWM);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetExpiration(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SafePWM_GetExpiration(lua_State* L) {
  int SWIG_arg = 0;
  SafePWM *arg1 = (SafePWM *) 0 ;
  float result;
  
  SWIG_check_num_args("SafePWM::GetExpiration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SafePWM::GetExpiration",1,"SafePWM *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SafePWM,0))){
    SWIG_fail_ptr("SafePWM_GetExpiration",1,SWIGTYPE_p_SafePWM);
  }
  
  result = (float)(arg1)->GetExpiration();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SafePWM_IsAlive(lua_State* L) {
  int SWIG_arg = 0;
  SafePWM *arg1 = (SafePWM *) 0 ;
  bool result;
  
  SWIG_check_num_args("SafePWM::IsAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SafePWM::IsAlive",1,"SafePWM *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SafePWM,0))){
    SWIG_fail_ptr("SafePWM_IsAlive",1,SWIGTYPE_p_SafePWM);
  }
  
  result = (bool)(arg1)->IsAlive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SafePWM_StopMotor(lua_State* L) {
  int SWIG_arg = 0;
  SafePWM *arg1 = (SafePWM *) 0 ;
  
  SWIG_check_num_args("SafePWM::StopMotor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SafePWM::StopMotor",1,"SafePWM *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SafePWM,0))){
    SWIG_fail_ptr("SafePWM_StopMotor",1,SWIGTYPE_p_SafePWM);
  }
  
  (arg1)->StopMotor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SafePWM_IsSafetyEnabled(lua_State* L) {
  int SWIG_arg = 0;
  SafePWM *arg1 = (SafePWM *) 0 ;
  bool result;
  
  SWIG_check_num_args("SafePWM::IsSafetyEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SafePWM::IsSafetyEnabled",1,"SafePWM *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SafePWM,0))){
    SWIG_fail_ptr("SafePWM_IsSafetyEnabled",1,SWIGTYPE_p_SafePWM);
  }
  
  result = (bool)(arg1)->IsSafetyEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SafePWM_SetSafetyEnabled(lua_State* L) {
  int SWIG_arg = 0;
  SafePWM *arg1 = (SafePWM *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SafePWM::SetSafetyEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SafePWM::SetSafetyEnabled",1,"SafePWM *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SafePWM::SetSafetyEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SafePWM,0))){
    SWIG_fail_ptr("SafePWM_SetSafetyEnabled",1,SWIGTYPE_p_SafePWM);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetSafetyEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SafePWM_SetSpeed(lua_State* L) {
  int SWIG_arg = 0;
  SafePWM *arg1 = (SafePWM *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SafePWM::SetSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SafePWM::SetSpeed",1,"SafePWM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SafePWM::SetSpeed",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SafePWM,0))){
    SWIG_fail_ptr("SafePWM_SetSpeed",1,SWIGTYPE_p_SafePWM);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SafePWM(void *obj) {
SafePWM *arg1 = (SafePWM *) obj;
delete arg1;
}
static swig_lua_method swig_SafePWM_methods[] = {
    {"SetExpiration", _wrap_SafePWM_SetExpiration}, 
    {"GetExpiration", _wrap_SafePWM_GetExpiration}, 
    {"IsAlive", _wrap_SafePWM_IsAlive}, 
    {"StopMotor", _wrap_SafePWM_StopMotor}, 
    {"IsSafetyEnabled", _wrap_SafePWM_IsSafetyEnabled}, 
    {"SetSafetyEnabled", _wrap_SafePWM_SetSafetyEnabled}, 
    {"SetSpeed", _wrap_SafePWM_SetSpeed}, 
    {0,0}
};
static swig_lua_attribute swig_SafePWM_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_SafePWM_bases[] = {0,0,0};
static const char *swig_SafePWM_base_names[] = {"PWM *","MotorSafety *",0};
static swig_lua_class _wrap_class_SafePWM = { "SafePWM", &SWIGTYPE_p_SafePWM,_wrap_new_SafePWM, swig_delete_SafePWM, swig_SafePWM_methods, swig_SafePWM_attributes, swig_SafePWM_bases, swig_SafePWM_base_names };

static int _wrap_new_ADXL345_I2C__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  ADXL345_I2C::DataFormat_Range arg2 ;
  ADXL345_I2C *result = 0 ;
  
  SWIG_check_num_args("ADXL345_I2C::ADXL345_I2C",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ADXL345_I2C::ADXL345_I2C",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ADXL345_I2C::ADXL345_I2C",2,"ADXL345_I2C::DataFormat_Range");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  arg2 = (ADXL345_I2C::DataFormat_Range)(int)lua_tonumber(L, 2);
  result = (ADXL345_I2C *)new ADXL345_I2C(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ADXL345_I2C,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ADXL345_I2C__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  ADXL345_I2C *result = 0 ;
  
  SWIG_check_num_args("ADXL345_I2C::ADXL345_I2C",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ADXL345_I2C::ADXL345_I2C",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (ADXL345_I2C *)new ADXL345_I2C(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ADXL345_I2C,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ADXL345_I2C(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ADXL345_I2C__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ADXL345_I2C__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ADXL345_I2C'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ADXL345_I2C::ADXL345_I2C(UINT32,ADXL345_I2C::DataFormat_Range)\n"
    "    ADXL345_I2C::ADXL345_I2C(UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_ADXL345_I2C_GetAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  ADXL345_I2C *arg1 = (ADXL345_I2C *) 0 ;
  ADXL345_I2C::Axes arg2 ;
  double result;
  
  SWIG_check_num_args("ADXL345_I2C::GetAcceleration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ADXL345_I2C::GetAcceleration",1,"ADXL345_I2C *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ADXL345_I2C::GetAcceleration",2,"ADXL345_I2C::Axes");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ADXL345_I2C,0))){
    SWIG_fail_ptr("ADXL345_I2C_GetAcceleration",1,SWIGTYPE_p_ADXL345_I2C);
  }
  
  arg2 = (ADXL345_I2C::Axes)(int)lua_tonumber(L, 2);
  result = (double)(arg1)->GetAcceleration(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ADXL345_I2C(void *obj) {
ADXL345_I2C *arg1 = (ADXL345_I2C *) obj;
delete arg1;
}
static swig_lua_method swig_ADXL345_I2C_methods[] = {
    {"GetAcceleration", _wrap_ADXL345_I2C_GetAcceleration}, 
    {0,0}
};
static swig_lua_attribute swig_ADXL345_I2C_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ADXL345_I2C_bases[] = {0,0};
static const char *swig_ADXL345_I2C_base_names[] = {"SensorBase *",0};
static swig_lua_class _wrap_class_ADXL345_I2C = { "ADXL345_I2C", &SWIGTYPE_p_ADXL345_I2C,_wrap_new_ADXL345_I2C, swig_delete_ADXL345_I2C, swig_ADXL345_I2C_methods, swig_ADXL345_I2C_attributes, swig_ADXL345_I2C_bases, swig_ADXL345_I2C_base_names };

static int _wrap_new_Accelerometer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  Accelerometer *result = 0 ;
  
  SWIG_check_num_args("Accelerometer::Accelerometer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Accelerometer::Accelerometer",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (Accelerometer *)new Accelerometer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Accelerometer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Accelerometer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  Accelerometer *result = 0 ;
  
  SWIG_check_num_args("Accelerometer::Accelerometer",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Accelerometer::Accelerometer",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Accelerometer::Accelerometer",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (Accelerometer *)new Accelerometer(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Accelerometer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Accelerometer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  Accelerometer *result = 0 ;
  
  SWIG_check_num_args("Accelerometer::Accelerometer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Accelerometer::Accelerometer",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("new_Accelerometer",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (Accelerometer *)new Accelerometer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Accelerometer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Accelerometer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AnalogChannel, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Accelerometer__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Accelerometer__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Accelerometer__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Accelerometer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Accelerometer::Accelerometer(UINT32)\n"
    "    Accelerometer::Accelerometer(UINT32,UINT32)\n"
    "    Accelerometer::Accelerometer(AnalogChannel *)\n");
  lua_error(L);return 0;
}


static int _wrap_Accelerometer_GetAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  Accelerometer *arg1 = (Accelerometer *) 0 ;
  float result;
  
  SWIG_check_num_args("Accelerometer::GetAcceleration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Accelerometer::GetAcceleration",1,"Accelerometer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Accelerometer,0))){
    SWIG_fail_ptr("Accelerometer_GetAcceleration",1,SWIGTYPE_p_Accelerometer);
  }
  
  result = (float)(arg1)->GetAcceleration();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accelerometer_SetSensitivity(lua_State* L) {
  int SWIG_arg = 0;
  Accelerometer *arg1 = (Accelerometer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Accelerometer::SetSensitivity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Accelerometer::SetSensitivity",1,"Accelerometer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Accelerometer::SetSensitivity",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Accelerometer,0))){
    SWIG_fail_ptr("Accelerometer_SetSensitivity",1,SWIGTYPE_p_Accelerometer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetSensitivity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accelerometer_SetZero(lua_State* L) {
  int SWIG_arg = 0;
  Accelerometer *arg1 = (Accelerometer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Accelerometer::SetZero",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Accelerometer::SetZero",1,"Accelerometer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Accelerometer::SetZero",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Accelerometer,0))){
    SWIG_fail_ptr("Accelerometer_SetZero",1,SWIGTYPE_p_Accelerometer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetZero(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accelerometer_PIDGet(lua_State* L) {
  int SWIG_arg = 0;
  Accelerometer *arg1 = (Accelerometer *) 0 ;
  double result;
  
  SWIG_check_num_args("Accelerometer::PIDGet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Accelerometer::PIDGet",1,"Accelerometer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Accelerometer,0))){
    SWIG_fail_ptr("Accelerometer_PIDGet",1,SWIGTYPE_p_Accelerometer);
  }
  
  result = (double)(arg1)->PIDGet();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Accelerometer(void *obj) {
Accelerometer *arg1 = (Accelerometer *) obj;
delete arg1;
}
static swig_lua_method swig_Accelerometer_methods[] = {
    {"GetAcceleration", _wrap_Accelerometer_GetAcceleration}, 
    {"SetSensitivity", _wrap_Accelerometer_SetSensitivity}, 
    {"SetZero", _wrap_Accelerometer_SetZero}, 
    {"PIDGet", _wrap_Accelerometer_PIDGet}, 
    {0,0}
};
static swig_lua_attribute swig_Accelerometer_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Accelerometer_bases[] = {0,0,0};
static const char *swig_Accelerometer_base_names[] = {"SensorBase *","PIDSource *",0};
static swig_lua_class _wrap_class_Accelerometer = { "Accelerometer", &SWIGTYPE_p_Accelerometer,_wrap_new_Accelerometer, swig_delete_Accelerometer, swig_Accelerometer_methods, swig_Accelerometer_attributes, swig_Accelerometer_bases, swig_Accelerometer_base_names };

static int _wrap_AnalogChannel_kAccumulatorChannels_get(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 *result = 0 ;
  
  SWIG_check_num_args("AnalogChannel::kAccumulatorChannels",0,0)
  result = (UINT32 *)(UINT32 *)AnalogChannel::kAccumulatorChannels;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AnalogChannel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  AnalogChannel *result = 0 ;
  
  SWIG_check_num_args("AnalogChannel::AnalogChannel",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AnalogChannel::AnalogChannel",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogChannel::AnalogChannel",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (AnalogChannel *)new AnalogChannel(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AnalogChannel,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AnalogChannel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  AnalogChannel *result = 0 ;
  
  SWIG_check_num_args("AnalogChannel::AnalogChannel",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AnalogChannel::AnalogChannel",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (AnalogChannel *)new AnalogChannel(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AnalogChannel,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AnalogChannel(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_AnalogChannel__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_AnalogChannel__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_AnalogChannel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AnalogChannel::AnalogChannel(UINT32,UINT32)\n"
    "    AnalogChannel::AnalogChannel(UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_AnalogChannel_GetModule(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  AnalogModule *result = 0 ;
  
  SWIG_check_num_args("AnalogChannel::GetModule",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::GetModule",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_GetModule",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (AnalogModule *)(arg1)->GetModule();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AnalogModule,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_GetValue(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  INT16 result;
  
  SWIG_check_num_args("AnalogChannel::GetValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::GetValue",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_GetValue",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (INT16)(arg1)->GetValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_GetAverageValue(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  INT32 result;
  
  SWIG_check_num_args("AnalogChannel::GetAverageValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::GetAverageValue",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_GetAverageValue",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (INT32)(arg1)->GetAverageValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_GetVoltage(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  float result;
  
  SWIG_check_num_args("AnalogChannel::GetVoltage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::GetVoltage",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_GetVoltage",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (float)(arg1)->GetVoltage();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_GetAverageVoltage(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  float result;
  
  SWIG_check_num_args("AnalogChannel::GetAverageVoltage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::GetAverageVoltage",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_GetAverageVoltage",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (float)(arg1)->GetAverageVoltage();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_GetModuleNumber(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  UINT8 result;
  
  SWIG_check_num_args("AnalogChannel::GetModuleNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::GetModuleNumber",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_GetModuleNumber",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (UINT8)(arg1)->GetModuleNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_GetChannel(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("AnalogChannel::GetChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::GetChannel",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_GetChannel",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (UINT32)(arg1)->GetChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_SetAverageBits(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  UINT32 arg2 ;
  
  SWIG_check_num_args("AnalogChannel::SetAverageBits",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::SetAverageBits",1,"AnalogChannel *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogChannel::SetAverageBits",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_SetAverageBits",1,SWIGTYPE_p_AnalogChannel);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  (arg1)->SetAverageBits(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_GetAverageBits(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("AnalogChannel::GetAverageBits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::GetAverageBits",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_GetAverageBits",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (UINT32)(arg1)->GetAverageBits();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_SetOversampleBits(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  UINT32 arg2 ;
  
  SWIG_check_num_args("AnalogChannel::SetOversampleBits",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::SetOversampleBits",1,"AnalogChannel *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogChannel::SetOversampleBits",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_SetOversampleBits",1,SWIGTYPE_p_AnalogChannel);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  (arg1)->SetOversampleBits(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_GetOversampleBits(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("AnalogChannel::GetOversampleBits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::GetOversampleBits",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_GetOversampleBits",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (UINT32)(arg1)->GetOversampleBits();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_GetLSBWeight(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("AnalogChannel::GetLSBWeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::GetLSBWeight",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_GetLSBWeight",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (UINT32)(arg1)->GetLSBWeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_GetOffset(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  INT32 result;
  
  SWIG_check_num_args("AnalogChannel::GetOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::GetOffset",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_GetOffset",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (INT32)(arg1)->GetOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_IsAccumulatorChannel(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  bool result;
  
  SWIG_check_num_args("AnalogChannel::IsAccumulatorChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::IsAccumulatorChannel",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_IsAccumulatorChannel",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (bool)(arg1)->IsAccumulatorChannel();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_InitAccumulator(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  
  SWIG_check_num_args("AnalogChannel::InitAccumulator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::InitAccumulator",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_InitAccumulator",1,SWIGTYPE_p_AnalogChannel);
  }
  
  (arg1)->InitAccumulator();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_SetAccumulatorInitialValue(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  INT64 arg2 ;
  
  SWIG_check_num_args("AnalogChannel::SetAccumulatorInitialValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::SetAccumulatorInitialValue",1,"AnalogChannel *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogChannel::SetAccumulatorInitialValue",2,"INT64");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_SetAccumulatorInitialValue",1,SWIGTYPE_p_AnalogChannel);
  }
  
  arg2 = (INT64)lua_tonumber(L, 2);
  (arg1)->SetAccumulatorInitialValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_ResetAccumulator(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  
  SWIG_check_num_args("AnalogChannel::ResetAccumulator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::ResetAccumulator",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_ResetAccumulator",1,SWIGTYPE_p_AnalogChannel);
  }
  
  (arg1)->ResetAccumulator();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_SetAccumulatorCenter(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  INT32 arg2 ;
  
  SWIG_check_num_args("AnalogChannel::SetAccumulatorCenter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::SetAccumulatorCenter",1,"AnalogChannel *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogChannel::SetAccumulatorCenter",2,"INT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_SetAccumulatorCenter",1,SWIGTYPE_p_AnalogChannel);
  }
  
  arg2 = (INT32)lua_tonumber(L, 2);
  (arg1)->SetAccumulatorCenter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_SetAccumulatorDeadband(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  INT32 arg2 ;
  
  SWIG_check_num_args("AnalogChannel::SetAccumulatorDeadband",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::SetAccumulatorDeadband",1,"AnalogChannel *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogChannel::SetAccumulatorDeadband",2,"INT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_SetAccumulatorDeadband",1,SWIGTYPE_p_AnalogChannel);
  }
  
  arg2 = (INT32)lua_tonumber(L, 2);
  (arg1)->SetAccumulatorDeadband(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_GetAccumulatorValue(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  INT64 result;
  
  SWIG_check_num_args("AnalogChannel::GetAccumulatorValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::GetAccumulatorValue",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_GetAccumulatorValue",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (INT64)(arg1)->GetAccumulatorValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_GetAccumulatorCount(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("AnalogChannel::GetAccumulatorCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::GetAccumulatorCount",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_GetAccumulatorCount",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (UINT32)(arg1)->GetAccumulatorCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_GetAccumulatorOutput(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  INT64 *arg2 = (INT64 *) 0 ;
  UINT32 *arg3 = (UINT32 *) 0 ;
  
  SWIG_check_num_args("AnalogChannel::GetAccumulatorOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::GetAccumulatorOutput",1,"AnalogChannel *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AnalogChannel::GetAccumulatorOutput",2,"INT64 *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("AnalogChannel::GetAccumulatorOutput",3,"UINT32 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_GetAccumulatorOutput",1,SWIGTYPE_p_AnalogChannel);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("AnalogChannel_GetAccumulatorOutput",2,SWIGTYPE_p_long_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("AnalogChannel_GetAccumulatorOutput",3,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->GetAccumulatorOutput(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogChannel_PIDGet(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  double result;
  
  SWIG_check_num_args("AnalogChannel::PIDGet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogChannel::PIDGet",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("AnalogChannel_PIDGet",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (double)(arg1)->PIDGet();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AnalogChannel(void *obj) {
AnalogChannel *arg1 = (AnalogChannel *) obj;
delete arg1;
}
static swig_lua_method swig_AnalogChannel_methods[] = {
    {"GetModule", _wrap_AnalogChannel_GetModule}, 
    {"GetValue", _wrap_AnalogChannel_GetValue}, 
    {"GetAverageValue", _wrap_AnalogChannel_GetAverageValue}, 
    {"GetVoltage", _wrap_AnalogChannel_GetVoltage}, 
    {"GetAverageVoltage", _wrap_AnalogChannel_GetAverageVoltage}, 
    {"GetModuleNumber", _wrap_AnalogChannel_GetModuleNumber}, 
    {"GetChannel", _wrap_AnalogChannel_GetChannel}, 
    {"SetAverageBits", _wrap_AnalogChannel_SetAverageBits}, 
    {"GetAverageBits", _wrap_AnalogChannel_GetAverageBits}, 
    {"SetOversampleBits", _wrap_AnalogChannel_SetOversampleBits}, 
    {"GetOversampleBits", _wrap_AnalogChannel_GetOversampleBits}, 
    {"GetLSBWeight", _wrap_AnalogChannel_GetLSBWeight}, 
    {"GetOffset", _wrap_AnalogChannel_GetOffset}, 
    {"IsAccumulatorChannel", _wrap_AnalogChannel_IsAccumulatorChannel}, 
    {"InitAccumulator", _wrap_AnalogChannel_InitAccumulator}, 
    {"SetAccumulatorInitialValue", _wrap_AnalogChannel_SetAccumulatorInitialValue}, 
    {"ResetAccumulator", _wrap_AnalogChannel_ResetAccumulator}, 
    {"SetAccumulatorCenter", _wrap_AnalogChannel_SetAccumulatorCenter}, 
    {"SetAccumulatorDeadband", _wrap_AnalogChannel_SetAccumulatorDeadband}, 
    {"GetAccumulatorValue", _wrap_AnalogChannel_GetAccumulatorValue}, 
    {"GetAccumulatorCount", _wrap_AnalogChannel_GetAccumulatorCount}, 
    {"GetAccumulatorOutput", _wrap_AnalogChannel_GetAccumulatorOutput}, 
    {"PIDGet", _wrap_AnalogChannel_PIDGet}, 
    {0,0}
};
static swig_lua_attribute swig_AnalogChannel_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_AnalogChannel_bases[] = {0,0,0};
static const char *swig_AnalogChannel_base_names[] = {"SensorBase *","PIDSource *",0};
static swig_lua_class _wrap_class_AnalogChannel = { "AnalogChannel", &SWIGTYPE_p_AnalogChannel,_wrap_new_AnalogChannel, swig_delete_AnalogChannel, swig_AnalogChannel_methods, swig_AnalogChannel_attributes, swig_AnalogChannel_bases, swig_AnalogChannel_base_names };

static int _wrap_AnalogModule_SetSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  AnalogModule *arg1 = (AnalogModule *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("AnalogModule::SetSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogModule::SetSampleRate",1,"AnalogModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogModule::SetSampleRate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogModule,0))){
    SWIG_fail_ptr("AnalogModule_SetSampleRate",1,SWIGTYPE_p_AnalogModule);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetSampleRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogModule_GetSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  AnalogModule *arg1 = (AnalogModule *) 0 ;
  float result;
  
  SWIG_check_num_args("AnalogModule::GetSampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogModule::GetSampleRate",1,"AnalogModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogModule,0))){
    SWIG_fail_ptr("AnalogModule_GetSampleRate",1,SWIGTYPE_p_AnalogModule);
  }
  
  result = (float)(arg1)->GetSampleRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogModule_SetAverageBits(lua_State* L) {
  int SWIG_arg = 0;
  AnalogModule *arg1 = (AnalogModule *) 0 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  
  SWIG_check_num_args("AnalogModule::SetAverageBits",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogModule::SetAverageBits",1,"AnalogModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogModule::SetAverageBits",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AnalogModule::SetAverageBits",3,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogModule,0))){
    SWIG_fail_ptr("AnalogModule_SetAverageBits",1,SWIGTYPE_p_AnalogModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  (arg1)->SetAverageBits(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogModule_GetAverageBits(lua_State* L) {
  int SWIG_arg = 0;
  AnalogModule *arg1 = (AnalogModule *) 0 ;
  UINT32 arg2 ;
  UINT32 result;
  
  SWIG_check_num_args("AnalogModule::GetAverageBits",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogModule::GetAverageBits",1,"AnalogModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogModule::GetAverageBits",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogModule,0))){
    SWIG_fail_ptr("AnalogModule_GetAverageBits",1,SWIGTYPE_p_AnalogModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (UINT32)(arg1)->GetAverageBits(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogModule_SetOversampleBits(lua_State* L) {
  int SWIG_arg = 0;
  AnalogModule *arg1 = (AnalogModule *) 0 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  
  SWIG_check_num_args("AnalogModule::SetOversampleBits",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogModule::SetOversampleBits",1,"AnalogModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogModule::SetOversampleBits",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AnalogModule::SetOversampleBits",3,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogModule,0))){
    SWIG_fail_ptr("AnalogModule_SetOversampleBits",1,SWIGTYPE_p_AnalogModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  (arg1)->SetOversampleBits(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogModule_GetOversampleBits(lua_State* L) {
  int SWIG_arg = 0;
  AnalogModule *arg1 = (AnalogModule *) 0 ;
  UINT32 arg2 ;
  UINT32 result;
  
  SWIG_check_num_args("AnalogModule::GetOversampleBits",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogModule::GetOversampleBits",1,"AnalogModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogModule::GetOversampleBits",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogModule,0))){
    SWIG_fail_ptr("AnalogModule_GetOversampleBits",1,SWIGTYPE_p_AnalogModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (UINT32)(arg1)->GetOversampleBits(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogModule_GetValue(lua_State* L) {
  int SWIG_arg = 0;
  AnalogModule *arg1 = (AnalogModule *) 0 ;
  UINT32 arg2 ;
  INT16 result;
  
  SWIG_check_num_args("AnalogModule::GetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogModule::GetValue",1,"AnalogModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogModule::GetValue",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogModule,0))){
    SWIG_fail_ptr("AnalogModule_GetValue",1,SWIGTYPE_p_AnalogModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (INT16)(arg1)->GetValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogModule_GetAverageValue(lua_State* L) {
  int SWIG_arg = 0;
  AnalogModule *arg1 = (AnalogModule *) 0 ;
  UINT32 arg2 ;
  INT32 result;
  
  SWIG_check_num_args("AnalogModule::GetAverageValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogModule::GetAverageValue",1,"AnalogModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogModule::GetAverageValue",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogModule,0))){
    SWIG_fail_ptr("AnalogModule_GetAverageValue",1,SWIGTYPE_p_AnalogModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (INT32)(arg1)->GetAverageValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogModule_GetAverageVoltage(lua_State* L) {
  int SWIG_arg = 0;
  AnalogModule *arg1 = (AnalogModule *) 0 ;
  UINT32 arg2 ;
  float result;
  
  SWIG_check_num_args("AnalogModule::GetAverageVoltage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogModule::GetAverageVoltage",1,"AnalogModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogModule::GetAverageVoltage",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogModule,0))){
    SWIG_fail_ptr("AnalogModule_GetAverageVoltage",1,SWIGTYPE_p_AnalogModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (float)(arg1)->GetAverageVoltage(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogModule_GetVoltage(lua_State* L) {
  int SWIG_arg = 0;
  AnalogModule *arg1 = (AnalogModule *) 0 ;
  UINT32 arg2 ;
  float result;
  
  SWIG_check_num_args("AnalogModule::GetVoltage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogModule::GetVoltage",1,"AnalogModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogModule::GetVoltage",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogModule,0))){
    SWIG_fail_ptr("AnalogModule_GetVoltage",1,SWIGTYPE_p_AnalogModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (float)(arg1)->GetVoltage(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogModule_GetLSBWeight(lua_State* L) {
  int SWIG_arg = 0;
  AnalogModule *arg1 = (AnalogModule *) 0 ;
  UINT32 arg2 ;
  UINT32 result;
  
  SWIG_check_num_args("AnalogModule::GetLSBWeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogModule::GetLSBWeight",1,"AnalogModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogModule::GetLSBWeight",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogModule,0))){
    SWIG_fail_ptr("AnalogModule_GetLSBWeight",1,SWIGTYPE_p_AnalogModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (UINT32)(arg1)->GetLSBWeight(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogModule_GetOffset(lua_State* L) {
  int SWIG_arg = 0;
  AnalogModule *arg1 = (AnalogModule *) 0 ;
  UINT32 arg2 ;
  INT32 result;
  
  SWIG_check_num_args("AnalogModule::GetOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogModule::GetOffset",1,"AnalogModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogModule::GetOffset",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogModule,0))){
    SWIG_fail_ptr("AnalogModule_GetOffset",1,SWIGTYPE_p_AnalogModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (INT32)(arg1)->GetOffset(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogModule_VoltsToValue(lua_State* L) {
  int SWIG_arg = 0;
  AnalogModule *arg1 = (AnalogModule *) 0 ;
  INT32 arg2 ;
  float arg3 ;
  INT32 result;
  
  SWIG_check_num_args("AnalogModule::VoltsToValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogModule::VoltsToValue",1,"AnalogModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogModule::VoltsToValue",2,"INT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AnalogModule::VoltsToValue",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogModule,0))){
    SWIG_fail_ptr("AnalogModule_VoltsToValue",1,SWIGTYPE_p_AnalogModule);
  }
  
  arg2 = (INT32)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (INT32)(arg1)->VoltsToValue(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogModule_GetInstance(lua_State* L) {
  int SWIG_arg = 0;
  UINT8 arg1 ;
  AnalogModule *result = 0 ;
  
  SWIG_check_num_args("AnalogModule::GetInstance",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AnalogModule::GetInstance",1,"UINT8");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT8)lua_tonumber(L, 1);
  result = (AnalogModule *)AnalogModule::GetInstance(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AnalogModule,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_AnalogModule_methods[] = {
    {"SetSampleRate", _wrap_AnalogModule_SetSampleRate}, 
    {"GetSampleRate", _wrap_AnalogModule_GetSampleRate}, 
    {"SetAverageBits", _wrap_AnalogModule_SetAverageBits}, 
    {"GetAverageBits", _wrap_AnalogModule_GetAverageBits}, 
    {"SetOversampleBits", _wrap_AnalogModule_SetOversampleBits}, 
    {"GetOversampleBits", _wrap_AnalogModule_GetOversampleBits}, 
    {"GetValue", _wrap_AnalogModule_GetValue}, 
    {"GetAverageValue", _wrap_AnalogModule_GetAverageValue}, 
    {"GetAverageVoltage", _wrap_AnalogModule_GetAverageVoltage}, 
    {"GetVoltage", _wrap_AnalogModule_GetVoltage}, 
    {"GetLSBWeight", _wrap_AnalogModule_GetLSBWeight}, 
    {"GetOffset", _wrap_AnalogModule_GetOffset}, 
    {"VoltsToValue", _wrap_AnalogModule_VoltsToValue}, 
    {0,0}
};
static swig_lua_attribute swig_AnalogModule_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_AnalogModule_bases[] = {0,0};
static const char *swig_AnalogModule_base_names[] = {"Module *",0};
static swig_lua_class _wrap_class_AnalogModule = { "AnalogModule", &SWIGTYPE_p_AnalogModule,0,0, swig_AnalogModule_methods, swig_AnalogModule_attributes, swig_AnalogModule_bases, swig_AnalogModule_base_names };

static int _wrap_new_AnalogTrigger__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  AnalogTrigger *result = 0 ;
  
  SWIG_check_num_args("AnalogTrigger::AnalogTrigger",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AnalogTrigger::AnalogTrigger",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogTrigger::AnalogTrigger",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (AnalogTrigger *)new AnalogTrigger(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AnalogTrigger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AnalogTrigger__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  AnalogTrigger *result = 0 ;
  
  SWIG_check_num_args("AnalogTrigger::AnalogTrigger",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AnalogTrigger::AnalogTrigger",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (AnalogTrigger *)new AnalogTrigger(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AnalogTrigger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AnalogTrigger__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  AnalogTrigger *result = 0 ;
  
  SWIG_check_num_args("AnalogTrigger::AnalogTrigger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogTrigger::AnalogTrigger",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("new_AnalogTrigger",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (AnalogTrigger *)new AnalogTrigger(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AnalogTrigger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AnalogTrigger(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AnalogChannel, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AnalogTrigger__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_AnalogTrigger__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_AnalogTrigger__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_AnalogTrigger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AnalogTrigger::AnalogTrigger(UINT32,UINT32)\n"
    "    AnalogTrigger::AnalogTrigger(UINT32)\n"
    "    AnalogTrigger::AnalogTrigger(AnalogChannel *)\n");
  lua_error(L);return 0;
}


static int _wrap_AnalogTrigger_SetLimitsVoltage(lua_State* L) {
  int SWIG_arg = 0;
  AnalogTrigger *arg1 = (AnalogTrigger *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("AnalogTrigger::SetLimitsVoltage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogTrigger::SetLimitsVoltage",1,"AnalogTrigger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogTrigger::SetLimitsVoltage",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AnalogTrigger::SetLimitsVoltage",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogTrigger,0))){
    SWIG_fail_ptr("AnalogTrigger_SetLimitsVoltage",1,SWIGTYPE_p_AnalogTrigger);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->SetLimitsVoltage(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogTrigger_SetLimitsRaw(lua_State* L) {
  int SWIG_arg = 0;
  AnalogTrigger *arg1 = (AnalogTrigger *) 0 ;
  INT32 arg2 ;
  INT32 arg3 ;
  
  SWIG_check_num_args("AnalogTrigger::SetLimitsRaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogTrigger::SetLimitsRaw",1,"AnalogTrigger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogTrigger::SetLimitsRaw",2,"INT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AnalogTrigger::SetLimitsRaw",3,"INT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogTrigger,0))){
    SWIG_fail_ptr("AnalogTrigger_SetLimitsRaw",1,SWIGTYPE_p_AnalogTrigger);
  }
  
  arg2 = (INT32)lua_tonumber(L, 2);
  arg3 = (INT32)lua_tonumber(L, 3);
  (arg1)->SetLimitsRaw(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogTrigger_SetAveraged(lua_State* L) {
  int SWIG_arg = 0;
  AnalogTrigger *arg1 = (AnalogTrigger *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("AnalogTrigger::SetAveraged",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogTrigger::SetAveraged",1,"AnalogTrigger *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("AnalogTrigger::SetAveraged",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogTrigger,0))){
    SWIG_fail_ptr("AnalogTrigger_SetAveraged",1,SWIGTYPE_p_AnalogTrigger);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetAveraged(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogTrigger_SetFiltered(lua_State* L) {
  int SWIG_arg = 0;
  AnalogTrigger *arg1 = (AnalogTrigger *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("AnalogTrigger::SetFiltered",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogTrigger::SetFiltered",1,"AnalogTrigger *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("AnalogTrigger::SetFiltered",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogTrigger,0))){
    SWIG_fail_ptr("AnalogTrigger_SetFiltered",1,SWIGTYPE_p_AnalogTrigger);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetFiltered(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogTrigger_GetIndex(lua_State* L) {
  int SWIG_arg = 0;
  AnalogTrigger *arg1 = (AnalogTrigger *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("AnalogTrigger::GetIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogTrigger::GetIndex",1,"AnalogTrigger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogTrigger,0))){
    SWIG_fail_ptr("AnalogTrigger_GetIndex",1,SWIGTYPE_p_AnalogTrigger);
  }
  
  result = (UINT32)(arg1)->GetIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogTrigger_GetInWindow(lua_State* L) {
  int SWIG_arg = 0;
  AnalogTrigger *arg1 = (AnalogTrigger *) 0 ;
  bool result;
  
  SWIG_check_num_args("AnalogTrigger::GetInWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogTrigger::GetInWindow",1,"AnalogTrigger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogTrigger,0))){
    SWIG_fail_ptr("AnalogTrigger_GetInWindow",1,SWIGTYPE_p_AnalogTrigger);
  }
  
  result = (bool)(arg1)->GetInWindow();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogTrigger_GetTriggerState(lua_State* L) {
  int SWIG_arg = 0;
  AnalogTrigger *arg1 = (AnalogTrigger *) 0 ;
  bool result;
  
  SWIG_check_num_args("AnalogTrigger::GetTriggerState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogTrigger::GetTriggerState",1,"AnalogTrigger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogTrigger,0))){
    SWIG_fail_ptr("AnalogTrigger_GetTriggerState",1,SWIGTYPE_p_AnalogTrigger);
  }
  
  result = (bool)(arg1)->GetTriggerState();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogTrigger_CreateOutput(lua_State* L) {
  int SWIG_arg = 0;
  AnalogTrigger *arg1 = (AnalogTrigger *) 0 ;
  AnalogTriggerOutput::Type arg2 ;
  AnalogTriggerOutput *result = 0 ;
  
  SWIG_check_num_args("AnalogTrigger::CreateOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogTrigger::CreateOutput",1,"AnalogTrigger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnalogTrigger::CreateOutput",2,"AnalogTriggerOutput::Type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogTrigger,0))){
    SWIG_fail_ptr("AnalogTrigger_CreateOutput",1,SWIGTYPE_p_AnalogTrigger);
  }
  
  arg2 = (AnalogTriggerOutput::Type)(int)lua_tonumber(L, 2);
  result = (AnalogTriggerOutput *)(arg1)->CreateOutput(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AnalogTriggerOutput,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AnalogTrigger(void *obj) {
AnalogTrigger *arg1 = (AnalogTrigger *) obj;
delete arg1;
}
static swig_lua_method swig_AnalogTrigger_methods[] = {
    {"SetLimitsVoltage", _wrap_AnalogTrigger_SetLimitsVoltage}, 
    {"SetLimitsRaw", _wrap_AnalogTrigger_SetLimitsRaw}, 
    {"SetAveraged", _wrap_AnalogTrigger_SetAveraged}, 
    {"SetFiltered", _wrap_AnalogTrigger_SetFiltered}, 
    {"GetIndex", _wrap_AnalogTrigger_GetIndex}, 
    {"GetInWindow", _wrap_AnalogTrigger_GetInWindow}, 
    {"GetTriggerState", _wrap_AnalogTrigger_GetTriggerState}, 
    {"CreateOutput", _wrap_AnalogTrigger_CreateOutput}, 
    {0,0}
};
static swig_lua_attribute swig_AnalogTrigger_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_AnalogTrigger_bases[] = {0,0};
static const char *swig_AnalogTrigger_base_names[] = {"SensorBase *",0};
static swig_lua_class _wrap_class_AnalogTrigger = { "AnalogTrigger", &SWIGTYPE_p_AnalogTrigger,_wrap_new_AnalogTrigger, swig_delete_AnalogTrigger, swig_AnalogTrigger_methods, swig_AnalogTrigger_attributes, swig_AnalogTrigger_bases, swig_AnalogTrigger_base_names };

static int _wrap_AnalogTriggerOutput_Get(lua_State* L) {
  int SWIG_arg = 0;
  AnalogTriggerOutput *arg1 = (AnalogTriggerOutput *) 0 ;
  bool result;
  
  SWIG_check_num_args("AnalogTriggerOutput::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogTriggerOutput::Get",1,"AnalogTriggerOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogTriggerOutput,0))){
    SWIG_fail_ptr("AnalogTriggerOutput_Get",1,SWIGTYPE_p_AnalogTriggerOutput);
  }
  
  result = (bool)(arg1)->Get();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogTriggerOutput_GetChannelForRouting(lua_State* L) {
  int SWIG_arg = 0;
  AnalogTriggerOutput *arg1 = (AnalogTriggerOutput *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("AnalogTriggerOutput::GetChannelForRouting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogTriggerOutput::GetChannelForRouting",1,"AnalogTriggerOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogTriggerOutput,0))){
    SWIG_fail_ptr("AnalogTriggerOutput_GetChannelForRouting",1,SWIGTYPE_p_AnalogTriggerOutput);
  }
  
  result = (UINT32)(arg1)->GetChannelForRouting();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogTriggerOutput_GetModuleForRouting(lua_State* L) {
  int SWIG_arg = 0;
  AnalogTriggerOutput *arg1 = (AnalogTriggerOutput *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("AnalogTriggerOutput::GetModuleForRouting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogTriggerOutput::GetModuleForRouting",1,"AnalogTriggerOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogTriggerOutput,0))){
    SWIG_fail_ptr("AnalogTriggerOutput_GetModuleForRouting",1,SWIGTYPE_p_AnalogTriggerOutput);
  }
  
  result = (UINT32)(arg1)->GetModuleForRouting();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogTriggerOutput_GetAnalogTriggerForRouting(lua_State* L) {
  int SWIG_arg = 0;
  AnalogTriggerOutput *arg1 = (AnalogTriggerOutput *) 0 ;
  bool result;
  
  SWIG_check_num_args("AnalogTriggerOutput::GetAnalogTriggerForRouting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogTriggerOutput::GetAnalogTriggerForRouting",1,"AnalogTriggerOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogTriggerOutput,0))){
    SWIG_fail_ptr("AnalogTriggerOutput_GetAnalogTriggerForRouting",1,SWIGTYPE_p_AnalogTriggerOutput);
  }
  
  result = (bool)(arg1)->GetAnalogTriggerForRouting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogTriggerOutput_RequestInterrupts(lua_State* L) {
  int SWIG_arg = 0;
  AnalogTriggerOutput *arg1 = (AnalogTriggerOutput *) 0 ;
  
  SWIG_check_num_args("AnalogTriggerOutput::RequestInterrupts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnalogTriggerOutput::RequestInterrupts",1,"AnalogTriggerOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogTriggerOutput,0))){
    SWIG_fail_ptr("AnalogTriggerOutput_RequestInterrupts",1,SWIGTYPE_p_AnalogTriggerOutput);
  }
  
  (arg1)->RequestInterrupts();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AnalogTriggerOutput(void *obj) {
AnalogTriggerOutput *arg1 = (AnalogTriggerOutput *) obj;
delete arg1;
}
static swig_lua_method swig_AnalogTriggerOutput_methods[] = {
    {"Get", _wrap_AnalogTriggerOutput_Get}, 
    {"GetChannelForRouting", _wrap_AnalogTriggerOutput_GetChannelForRouting}, 
    {"GetModuleForRouting", _wrap_AnalogTriggerOutput_GetModuleForRouting}, 
    {"GetAnalogTriggerForRouting", _wrap_AnalogTriggerOutput_GetAnalogTriggerForRouting}, 
    {"RequestInterrupts", _wrap_AnalogTriggerOutput_RequestInterrupts}, 
    {0,0}
};
static swig_lua_attribute swig_AnalogTriggerOutput_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_AnalogTriggerOutput_bases[] = {0,0};
static const char *swig_AnalogTriggerOutput_base_names[] = {"DigitalSource *",0};
static swig_lua_class _wrap_class_AnalogTriggerOutput = { "AnalogTriggerOutput", &SWIGTYPE_p_AnalogTriggerOutput,0, swig_delete_AnalogTriggerOutput, swig_AnalogTriggerOutput_methods, swig_AnalogTriggerOutput_attributes, swig_AnalogTriggerOutput_bases, swig_AnalogTriggerOutput_base_names };

static int _wrap_new_Compressor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  Compressor *result = 0 ;
  
  SWIG_check_num_args("Compressor::Compressor",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Compressor::Compressor",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Compressor::Compressor",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (Compressor *)new Compressor(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Compressor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Compressor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  UINT32 arg4 ;
  Compressor *result = 0 ;
  
  SWIG_check_num_args("Compressor::Compressor",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Compressor::Compressor",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Compressor::Compressor",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Compressor::Compressor",3,"UINT32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Compressor::Compressor",4,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UINT32)lua_tonumber(L, 4);
  result = (Compressor *)new Compressor(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Compressor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Compressor(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Compressor__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Compressor__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Compressor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Compressor::Compressor(UINT32,UINT32)\n"
    "    Compressor::Compressor(UINT32,UINT32,UINT32,UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_Compressor_Start(lua_State* L) {
  int SWIG_arg = 0;
  Compressor *arg1 = (Compressor *) 0 ;
  
  SWIG_check_num_args("Compressor::Start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Compressor::Start",1,"Compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Compressor,0))){
    SWIG_fail_ptr("Compressor_Start",1,SWIGTYPE_p_Compressor);
  }
  
  (arg1)->Start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_Stop(lua_State* L) {
  int SWIG_arg = 0;
  Compressor *arg1 = (Compressor *) 0 ;
  
  SWIG_check_num_args("Compressor::Stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Compressor::Stop",1,"Compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Compressor,0))){
    SWIG_fail_ptr("Compressor_Stop",1,SWIGTYPE_p_Compressor);
  }
  
  (arg1)->Stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_Enabled(lua_State* L) {
  int SWIG_arg = 0;
  Compressor *arg1 = (Compressor *) 0 ;
  bool result;
  
  SWIG_check_num_args("Compressor::Enabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Compressor::Enabled",1,"Compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Compressor,0))){
    SWIG_fail_ptr("Compressor_Enabled",1,SWIGTYPE_p_Compressor);
  }
  
  result = (bool)(arg1)->Enabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_GetPressureSwitchValue(lua_State* L) {
  int SWIG_arg = 0;
  Compressor *arg1 = (Compressor *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("Compressor::GetPressureSwitchValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Compressor::GetPressureSwitchValue",1,"Compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Compressor,0))){
    SWIG_fail_ptr("Compressor_GetPressureSwitchValue",1,SWIGTYPE_p_Compressor);
  }
  
  result = (UINT32)(arg1)->GetPressureSwitchValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_SetRelayValue(lua_State* L) {
  int SWIG_arg = 0;
  Compressor *arg1 = (Compressor *) 0 ;
  Relay::Value arg2 ;
  
  SWIG_check_num_args("Compressor::SetRelayValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Compressor::SetRelayValue",1,"Compressor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Compressor::SetRelayValue",2,"Relay::Value");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Compressor,0))){
    SWIG_fail_ptr("Compressor_SetRelayValue",1,SWIGTYPE_p_Compressor);
  }
  
  arg2 = (Relay::Value)(int)lua_tonumber(L, 2);
  (arg1)->SetRelayValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Compressor(void *obj) {
Compressor *arg1 = (Compressor *) obj;
delete arg1;
}
static swig_lua_method swig_Compressor_methods[] = {
    {"Start", _wrap_Compressor_Start}, 
    {"Stop", _wrap_Compressor_Stop}, 
    {"Enabled", _wrap_Compressor_Enabled}, 
    {"GetPressureSwitchValue", _wrap_Compressor_GetPressureSwitchValue}, 
    {"SetRelayValue", _wrap_Compressor_SetRelayValue}, 
    {0,0}
};
static swig_lua_attribute swig_Compressor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Compressor_bases[] = {0,0};
static const char *swig_Compressor_base_names[] = {"SensorBase *",0};
static swig_lua_class _wrap_class_Compressor = { "Compressor", &SWIGTYPE_p_Compressor,_wrap_new_Compressor, swig_delete_Compressor, swig_Compressor_methods, swig_Compressor_attributes, swig_Compressor_bases, swig_Compressor_base_names };

static int _wrap_new_Counter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Counter *result = 0 ;
  
  SWIG_check_num_args("Counter::Counter",0,0)
  result = (Counter *)new Counter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Counter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Counter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  Counter *result = 0 ;
  
  SWIG_check_num_args("Counter::Counter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Counter::Counter",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (Counter *)new Counter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Counter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Counter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  Counter *result = 0 ;
  
  SWIG_check_num_args("Counter::Counter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Counter::Counter",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Counter::Counter",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (Counter *)new Counter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Counter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Counter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DigitalSource *arg1 = (DigitalSource *) 0 ;
  Counter *result = 0 ;
  
  SWIG_check_num_args("Counter::Counter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::Counter",1,"DigitalSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("new_Counter",1,SWIGTYPE_p_DigitalSource);
  }
  
  result = (Counter *)new Counter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Counter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Counter__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  AnalogTrigger *arg1 = (AnalogTrigger *) 0 ;
  Counter *result = 0 ;
  
  SWIG_check_num_args("Counter::Counter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::Counter",1,"AnalogTrigger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogTrigger,0))){
    SWIG_fail_ptr("new_Counter",1,SWIGTYPE_p_AnalogTrigger);
  }
  
  result = (Counter *)new Counter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Counter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Counter__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  CounterBase::EncodingType arg1 ;
  DigitalSource *arg2 = (DigitalSource *) 0 ;
  DigitalSource *arg3 = (DigitalSource *) 0 ;
  bool arg4 ;
  Counter *result = 0 ;
  
  SWIG_check_num_args("Counter::Counter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Counter::Counter",1,"CounterBase::EncodingType");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Counter::Counter",2,"DigitalSource *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Counter::Counter",3,"DigitalSource *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Counter::Counter",4,"bool");
  arg1 = (CounterBase::EncodingType)(int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("new_Counter",2,SWIGTYPE_p_DigitalSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("new_Counter",3,SWIGTYPE_p_DigitalSource);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Counter *)new Counter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Counter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Counter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Counter__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalSource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Counter__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AnalogTrigger, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Counter__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Counter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Counter__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DigitalSource, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DigitalSource, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Counter__SWIG_5(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Counter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Counter::Counter()\n"
    "    Counter::Counter(UINT32)\n"
    "    Counter::Counter(UINT32,UINT32)\n"
    "    Counter::Counter(DigitalSource *)\n"
    "    Counter::Counter(AnalogTrigger *)\n"
    "    Counter::Counter(CounterBase::EncodingType,DigitalSource *,DigitalSource *,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_Counter_SetUpSource__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  UINT32 arg2 ;
  
  SWIG_check_num_args("Counter::SetUpSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetUpSource",1,"Counter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Counter::SetUpSource",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetUpSource",1,SWIGTYPE_p_Counter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  (arg1)->SetUpSource(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetUpSource__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  
  SWIG_check_num_args("Counter::SetUpSource",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetUpSource",1,"Counter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Counter::SetUpSource",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Counter::SetUpSource",3,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetUpSource",1,SWIGTYPE_p_Counter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  (arg1)->SetUpSource(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetUpSource__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  AnalogTrigger *arg2 = (AnalogTrigger *) 0 ;
  AnalogTriggerOutput::Type arg3 ;
  
  SWIG_check_num_args("Counter::SetUpSource",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetUpSource",1,"Counter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Counter::SetUpSource",2,"AnalogTrigger *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Counter::SetUpSource",3,"AnalogTriggerOutput::Type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetUpSource",1,SWIGTYPE_p_Counter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AnalogTrigger,0))){
    SWIG_fail_ptr("Counter_SetUpSource",2,SWIGTYPE_p_AnalogTrigger);
  }
  
  arg3 = (AnalogTriggerOutput::Type)(int)lua_tonumber(L, 3);
  (arg1)->SetUpSource(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetUpSource__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  DigitalSource *arg2 = (DigitalSource *) 0 ;
  
  SWIG_check_num_args("Counter::SetUpSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetUpSource",1,"Counter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Counter::SetUpSource",2,"DigitalSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetUpSource",1,SWIGTYPE_p_Counter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("Counter_SetUpSource",2,SWIGTYPE_p_DigitalSource);
  }
  
  (arg1)->SetUpSource(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetUpSource(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Counter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DigitalSource, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Counter_SetUpSource__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Counter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Counter_SetUpSource__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Counter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AnalogTrigger, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Counter_SetUpSource__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Counter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Counter_SetUpSource__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Counter_SetUpSource'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Counter::SetUpSource(UINT32)\n"
    "    Counter::SetUpSource(UINT32,UINT32)\n"
    "    Counter::SetUpSource(AnalogTrigger *,AnalogTriggerOutput::Type)\n"
    "    Counter::SetUpSource(DigitalSource *)\n");
  lua_error(L);return 0;
}


static int _wrap_Counter_SetUpSourceEdge(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("Counter::SetUpSourceEdge",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetUpSourceEdge",1,"Counter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Counter::SetUpSourceEdge",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Counter::SetUpSourceEdge",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetUpSourceEdge",1,SWIGTYPE_p_Counter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->SetUpSourceEdge(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_ClearUpSource(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  
  SWIG_check_num_args("Counter::ClearUpSource",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::ClearUpSource",1,"Counter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_ClearUpSource",1,SWIGTYPE_p_Counter);
  }
  
  (arg1)->ClearUpSource();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetDownSource__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  UINT32 arg2 ;
  
  SWIG_check_num_args("Counter::SetDownSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetDownSource",1,"Counter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Counter::SetDownSource",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetDownSource",1,SWIGTYPE_p_Counter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  (arg1)->SetDownSource(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetDownSource__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  
  SWIG_check_num_args("Counter::SetDownSource",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetDownSource",1,"Counter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Counter::SetDownSource",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Counter::SetDownSource",3,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetDownSource",1,SWIGTYPE_p_Counter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  (arg1)->SetDownSource(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetDownSource__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  AnalogTrigger *arg2 = (AnalogTrigger *) 0 ;
  AnalogTriggerOutput::Type arg3 ;
  
  SWIG_check_num_args("Counter::SetDownSource",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetDownSource",1,"Counter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Counter::SetDownSource",2,"AnalogTrigger *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Counter::SetDownSource",3,"AnalogTriggerOutput::Type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetDownSource",1,SWIGTYPE_p_Counter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AnalogTrigger,0))){
    SWIG_fail_ptr("Counter_SetDownSource",2,SWIGTYPE_p_AnalogTrigger);
  }
  
  arg3 = (AnalogTriggerOutput::Type)(int)lua_tonumber(L, 3);
  (arg1)->SetDownSource(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetDownSource__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  DigitalSource *arg2 = (DigitalSource *) 0 ;
  
  SWIG_check_num_args("Counter::SetDownSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetDownSource",1,"Counter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Counter::SetDownSource",2,"DigitalSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetDownSource",1,SWIGTYPE_p_Counter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("Counter_SetDownSource",2,SWIGTYPE_p_DigitalSource);
  }
  
  (arg1)->SetDownSource(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetDownSource(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Counter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DigitalSource, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Counter_SetDownSource__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Counter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Counter_SetDownSource__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Counter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_AnalogTrigger, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Counter_SetDownSource__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Counter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Counter_SetDownSource__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Counter_SetDownSource'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Counter::SetDownSource(UINT32)\n"
    "    Counter::SetDownSource(UINT32,UINT32)\n"
    "    Counter::SetDownSource(AnalogTrigger *,AnalogTriggerOutput::Type)\n"
    "    Counter::SetDownSource(DigitalSource *)\n");
  lua_error(L);return 0;
}


static int _wrap_Counter_SetDownSourceEdge(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("Counter::SetDownSourceEdge",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetDownSourceEdge",1,"Counter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Counter::SetDownSourceEdge",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Counter::SetDownSourceEdge",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetDownSourceEdge",1,SWIGTYPE_p_Counter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->SetDownSourceEdge(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_ClearDownSource(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  
  SWIG_check_num_args("Counter::ClearDownSource",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::ClearDownSource",1,"Counter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_ClearDownSource",1,SWIGTYPE_p_Counter);
  }
  
  (arg1)->ClearDownSource();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetUpDownCounterMode(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  
  SWIG_check_num_args("Counter::SetUpDownCounterMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetUpDownCounterMode",1,"Counter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetUpDownCounterMode",1,SWIGTYPE_p_Counter);
  }
  
  (arg1)->SetUpDownCounterMode();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetExternalDirectionMode(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  
  SWIG_check_num_args("Counter::SetExternalDirectionMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetExternalDirectionMode",1,"Counter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetExternalDirectionMode",1,SWIGTYPE_p_Counter);
  }
  
  (arg1)->SetExternalDirectionMode();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetSemiPeriodMode(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Counter::SetSemiPeriodMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetSemiPeriodMode",1,"Counter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Counter::SetSemiPeriodMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetSemiPeriodMode",1,SWIGTYPE_p_Counter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetSemiPeriodMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetPulseLengthMode(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Counter::SetPulseLengthMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetPulseLengthMode",1,"Counter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Counter::SetPulseLengthMode",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetPulseLengthMode",1,SWIGTYPE_p_Counter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetPulseLengthMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetReverseDirection(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Counter::SetReverseDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetReverseDirection",1,"Counter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Counter::SetReverseDirection",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetReverseDirection",1,SWIGTYPE_p_Counter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetReverseDirection(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_Start(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  
  SWIG_check_num_args("Counter::Start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::Start",1,"Counter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_Start",1,SWIGTYPE_p_Counter);
  }
  
  (arg1)->Start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_Get(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  INT32 result;
  
  SWIG_check_num_args("Counter::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::Get",1,"Counter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_Get",1,SWIGTYPE_p_Counter);
  }
  
  result = (INT32)(arg1)->Get();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_Reset(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  
  SWIG_check_num_args("Counter::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::Reset",1,"Counter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_Reset",1,SWIGTYPE_p_Counter);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_Stop(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  
  SWIG_check_num_args("Counter::Stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::Stop",1,"Counter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_Stop",1,SWIGTYPE_p_Counter);
  }
  
  (arg1)->Stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_GetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  double result;
  
  SWIG_check_num_args("Counter::GetPeriod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::GetPeriod",1,"Counter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_GetPeriod",1,SWIGTYPE_p_Counter);
  }
  
  result = (double)(arg1)->GetPeriod();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetMaxPeriod(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Counter::SetMaxPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetMaxPeriod",1,"Counter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Counter::SetMaxPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetMaxPeriod",1,SWIGTYPE_p_Counter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->SetMaxPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_SetUpdateWhenEmpty(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Counter::SetUpdateWhenEmpty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::SetUpdateWhenEmpty",1,"Counter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Counter::SetUpdateWhenEmpty",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_SetUpdateWhenEmpty",1,SWIGTYPE_p_Counter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetUpdateWhenEmpty(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_GetStopped(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  bool result;
  
  SWIG_check_num_args("Counter::GetStopped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::GetStopped",1,"Counter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_GetStopped",1,SWIGTYPE_p_Counter);
  }
  
  result = (bool)(arg1)->GetStopped();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Counter_GetDirection(lua_State* L) {
  int SWIG_arg = 0;
  Counter *arg1 = (Counter *) 0 ;
  bool result;
  
  SWIG_check_num_args("Counter::GetDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Counter::GetDirection",1,"Counter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Counter,0))){
    SWIG_fail_ptr("Counter_GetDirection",1,SWIGTYPE_p_Counter);
  }
  
  result = (bool)(arg1)->GetDirection();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Counter(void *obj) {
Counter *arg1 = (Counter *) obj;
delete arg1;
}
static swig_lua_method swig_Counter_methods[] = {
    {"SetUpSource", _wrap_Counter_SetUpSource}, 
    {"SetUpSourceEdge", _wrap_Counter_SetUpSourceEdge}, 
    {"ClearUpSource", _wrap_Counter_ClearUpSource}, 
    {"SetDownSource", _wrap_Counter_SetDownSource}, 
    {"SetDownSourceEdge", _wrap_Counter_SetDownSourceEdge}, 
    {"ClearDownSource", _wrap_Counter_ClearDownSource}, 
    {"SetUpDownCounterMode", _wrap_Counter_SetUpDownCounterMode}, 
    {"SetExternalDirectionMode", _wrap_Counter_SetExternalDirectionMode}, 
    {"SetSemiPeriodMode", _wrap_Counter_SetSemiPeriodMode}, 
    {"SetPulseLengthMode", _wrap_Counter_SetPulseLengthMode}, 
    {"SetReverseDirection", _wrap_Counter_SetReverseDirection}, 
    {"Start", _wrap_Counter_Start}, 
    {"Get", _wrap_Counter_Get}, 
    {"Reset", _wrap_Counter_Reset}, 
    {"Stop", _wrap_Counter_Stop}, 
    {"GetPeriod", _wrap_Counter_GetPeriod}, 
    {"SetMaxPeriod", _wrap_Counter_SetMaxPeriod}, 
    {"SetUpdateWhenEmpty", _wrap_Counter_SetUpdateWhenEmpty}, 
    {"GetStopped", _wrap_Counter_GetStopped}, 
    {"GetDirection", _wrap_Counter_GetDirection}, 
    {0,0}
};
static swig_lua_attribute swig_Counter_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Counter_bases[] = {0,0,0};
static const char *swig_Counter_base_names[] = {"SensorBase *","CounterBase *",0};
static swig_lua_class _wrap_class_Counter = { "Counter", &SWIGTYPE_p_Counter,_wrap_new_Counter, swig_delete_Counter, swig_Counter_methods, swig_Counter_attributes, swig_Counter_bases, swig_Counter_base_names };

static int _wrap_new_Dashboard(lua_State* L) {
  int SWIG_arg = 0;
  SEM_ID arg1 ;
  SEM_ID *argp1 ;
  Dashboard *result = 0 ;
  
  SWIG_check_num_args("Dashboard::Dashboard",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Dashboard::Dashboard",1,"SEM_ID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SEM_ID,0))){
    SWIG_fail_ptr("new_Dashboard",1,SWIGTYPE_p_SEM_ID);
  }
  arg1 = *argp1;
  
  result = (Dashboard *)new Dashboard(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dashboard,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_AddI8(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  INT8 arg2 ;
  
  SWIG_check_num_args("Dashboard::AddI8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::AddI8",1,"Dashboard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dashboard::AddI8",2,"INT8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_AddI8",1,SWIGTYPE_p_Dashboard);
  }
  
  arg2 = (INT8)lua_tonumber(L, 2);
  (arg1)->AddI8(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_AddI16(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  INT16 arg2 ;
  
  SWIG_check_num_args("Dashboard::AddI16",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::AddI16",1,"Dashboard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dashboard::AddI16",2,"INT16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_AddI16",1,SWIGTYPE_p_Dashboard);
  }
  
  arg2 = (INT16)lua_tonumber(L, 2);
  (arg1)->AddI16(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_AddI32(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  INT32 arg2 ;
  
  SWIG_check_num_args("Dashboard::AddI32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::AddI32",1,"Dashboard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dashboard::AddI32",2,"INT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_AddI32",1,SWIGTYPE_p_Dashboard);
  }
  
  arg2 = (INT32)lua_tonumber(L, 2);
  (arg1)->AddI32(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_AddU8(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  UINT8 arg2 ;
  
  SWIG_check_num_args("Dashboard::AddU8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::AddU8",1,"Dashboard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dashboard::AddU8",2,"UINT8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_AddU8",1,SWIGTYPE_p_Dashboard);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT8)lua_tonumber(L, 2);
  (arg1)->AddU8(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_AddU16(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  UINT16 arg2 ;
  
  SWIG_check_num_args("Dashboard::AddU16",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::AddU16",1,"Dashboard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dashboard::AddU16",2,"UINT16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_AddU16",1,SWIGTYPE_p_Dashboard);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT16)lua_tonumber(L, 2);
  (arg1)->AddU16(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_AddU32(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  UINT32 arg2 ;
  
  SWIG_check_num_args("Dashboard::AddU32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::AddU32",1,"Dashboard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dashboard::AddU32",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_AddU32",1,SWIGTYPE_p_Dashboard);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  (arg1)->AddU32(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_AddFloat(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Dashboard::AddFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::AddFloat",1,"Dashboard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dashboard::AddFloat",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_AddFloat",1,SWIGTYPE_p_Dashboard);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->AddFloat(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_AddDouble(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Dashboard::AddDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::AddDouble",1,"Dashboard *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Dashboard::AddDouble",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_AddDouble",1,SWIGTYPE_p_Dashboard);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->AddDouble(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_AddBoolean(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Dashboard::AddBoolean",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::AddBoolean",1,"Dashboard *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Dashboard::AddBoolean",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_AddBoolean",1,SWIGTYPE_p_Dashboard);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->AddBoolean(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_AddString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Dashboard::AddString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::AddString",1,"Dashboard *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Dashboard::AddString",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_AddString",1,SWIGTYPE_p_Dashboard);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->AddString(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_AddString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  char *arg2 = (char *) 0 ;
  INT32 arg3 ;
  
  SWIG_check_num_args("Dashboard::AddString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::AddString",1,"Dashboard *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Dashboard::AddString",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Dashboard::AddString",3,"INT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_AddString",1,SWIGTYPE_p_Dashboard);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (INT32)lua_tonumber(L, 3);
  (arg1)->AddString(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_AddString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dashboard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Dashboard_AddString__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Dashboard, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Dashboard_AddString__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Dashboard_AddString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dashboard::AddString(char *)\n"
    "    Dashboard::AddString(char *,INT32)\n");
  lua_error(L);return 0;
}


static int _wrap_Dashboard_AddArray(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  
  SWIG_check_num_args("Dashboard::AddArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::AddArray",1,"Dashboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_AddArray",1,SWIGTYPE_p_Dashboard);
  }
  
  (arg1)->AddArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_FinalizeArray(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  
  SWIG_check_num_args("Dashboard::FinalizeArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::FinalizeArray",1,"Dashboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_FinalizeArray",1,SWIGTYPE_p_Dashboard);
  }
  
  (arg1)->FinalizeArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_AddCluster(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  
  SWIG_check_num_args("Dashboard::AddCluster",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::AddCluster",1,"Dashboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_AddCluster",1,SWIGTYPE_p_Dashboard);
  }
  
  (arg1)->AddCluster();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_FinalizeCluster(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  
  SWIG_check_num_args("Dashboard::FinalizeCluster",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::FinalizeCluster",1,"Dashboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_FinalizeCluster",1,SWIGTYPE_p_Dashboard);
  }
  
  (arg1)->FinalizeCluster();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_Printf(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  SWIG_check_num_args("Dashboard::Printf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::Printf",1,"Dashboard *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Dashboard::Printf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_Printf",1,SWIGTYPE_p_Dashboard);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->Printf((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_Finalize(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  INT32 result;
  
  SWIG_check_num_args("Dashboard::Finalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::Finalize",1,"Dashboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_Finalize",1,SWIGTYPE_p_Dashboard);
  }
  
  result = (INT32)(arg1)->Finalize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_GetStatusBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  char **arg2 = (char **) 0 ;
  INT32 *arg3 = (INT32 *) 0 ;
  
  SWIG_check_num_args("Dashboard::GetStatusBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::GetStatusBuffer",1,"Dashboard *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Dashboard::GetStatusBuffer",2,"char **");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Dashboard::GetStatusBuffer",3,"INT32 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_GetStatusBuffer",1,SWIGTYPE_p_Dashboard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("Dashboard_GetStatusBuffer",2,SWIGTYPE_p_p_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("Dashboard_GetStatusBuffer",3,SWIGTYPE_p_int);
  }
  
  (arg1)->GetStatusBuffer(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dashboard_Flush(lua_State* L) {
  int SWIG_arg = 0;
  Dashboard *arg1 = (Dashboard *) 0 ;
  
  SWIG_check_num_args("Dashboard::Flush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Dashboard::Flush",1,"Dashboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Dashboard,0))){
    SWIG_fail_ptr("Dashboard_Flush",1,SWIGTYPE_p_Dashboard);
  }
  
  (arg1)->Flush();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Dashboard(void *obj) {
Dashboard *arg1 = (Dashboard *) obj;
delete arg1;
}
static swig_lua_method swig_Dashboard_methods[] = {
    {"AddI8", _wrap_Dashboard_AddI8}, 
    {"AddI16", _wrap_Dashboard_AddI16}, 
    {"AddI32", _wrap_Dashboard_AddI32}, 
    {"AddU8", _wrap_Dashboard_AddU8}, 
    {"AddU16", _wrap_Dashboard_AddU16}, 
    {"AddU32", _wrap_Dashboard_AddU32}, 
    {"AddFloat", _wrap_Dashboard_AddFloat}, 
    {"AddDouble", _wrap_Dashboard_AddDouble}, 
    {"AddBoolean", _wrap_Dashboard_AddBoolean}, 
    {"AddString", _wrap_Dashboard_AddString}, 
    {"AddArray", _wrap_Dashboard_AddArray}, 
    {"FinalizeArray", _wrap_Dashboard_FinalizeArray}, 
    {"AddCluster", _wrap_Dashboard_AddCluster}, 
    {"FinalizeCluster", _wrap_Dashboard_FinalizeCluster}, 
    {"Printf", _wrap_Dashboard_Printf}, 
    {"Finalize", _wrap_Dashboard_Finalize}, 
    {"GetStatusBuffer", _wrap_Dashboard_GetStatusBuffer}, 
    {"Flush", _wrap_Dashboard_Flush}, 
    {0,0}
};
static swig_lua_attribute swig_Dashboard_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Dashboard_bases[] = {0,0};
static const char *swig_Dashboard_base_names[] = {"DashboardBase *",0};
static swig_lua_class _wrap_class_Dashboard = { "Dashboard", &SWIGTYPE_p_Dashboard,_wrap_new_Dashboard, swig_delete_Dashboard, swig_Dashboard_methods, swig_Dashboard_attributes, swig_Dashboard_bases, swig_Dashboard_base_names };

static int _wrap_new_DigitalInput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  DigitalInput *result = 0 ;
  
  SWIG_check_num_args("DigitalInput::DigitalInput",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DigitalInput::DigitalInput",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (DigitalInput *)new DigitalInput(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DigitalInput,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DigitalInput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  DigitalInput *result = 0 ;
  
  SWIG_check_num_args("DigitalInput::DigitalInput",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DigitalInput::DigitalInput",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalInput::DigitalInput",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (DigitalInput *)new DigitalInput(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DigitalInput,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DigitalInput(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DigitalInput__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DigitalInput__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_DigitalInput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DigitalInput::DigitalInput(UINT32)\n"
    "    DigitalInput::DigitalInput(UINT32,UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_DigitalInput_GetInt(lua_State* L) {
  int SWIG_arg = 0;
  DigitalInput *arg1 = (DigitalInput *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("DigitalInput::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalInput::Get",1,"DigitalInput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalInput,0))){
    SWIG_fail_ptr("DigitalInput_GetInt",1,SWIGTYPE_p_DigitalInput);
  }
  
  result = (UINT32)(arg1)->Get();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalInput_GetChannel(lua_State* L) {
  int SWIG_arg = 0;
  DigitalInput *arg1 = (DigitalInput *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("DigitalInput::GetChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalInput::GetChannel",1,"DigitalInput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalInput,0))){
    SWIG_fail_ptr("DigitalInput_GetChannel",1,SWIGTYPE_p_DigitalInput);
  }
  
  result = (UINT32)(arg1)->GetChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalInput_GetChannelForRouting(lua_State* L) {
  int SWIG_arg = 0;
  DigitalInput *arg1 = (DigitalInput *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("DigitalInput::GetChannelForRouting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalInput::GetChannelForRouting",1,"DigitalInput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalInput,0))){
    SWIG_fail_ptr("DigitalInput_GetChannelForRouting",1,SWIGTYPE_p_DigitalInput);
  }
  
  result = (UINT32)(arg1)->GetChannelForRouting();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalInput_GetModuleForRouting(lua_State* L) {
  int SWIG_arg = 0;
  DigitalInput *arg1 = (DigitalInput *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("DigitalInput::GetModuleForRouting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalInput::GetModuleForRouting",1,"DigitalInput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalInput,0))){
    SWIG_fail_ptr("DigitalInput_GetModuleForRouting",1,SWIGTYPE_p_DigitalInput);
  }
  
  result = (UINT32)(arg1)->GetModuleForRouting();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalInput_GetAnalogTriggerForRouting(lua_State* L) {
  int SWIG_arg = 0;
  DigitalInput *arg1 = (DigitalInput *) 0 ;
  bool result;
  
  SWIG_check_num_args("DigitalInput::GetAnalogTriggerForRouting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalInput::GetAnalogTriggerForRouting",1,"DigitalInput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalInput,0))){
    SWIG_fail_ptr("DigitalInput_GetAnalogTriggerForRouting",1,SWIGTYPE_p_DigitalInput);
  }
  
  result = (bool)(arg1)->GetAnalogTriggerForRouting();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalInput_RequestInterrupts(lua_State* L) {
  int SWIG_arg = 0;
  DigitalInput *arg1 = (DigitalInput *) 0 ;
  
  SWIG_check_num_args("DigitalInput::RequestInterrupts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalInput::RequestInterrupts",1,"DigitalInput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalInput,0))){
    SWIG_fail_ptr("DigitalInput_RequestInterrupts",1,SWIGTYPE_p_DigitalInput);
  }
  
  (arg1)->RequestInterrupts();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalInput_SetUpSourceEdge(lua_State* L) {
  int SWIG_arg = 0;
  DigitalInput *arg1 = (DigitalInput *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("DigitalInput::SetUpSourceEdge",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalInput::SetUpSourceEdge",1,"DigitalInput *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("DigitalInput::SetUpSourceEdge",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("DigitalInput::SetUpSourceEdge",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalInput,0))){
    SWIG_fail_ptr("DigitalInput_SetUpSourceEdge",1,SWIGTYPE_p_DigitalInput);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->SetUpSourceEdge(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalInput_Get(lua_State* L) {
  int SWIG_arg = 0;
  DigitalInput *arg1 = (DigitalInput *) 0 ;
  bool result;
  
  SWIG_check_num_args("DigitalInput::GetBool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalInput::GetBool",1,"DigitalInput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalInput,0))){
    SWIG_fail_ptr("DigitalInput_Get",1,SWIGTYPE_p_DigitalInput);
  }
  
  result = (bool)DigitalInput_GetBool(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DigitalInput(void *obj) {
DigitalInput *arg1 = (DigitalInput *) obj;
delete arg1;
}
static swig_lua_method swig_DigitalInput_methods[] = {
    {"GetInt", _wrap_DigitalInput_GetInt}, 
    {"GetChannel", _wrap_DigitalInput_GetChannel}, 
    {"GetChannelForRouting", _wrap_DigitalInput_GetChannelForRouting}, 
    {"GetModuleForRouting", _wrap_DigitalInput_GetModuleForRouting}, 
    {"GetAnalogTriggerForRouting", _wrap_DigitalInput_GetAnalogTriggerForRouting}, 
    {"RequestInterrupts", _wrap_DigitalInput_RequestInterrupts}, 
    {"SetUpSourceEdge", _wrap_DigitalInput_SetUpSourceEdge}, 
    {"Get", _wrap_DigitalInput_Get}, 
    {0,0}
};
static swig_lua_attribute swig_DigitalInput_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_DigitalInput_bases[] = {0,0};
static const char *swig_DigitalInput_base_names[] = {"DigitalSource *",0};
static swig_lua_class _wrap_class_DigitalInput = { "DigitalInput", &SWIGTYPE_p_DigitalInput,_wrap_new_DigitalInput, swig_delete_DigitalInput, swig_DigitalInput_methods, swig_DigitalInput_attributes, swig_DigitalInput_bases, swig_DigitalInput_base_names };

static int _wrap_DigitalModule_SetPWM(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  UINT8 arg3 ;
  
  SWIG_check_num_args("DigitalModule::SetPWM",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::SetPWM",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::SetPWM",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DigitalModule::SetPWM",3,"UINT8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_SetPWM",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT8)lua_tonumber(L, 3);
  (arg1)->SetPWM(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_GetPWM(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  UINT8 result;
  
  SWIG_check_num_args("DigitalModule::GetPWM",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::GetPWM",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::GetPWM",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_GetPWM",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (UINT8)(arg1)->GetPWM(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_SetPWMPeriodScale(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  
  SWIG_check_num_args("DigitalModule::SetPWMPeriodScale",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::SetPWMPeriodScale",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::SetPWMPeriodScale",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DigitalModule::SetPWMPeriodScale",3,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_SetPWMPeriodScale",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  (arg1)->SetPWMPeriodScale(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_SetRelayForward(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("DigitalModule::SetRelayForward",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::SetRelayForward",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::SetRelayForward",2,"UINT32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("DigitalModule::SetRelayForward",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_SetRelayForward",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->SetRelayForward(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_SetRelayReverse(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("DigitalModule::SetRelayReverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::SetRelayReverse",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::SetRelayReverse",2,"UINT32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("DigitalModule::SetRelayReverse",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_SetRelayReverse",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->SetRelayReverse(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_GetRelayForward__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  bool result;
  
  SWIG_check_num_args("DigitalModule::GetRelayForward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::GetRelayForward",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::GetRelayForward",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_GetRelayForward",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetRelayForward(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_GetRelayForward__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT8 result;
  
  SWIG_check_num_args("DigitalModule::GetRelayForward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::GetRelayForward",1,"DigitalModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_GetRelayForward",1,SWIGTYPE_p_DigitalModule);
  }
  
  result = (UINT8)(arg1)->GetRelayForward();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_GetRelayForward(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DigitalModule_GetRelayForward__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DigitalModule_GetRelayForward__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'DigitalModule_GetRelayForward'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DigitalModule::GetRelayForward(UINT32)\n"
    "    DigitalModule::GetRelayForward()\n");
  lua_error(L);return 0;
}


static int _wrap_DigitalModule_GetRelayReverse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  bool result;
  
  SWIG_check_num_args("DigitalModule::GetRelayReverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::GetRelayReverse",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::GetRelayReverse",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_GetRelayReverse",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetRelayReverse(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_GetRelayReverse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT8 result;
  
  SWIG_check_num_args("DigitalModule::GetRelayReverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::GetRelayReverse",1,"DigitalModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_GetRelayReverse",1,SWIGTYPE_p_DigitalModule);
  }
  
  result = (UINT8)(arg1)->GetRelayReverse();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_GetRelayReverse(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DigitalModule_GetRelayReverse__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DigitalModule_GetRelayReverse__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'DigitalModule_GetRelayReverse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DigitalModule::GetRelayReverse(UINT32)\n"
    "    DigitalModule::GetRelayReverse()\n");
  lua_error(L);return 0;
}


static int _wrap_DigitalModule_AllocateDIO(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("DigitalModule::AllocateDIO",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::AllocateDIO",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::AllocateDIO",2,"UINT32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("DigitalModule::AllocateDIO",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_AllocateDIO",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->AllocateDIO(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_FreeDIO(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  
  SWIG_check_num_args("DigitalModule::FreeDIO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::FreeDIO",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::FreeDIO",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_FreeDIO",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  (arg1)->FreeDIO(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_SetDIO(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("DigitalModule::SetDIO",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::SetDIO",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::SetDIO",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DigitalModule::SetDIO",3,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_SetDIO",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (short)lua_tonumber(L, 3);
  (arg1)->SetDIO(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_GetDIO__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  bool result;
  
  SWIG_check_num_args("DigitalModule::GetDIO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::GetDIO",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::GetDIO",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_GetDIO",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetDIO(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_GetDIO__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT16 result;
  
  SWIG_check_num_args("DigitalModule::GetDIO",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::GetDIO",1,"DigitalModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_GetDIO",1,SWIGTYPE_p_DigitalModule);
  }
  
  result = (UINT16)(arg1)->GetDIO();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_GetDIO(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DigitalModule_GetDIO__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DigitalModule_GetDIO__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'DigitalModule_GetDIO'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DigitalModule::GetDIO(UINT32)\n"
    "    DigitalModule::GetDIO()\n");
  lua_error(L);return 0;
}


static int _wrap_DigitalModule_GetDIODirection__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  bool result;
  
  SWIG_check_num_args("DigitalModule::GetDIODirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::GetDIODirection",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::GetDIODirection",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_GetDIODirection",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetDIODirection(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_GetDIODirection__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT16 result;
  
  SWIG_check_num_args("DigitalModule::GetDIODirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::GetDIODirection",1,"DigitalModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_GetDIODirection",1,SWIGTYPE_p_DigitalModule);
  }
  
  result = (UINT16)(arg1)->GetDIODirection();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_GetDIODirection(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DigitalModule_GetDIODirection__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DigitalModule_GetDIODirection__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'DigitalModule_GetDIODirection'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DigitalModule::GetDIODirection(UINT32)\n"
    "    DigitalModule::GetDIODirection()\n");
  lua_error(L);return 0;
}


static int _wrap_DigitalModule_Pulse(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DigitalModule::Pulse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::Pulse",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::Pulse",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DigitalModule::Pulse",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_Pulse",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->Pulse(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_IsPulsing__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  bool result;
  
  SWIG_check_num_args("DigitalModule::IsPulsing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::IsPulsing",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::IsPulsing",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_IsPulsing",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (bool)(arg1)->IsPulsing(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_IsPulsing__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  bool result;
  
  SWIG_check_num_args("DigitalModule::IsPulsing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::IsPulsing",1,"DigitalModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_IsPulsing",1,SWIGTYPE_p_DigitalModule);
  }
  
  result = (bool)(arg1)->IsPulsing();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_IsPulsing(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DigitalModule_IsPulsing__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalModule, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DigitalModule_IsPulsing__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'DigitalModule_IsPulsing'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DigitalModule::IsPulsing(UINT32)\n"
    "    DigitalModule::IsPulsing()\n");
  lua_error(L);return 0;
}


static int _wrap_DigitalModule_AllocateDO_PWM(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("DigitalModule::AllocateDO_PWM",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::AllocateDO_PWM",1,"DigitalModule *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_AllocateDO_PWM",1,SWIGTYPE_p_DigitalModule);
  }
  
  result = (UINT32)(arg1)->AllocateDO_PWM();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_FreeDO_PWM(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  
  SWIG_check_num_args("DigitalModule::FreeDO_PWM",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::FreeDO_PWM",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::FreeDO_PWM",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_FreeDO_PWM",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  (arg1)->FreeDO_PWM(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_SetDO_PWMRate(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("DigitalModule::SetDO_PWMRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::SetDO_PWMRate",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::SetDO_PWMRate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_SetDO_PWMRate",1,SWIGTYPE_p_DigitalModule);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDO_PWMRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_SetDO_PWMDutyCycle(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DigitalModule::SetDO_PWMDutyCycle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::SetDO_PWMDutyCycle",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::SetDO_PWMDutyCycle",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DigitalModule::SetDO_PWMDutyCycle",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_SetDO_PWMDutyCycle",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->SetDO_PWMDutyCycle(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_SetDO_PWMOutputChannel(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  
  SWIG_check_num_args("DigitalModule::SetDO_PWMOutputChannel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::SetDO_PWMOutputChannel",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::SetDO_PWMOutputChannel",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DigitalModule::SetDO_PWMOutputChannel",3,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_SetDO_PWMOutputChannel",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  (arg1)->SetDO_PWMOutputChannel(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_GetI2C(lua_State* L) {
  int SWIG_arg = 0;
  DigitalModule *arg1 = (DigitalModule *) 0 ;
  UINT32 arg2 ;
  I2C *result = 0 ;
  
  SWIG_check_num_args("DigitalModule::GetI2C",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalModule::GetI2C",1,"DigitalModule *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalModule::GetI2C",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalModule,0))){
    SWIG_fail_ptr("DigitalModule_GetI2C",1,SWIGTYPE_p_DigitalModule);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (I2C *)(arg1)->GetI2C(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_I2C,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_GetInstance(lua_State* L) {
  int SWIG_arg = 0;
  UINT8 arg1 ;
  DigitalModule *result = 0 ;
  
  SWIG_check_num_args("DigitalModule::GetInstance",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DigitalModule::GetInstance",1,"UINT8");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT8)lua_tonumber(L, 1);
  result = (DigitalModule *)DigitalModule::GetInstance(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DigitalModule,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_RemapDigitalChannel(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT8 result;
  
  SWIG_check_num_args("DigitalModule::RemapDigitalChannel",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DigitalModule::RemapDigitalChannel",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (UINT8)DigitalModule::RemapDigitalChannel(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalModule_UnmapDigitalChannel(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT8 result;
  
  SWIG_check_num_args("DigitalModule::UnmapDigitalChannel",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DigitalModule::UnmapDigitalChannel",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (UINT8)DigitalModule::UnmapDigitalChannel(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_DigitalModule_methods[] = {
    {"SetPWM", _wrap_DigitalModule_SetPWM}, 
    {"GetPWM", _wrap_DigitalModule_GetPWM}, 
    {"SetPWMPeriodScale", _wrap_DigitalModule_SetPWMPeriodScale}, 
    {"SetRelayForward", _wrap_DigitalModule_SetRelayForward}, 
    {"SetRelayReverse", _wrap_DigitalModule_SetRelayReverse}, 
    {"GetRelayForward", _wrap_DigitalModule_GetRelayForward}, 
    {"GetRelayReverse", _wrap_DigitalModule_GetRelayReverse}, 
    {"AllocateDIO", _wrap_DigitalModule_AllocateDIO}, 
    {"FreeDIO", _wrap_DigitalModule_FreeDIO}, 
    {"SetDIO", _wrap_DigitalModule_SetDIO}, 
    {"GetDIO", _wrap_DigitalModule_GetDIO}, 
    {"GetDIODirection", _wrap_DigitalModule_GetDIODirection}, 
    {"Pulse", _wrap_DigitalModule_Pulse}, 
    {"IsPulsing", _wrap_DigitalModule_IsPulsing}, 
    {"AllocateDO_PWM", _wrap_DigitalModule_AllocateDO_PWM}, 
    {"FreeDO_PWM", _wrap_DigitalModule_FreeDO_PWM}, 
    {"SetDO_PWMRate", _wrap_DigitalModule_SetDO_PWMRate}, 
    {"SetDO_PWMDutyCycle", _wrap_DigitalModule_SetDO_PWMDutyCycle}, 
    {"SetDO_PWMOutputChannel", _wrap_DigitalModule_SetDO_PWMOutputChannel}, 
    {"GetI2C", _wrap_DigitalModule_GetI2C}, 
    {0,0}
};
static swig_lua_attribute swig_DigitalModule_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_DigitalModule_bases[] = {0,0};
static const char *swig_DigitalModule_base_names[] = {"Module *",0};
static swig_lua_class _wrap_class_DigitalModule = { "DigitalModule", &SWIGTYPE_p_DigitalModule,0,0, swig_DigitalModule_methods, swig_DigitalModule_attributes, swig_DigitalModule_bases, swig_DigitalModule_base_names };

static int _wrap_new_DigitalOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  DigitalOutput *result = 0 ;
  
  SWIG_check_num_args("DigitalOutput::DigitalOutput",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DigitalOutput::DigitalOutput",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (DigitalOutput *)new DigitalOutput(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DigitalOutput,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DigitalOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  DigitalOutput *result = 0 ;
  
  SWIG_check_num_args("DigitalOutput::DigitalOutput",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DigitalOutput::DigitalOutput",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalOutput::DigitalOutput",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (DigitalOutput *)new DigitalOutput(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DigitalOutput,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DigitalOutput(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DigitalOutput__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DigitalOutput__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_DigitalOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DigitalOutput::DigitalOutput(UINT32)\n"
    "    DigitalOutput::DigitalOutput(UINT32,UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_DigitalOutput_Set(lua_State* L) {
  int SWIG_arg = 0;
  DigitalOutput *arg1 = (DigitalOutput *) 0 ;
  UINT32 arg2 ;
  
  SWIG_check_num_args("DigitalOutput::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalOutput::Set",1,"DigitalOutput *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalOutput::Set",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalOutput,0))){
    SWIG_fail_ptr("DigitalOutput_Set",1,SWIGTYPE_p_DigitalOutput);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  (arg1)->Set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalOutput_Pulse(lua_State* L) {
  int SWIG_arg = 0;
  DigitalOutput *arg1 = (DigitalOutput *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("DigitalOutput::Pulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalOutput::Pulse",1,"DigitalOutput *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DigitalOutput::Pulse",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalOutput,0))){
    SWIG_fail_ptr("DigitalOutput_Pulse",1,SWIGTYPE_p_DigitalOutput);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Pulse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DigitalOutput_IsPulsing(lua_State* L) {
  int SWIG_arg = 0;
  DigitalOutput *arg1 = (DigitalOutput *) 0 ;
  bool result;
  
  SWIG_check_num_args("DigitalOutput::IsPulsing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DigitalOutput::IsPulsing",1,"DigitalOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalOutput,0))){
    SWIG_fail_ptr("DigitalOutput_IsPulsing",1,SWIGTYPE_p_DigitalOutput);
  }
  
  result = (bool)(arg1)->IsPulsing();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DigitalOutput(void *obj) {
DigitalOutput *arg1 = (DigitalOutput *) obj;
delete arg1;
}
static swig_lua_method swig_DigitalOutput_methods[] = {
    {"Set", _wrap_DigitalOutput_Set}, 
    {"Pulse", _wrap_DigitalOutput_Pulse}, 
    {"IsPulsing", _wrap_DigitalOutput_IsPulsing}, 
    {0,0}
};
static swig_lua_attribute swig_DigitalOutput_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_DigitalOutput_bases[] = {0,0};
static const char *swig_DigitalOutput_base_names[] = {"SensorBase *",0};
static swig_lua_class _wrap_class_DigitalOutput = { "DigitalOutput", &SWIGTYPE_p_DigitalOutput,_wrap_new_DigitalOutput, swig_delete_DigitalOutput, swig_DigitalOutput_methods, swig_DigitalOutput_attributes, swig_DigitalOutput_bases, swig_DigitalOutput_base_names };

static int _wrap_new_DoubleSolenoid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  DoubleSolenoid *result = 0 ;
  
  SWIG_check_num_args("DoubleSolenoid::DoubleSolenoid",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DoubleSolenoid::DoubleSolenoid",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DoubleSolenoid::DoubleSolenoid",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (DoubleSolenoid *)new DoubleSolenoid(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DoubleSolenoid,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleSolenoid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  DoubleSolenoid *result = 0 ;
  
  SWIG_check_num_args("DoubleSolenoid::DoubleSolenoid",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DoubleSolenoid::DoubleSolenoid",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DoubleSolenoid::DoubleSolenoid",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DoubleSolenoid::DoubleSolenoid",3,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  result = (DoubleSolenoid *)new DoubleSolenoid(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DoubleSolenoid,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleSolenoid(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DoubleSolenoid__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_DoubleSolenoid__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_DoubleSolenoid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DoubleSolenoid::DoubleSolenoid(UINT32,UINT32)\n"
    "    DoubleSolenoid::DoubleSolenoid(UINT32,UINT32,UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleSolenoid_Set(lua_State* L) {
  int SWIG_arg = 0;
  DoubleSolenoid *arg1 = (DoubleSolenoid *) 0 ;
  DoubleSolenoid::Value arg2 ;
  
  SWIG_check_num_args("DoubleSolenoid::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DoubleSolenoid::Set",1,"DoubleSolenoid *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DoubleSolenoid::Set",2,"DoubleSolenoid::Value");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DoubleSolenoid,0))){
    SWIG_fail_ptr("DoubleSolenoid_Set",1,SWIGTYPE_p_DoubleSolenoid);
  }
  
  arg2 = (DoubleSolenoid::Value)(int)lua_tonumber(L, 2);
  (arg1)->Set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleSolenoid_Get(lua_State* L) {
  int SWIG_arg = 0;
  DoubleSolenoid *arg1 = (DoubleSolenoid *) 0 ;
  DoubleSolenoid::Value result;
  
  SWIG_check_num_args("DoubleSolenoid::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DoubleSolenoid::Get",1,"DoubleSolenoid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DoubleSolenoid,0))){
    SWIG_fail_ptr("DoubleSolenoid_Get",1,SWIGTYPE_p_DoubleSolenoid);
  }
  
  result = (DoubleSolenoid::Value)(arg1)->Get();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleSolenoid(void *obj) {
DoubleSolenoid *arg1 = (DoubleSolenoid *) obj;
delete arg1;
}
static swig_lua_method swig_DoubleSolenoid_methods[] = {
    {"Set", _wrap_DoubleSolenoid_Set}, 
    {"Get", _wrap_DoubleSolenoid_Get}, 
    {0,0}
};
static swig_lua_attribute swig_DoubleSolenoid_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_DoubleSolenoid_bases[] = {0,0};
static const char *swig_DoubleSolenoid_base_names[] = {"SolenoidBase *",0};
static swig_lua_class _wrap_class_DoubleSolenoid = { "DoubleSolenoid", &SWIGTYPE_p_DoubleSolenoid,_wrap_new_DoubleSolenoid, swig_delete_DoubleSolenoid, swig_DoubleSolenoid_methods, swig_DoubleSolenoid_attributes, swig_DoubleSolenoid_bases, swig_DoubleSolenoid_base_names };

static int _wrap_DriverStation_GetInstance(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *result = 0 ;
  
  SWIG_check_num_args("DriverStation::GetInstance",0,0)
  result = (DriverStation *)DriverStation::GetInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DriverStation,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetStickAxis(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  float result;
  
  SWIG_check_num_args("DriverStation::GetStickAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetStickAxis",1,"DriverStation *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStation::GetStickAxis",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DriverStation::GetStickAxis",3,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetStickAxis",1,SWIGTYPE_p_DriverStation);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  result = (float)(arg1)->GetStickAxis(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetStickButtons(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  UINT32 arg2 ;
  short result;
  
  SWIG_check_num_args("DriverStation::GetStickButtons",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetStickButtons",1,"DriverStation *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStation::GetStickButtons",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetStickButtons",1,SWIGTYPE_p_DriverStation);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (short)(arg1)->GetStickButtons(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetAnalogIn(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  UINT32 arg2 ;
  float result;
  
  SWIG_check_num_args("DriverStation::GetAnalogIn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetAnalogIn",1,"DriverStation *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStation::GetAnalogIn",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetAnalogIn",1,SWIGTYPE_p_DriverStation);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (float)(arg1)->GetAnalogIn(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetDigitalIn(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  UINT32 arg2 ;
  bool result;
  
  SWIG_check_num_args("DriverStation::GetDigitalIn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetDigitalIn",1,"DriverStation *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStation::GetDigitalIn",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetDigitalIn",1,SWIGTYPE_p_DriverStation);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetDigitalIn(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_SetDigitalOut(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  UINT32 arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("DriverStation::SetDigitalOut",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::SetDigitalOut",1,"DriverStation *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStation::SetDigitalOut",2,"UINT32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("DriverStation::SetDigitalOut",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_SetDigitalOut",1,SWIGTYPE_p_DriverStation);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->SetDigitalOut(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetDigitalOut(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  UINT32 arg2 ;
  bool result;
  
  SWIG_check_num_args("DriverStation::GetDigitalOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetDigitalOut",1,"DriverStation *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStation::GetDigitalOut",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetDigitalOut",1,SWIGTYPE_p_DriverStation);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetDigitalOut(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_IsEnabled(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  bool result;
  
  SWIG_check_num_args("DriverStation::IsEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::IsEnabled",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_IsEnabled",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (bool)(arg1)->IsEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_IsDisabled(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  bool result;
  
  SWIG_check_num_args("DriverStation::IsDisabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::IsDisabled",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_IsDisabled",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (bool)(arg1)->IsDisabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_IsAutonomous(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  bool result;
  
  SWIG_check_num_args("DriverStation::IsAutonomous",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::IsAutonomous",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_IsAutonomous",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (bool)(arg1)->IsAutonomous();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_IsOperatorControl(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  bool result;
  
  SWIG_check_num_args("DriverStation::IsOperatorControl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::IsOperatorControl",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_IsOperatorControl",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (bool)(arg1)->IsOperatorControl();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_IsNewControlData(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  bool result;
  
  SWIG_check_num_args("DriverStation::IsNewControlData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::IsNewControlData",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_IsNewControlData",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (bool)(arg1)->IsNewControlData();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_IsFMSAttached(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  bool result;
  
  SWIG_check_num_args("DriverStation::IsFMSAttached",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::IsFMSAttached",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_IsFMSAttached",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (bool)(arg1)->IsFMSAttached();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetPacketNumber(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("DriverStation::GetPacketNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetPacketNumber",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetPacketNumber",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (UINT32)(arg1)->GetPacketNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetAlliance(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  DriverStation::Alliance result;
  
  SWIG_check_num_args("DriverStation::GetAlliance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetAlliance",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetAlliance",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (DriverStation::Alliance)(arg1)->GetAlliance();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetLocation(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  UINT32 result;
  
  SWIG_check_num_args("DriverStation::GetLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetLocation",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetLocation",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (UINT32)(arg1)->GetLocation();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_WaitForData(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  
  SWIG_check_num_args("DriverStation::WaitForData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::WaitForData",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_WaitForData",1,SWIGTYPE_p_DriverStation);
  }
  
  (arg1)->WaitForData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetMatchTime(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  double result;
  
  SWIG_check_num_args("DriverStation::GetMatchTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetMatchTime",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetMatchTime",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (double)(arg1)->GetMatchTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetBatteryVoltage(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  float result;
  
  SWIG_check_num_args("DriverStation::GetBatteryVoltage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetBatteryVoltage",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetBatteryVoltage",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (float)(arg1)->GetBatteryVoltage();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetTeamNumber(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  UINT16 result;
  
  SWIG_check_num_args("DriverStation::GetTeamNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetTeamNumber",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetTeamNumber",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (UINT16)(arg1)->GetTeamNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetHighPriorityDashboardPacker(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  Dashboard *result = 0 ;
  
  SWIG_check_num_args("DriverStation::GetHighPriorityDashboardPacker",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetHighPriorityDashboardPacker",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetHighPriorityDashboardPacker",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (Dashboard *) &(arg1)->GetHighPriorityDashboardPacker();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dashboard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetLowPriorityDashboardPacker(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  Dashboard *result = 0 ;
  
  SWIG_check_num_args("DriverStation::GetLowPriorityDashboardPacker",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetLowPriorityDashboardPacker",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetLowPriorityDashboardPacker",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (Dashboard *) &(arg1)->GetLowPriorityDashboardPacker();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Dashboard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetHighPriorityDashboardPackerInUse(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  DashboardBase *result = 0 ;
  
  SWIG_check_num_args("DriverStation::GetHighPriorityDashboardPackerInUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetHighPriorityDashboardPackerInUse",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetHighPriorityDashboardPackerInUse",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (DashboardBase *)(arg1)->GetHighPriorityDashboardPackerInUse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DashboardBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetLowPriorityDashboardPackerInUse(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  DashboardBase *result = 0 ;
  
  SWIG_check_num_args("DriverStation::GetLowPriorityDashboardPackerInUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetLowPriorityDashboardPackerInUse",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetLowPriorityDashboardPackerInUse",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (DashboardBase *)(arg1)->GetLowPriorityDashboardPackerInUse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DashboardBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_SetHighPriorityDashboardPackerToUse(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  DashboardBase *arg2 = (DashboardBase *) 0 ;
  
  SWIG_check_num_args("DriverStation::SetHighPriorityDashboardPackerToUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::SetHighPriorityDashboardPackerToUse",1,"DriverStation *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DriverStation::SetHighPriorityDashboardPackerToUse",2,"DashboardBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_SetHighPriorityDashboardPackerToUse",1,SWIGTYPE_p_DriverStation);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DashboardBase,0))){
    SWIG_fail_ptr("DriverStation_SetHighPriorityDashboardPackerToUse",2,SWIGTYPE_p_DashboardBase);
  }
  
  (arg1)->SetHighPriorityDashboardPackerToUse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_SetLowPriorityDashboardPackerToUse(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  DashboardBase *arg2 = (DashboardBase *) 0 ;
  
  SWIG_check_num_args("DriverStation::SetLowPriorityDashboardPackerToUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::SetLowPriorityDashboardPackerToUse",1,"DriverStation *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DriverStation::SetLowPriorityDashboardPackerToUse",2,"DashboardBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_SetLowPriorityDashboardPackerToUse",1,SWIGTYPE_p_DriverStation);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DashboardBase,0))){
    SWIG_fail_ptr("DriverStation_SetLowPriorityDashboardPackerToUse",2,SWIGTYPE_p_DashboardBase);
  }
  
  (arg1)->SetLowPriorityDashboardPackerToUse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetEnhancedIO(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  DriverStationEnhancedIO *result = 0 ;
  
  SWIG_check_num_args("DriverStation::GetEnhancedIO",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetEnhancedIO",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetEnhancedIO",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (DriverStationEnhancedIO *) &(arg1)->GetEnhancedIO();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DriverStationEnhancedIO,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_IncrementUpdateNumber(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  
  SWIG_check_num_args("DriverStation::IncrementUpdateNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::IncrementUpdateNumber",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_IncrementUpdateNumber",1,SWIGTYPE_p_DriverStation);
  }
  
  (arg1)->IncrementUpdateNumber();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_GetUserStatusDataSem(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  SEM_ID result;
  
  SWIG_check_num_args("DriverStation::GetUserStatusDataSem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::GetUserStatusDataSem",1,"DriverStation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_GetUserStatusDataSem",1,SWIGTYPE_p_DriverStation);
  }
  
  result = (arg1)->GetUserStatusDataSem();
  {
    SEM_ID * resultptr = new SEM_ID((const SEM_ID &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SEM_ID,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_InDisabled(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("DriverStation::InDisabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::InDisabled",1,"DriverStation *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("DriverStation::InDisabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_InDisabled",1,SWIGTYPE_p_DriverStation);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->InDisabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_InAutonomous(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("DriverStation::InAutonomous",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::InAutonomous",1,"DriverStation *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("DriverStation::InAutonomous",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_InAutonomous",1,SWIGTYPE_p_DriverStation);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->InAutonomous(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStation_InOperatorControl(lua_State* L) {
  int SWIG_arg = 0;
  DriverStation *arg1 = (DriverStation *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("DriverStation::InOperatorControl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStation::InOperatorControl",1,"DriverStation *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("DriverStation::InOperatorControl",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStation,0))){
    SWIG_fail_ptr("DriverStation_InOperatorControl",1,SWIGTYPE_p_DriverStation);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->InOperatorControl(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DriverStation(void *obj) {
DriverStation *arg1 = (DriverStation *) obj;
delete arg1;
}
static swig_lua_method swig_DriverStation_methods[] = {
    {"GetStickAxis", _wrap_DriverStation_GetStickAxis}, 
    {"GetStickButtons", _wrap_DriverStation_GetStickButtons}, 
    {"GetAnalogIn", _wrap_DriverStation_GetAnalogIn}, 
    {"GetDigitalIn", _wrap_DriverStation_GetDigitalIn}, 
    {"SetDigitalOut", _wrap_DriverStation_SetDigitalOut}, 
    {"GetDigitalOut", _wrap_DriverStation_GetDigitalOut}, 
    {"IsEnabled", _wrap_DriverStation_IsEnabled}, 
    {"IsDisabled", _wrap_DriverStation_IsDisabled}, 
    {"IsAutonomous", _wrap_DriverStation_IsAutonomous}, 
    {"IsOperatorControl", _wrap_DriverStation_IsOperatorControl}, 
    {"IsNewControlData", _wrap_DriverStation_IsNewControlData}, 
    {"IsFMSAttached", _wrap_DriverStation_IsFMSAttached}, 
    {"GetPacketNumber", _wrap_DriverStation_GetPacketNumber}, 
    {"GetAlliance", _wrap_DriverStation_GetAlliance}, 
    {"GetLocation", _wrap_DriverStation_GetLocation}, 
    {"WaitForData", _wrap_DriverStation_WaitForData}, 
    {"GetMatchTime", _wrap_DriverStation_GetMatchTime}, 
    {"GetBatteryVoltage", _wrap_DriverStation_GetBatteryVoltage}, 
    {"GetTeamNumber", _wrap_DriverStation_GetTeamNumber}, 
    {"GetHighPriorityDashboardPacker", _wrap_DriverStation_GetHighPriorityDashboardPacker}, 
    {"GetLowPriorityDashboardPacker", _wrap_DriverStation_GetLowPriorityDashboardPacker}, 
    {"GetHighPriorityDashboardPackerInUse", _wrap_DriverStation_GetHighPriorityDashboardPackerInUse}, 
    {"GetLowPriorityDashboardPackerInUse", _wrap_DriverStation_GetLowPriorityDashboardPackerInUse}, 
    {"SetHighPriorityDashboardPackerToUse", _wrap_DriverStation_SetHighPriorityDashboardPackerToUse}, 
    {"SetLowPriorityDashboardPackerToUse", _wrap_DriverStation_SetLowPriorityDashboardPackerToUse}, 
    {"GetEnhancedIO", _wrap_DriverStation_GetEnhancedIO}, 
    {"IncrementUpdateNumber", _wrap_DriverStation_IncrementUpdateNumber}, 
    {"GetUserStatusDataSem", _wrap_DriverStation_GetUserStatusDataSem}, 
    {"InDisabled", _wrap_DriverStation_InDisabled}, 
    {"InAutonomous", _wrap_DriverStation_InAutonomous}, 
    {"InOperatorControl", _wrap_DriverStation_InOperatorControl}, 
    {0,0}
};
static swig_lua_attribute swig_DriverStation_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_DriverStation_bases[] = {0,0};
static const char *swig_DriverStation_base_names[] = {"SensorBase *",0};
static swig_lua_class _wrap_class_DriverStation = { "DriverStation", &SWIGTYPE_p_DriverStation,0, swig_delete_DriverStation, swig_DriverStation_methods, swig_DriverStation_attributes, swig_DriverStation_bases, swig_DriverStation_base_names };

static int _wrap_DriverStationEnhancedIO_GetAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  DriverStationEnhancedIO::tAccelChannel arg2 ;
  double result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetAcceleration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetAcceleration",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::GetAcceleration",2,"DriverStationEnhancedIO::tAccelChannel");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetAcceleration",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  arg2 = (DriverStationEnhancedIO::tAccelChannel)(int)lua_tonumber(L, 2);
  result = (double)(arg1)->GetAcceleration(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_GetAnalogIn(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  double result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetAnalogIn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetAnalogIn",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::GetAnalogIn",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetAnalogIn",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (double)(arg1)->GetAnalogIn(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_GetAnalogInRatio(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  double result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetAnalogInRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetAnalogInRatio",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::GetAnalogInRatio",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetAnalogInRatio",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (double)(arg1)->GetAnalogInRatio(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_GetAnalogOut(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  double result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetAnalogOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetAnalogOut",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::GetAnalogOut",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetAnalogOut",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (double)(arg1)->GetAnalogOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_SetAnalogOut(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DriverStationEnhancedIO::SetAnalogOut",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::SetAnalogOut",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::SetAnalogOut",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DriverStationEnhancedIO::SetAnalogOut",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_SetAnalogOut",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->SetAnalogOut(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_GetButton(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  bool result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetButton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetButton",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::GetButton",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetButton",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetButton(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_GetButtons(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT8 result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetButtons",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetButtons",1,"DriverStationEnhancedIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetButtons",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  result = (UINT8)(arg1)->GetButtons();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_SetLED(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("DriverStationEnhancedIO::SetLED",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::SetLED",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::SetLED",2,"UINT32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("DriverStationEnhancedIO::SetLED",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_SetLED",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->SetLED(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_SetLEDs(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT8 arg2 ;
  
  SWIG_check_num_args("DriverStationEnhancedIO::SetLEDs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::SetLEDs",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::SetLEDs",2,"UINT8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_SetLEDs",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT8)lua_tonumber(L, 2);
  (arg1)->SetLEDs(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_GetDigital(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  bool result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetDigital",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetDigital",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::GetDigital",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetDigital",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetDigital(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_GetDigitals(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT16 result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetDigitals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetDigitals",1,"DriverStationEnhancedIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetDigitals",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  result = (UINT16)(arg1)->GetDigitals();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_SetDigitalOutput(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("DriverStationEnhancedIO::SetDigitalOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::SetDigitalOutput",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::SetDigitalOutput",2,"UINT32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("DriverStationEnhancedIO::SetDigitalOutput",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_SetDigitalOutput",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->SetDigitalOutput(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_GetDigitalConfig(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  DriverStationEnhancedIO::tDigitalConfig result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetDigitalConfig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetDigitalConfig",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::GetDigitalConfig",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetDigitalConfig",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (DriverStationEnhancedIO::tDigitalConfig)(arg1)->GetDigitalConfig(arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_SetDigitalConfig(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  DriverStationEnhancedIO::tDigitalConfig arg3 ;
  
  SWIG_check_num_args("DriverStationEnhancedIO::SetDigitalConfig",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::SetDigitalConfig",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::SetDigitalConfig",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DriverStationEnhancedIO::SetDigitalConfig",3,"DriverStationEnhancedIO::tDigitalConfig");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_SetDigitalConfig",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (DriverStationEnhancedIO::tDigitalConfig)(int)lua_tonumber(L, 3);
  (arg1)->SetDigitalConfig(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_GetPWMPeriod(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  DriverStationEnhancedIO::tPWMPeriodChannels arg2 ;
  double result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetPWMPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetPWMPeriod",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::GetPWMPeriod",2,"DriverStationEnhancedIO::tPWMPeriodChannels");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetPWMPeriod",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  arg2 = (DriverStationEnhancedIO::tPWMPeriodChannels)(int)lua_tonumber(L, 2);
  result = (double)(arg1)->GetPWMPeriod(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_SetPWMPeriod(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  DriverStationEnhancedIO::tPWMPeriodChannels arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DriverStationEnhancedIO::SetPWMPeriod",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::SetPWMPeriod",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::SetPWMPeriod",2,"DriverStationEnhancedIO::tPWMPeriodChannels");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DriverStationEnhancedIO::SetPWMPeriod",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_SetPWMPeriod",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  arg2 = (DriverStationEnhancedIO::tPWMPeriodChannels)(int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->SetPWMPeriod(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_GetFixedDigitalOutput(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  bool result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetFixedDigitalOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetFixedDigitalOutput",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::GetFixedDigitalOutput",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetFixedDigitalOutput",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetFixedDigitalOutput(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_SetFixedDigitalOutput(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("DriverStationEnhancedIO::SetFixedDigitalOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::SetFixedDigitalOutput",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::SetFixedDigitalOutput",2,"UINT32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("DriverStationEnhancedIO::SetFixedDigitalOutput",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_SetFixedDigitalOutput",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->SetFixedDigitalOutput(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_GetEncoder(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  INT16 result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetEncoder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetEncoder",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::GetEncoder",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetEncoder",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (INT16)(arg1)->GetEncoder(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_ResetEncoder(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  
  SWIG_check_num_args("DriverStationEnhancedIO::ResetEncoder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::ResetEncoder",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::ResetEncoder",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_ResetEncoder",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  (arg1)->ResetEncoder(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_GetEncoderIndexEnable(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  bool result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetEncoderIndexEnable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetEncoderIndexEnable",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::GetEncoderIndexEnable",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetEncoderIndexEnable",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetEncoderIndexEnable(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_SetEncoderIndexEnable(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("DriverStationEnhancedIO::SetEncoderIndexEnable",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::SetEncoderIndexEnable",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::SetEncoderIndexEnable",2,"UINT32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("DriverStationEnhancedIO::SetEncoderIndexEnable",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_SetEncoderIndexEnable",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->SetEncoderIndexEnable(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_GetTouchSlider(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  double result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetTouchSlider",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetTouchSlider",1,"DriverStationEnhancedIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetTouchSlider",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  result = (double)(arg1)->GetTouchSlider();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_GetPWMOutput(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  double result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetPWMOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetPWMOutput",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::GetPWMOutput",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetPWMOutput",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (double)(arg1)->GetPWMOutput(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_SetPWMOutput(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT32 arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DriverStationEnhancedIO::SetPWMOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::SetPWMOutput",1,"DriverStationEnhancedIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationEnhancedIO::SetPWMOutput",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DriverStationEnhancedIO::SetPWMOutput",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_SetPWMOutput",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->SetPWMOutput(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationEnhancedIO_GetFirmwareVersion(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationEnhancedIO *arg1 = (DriverStationEnhancedIO *) 0 ;
  UINT8 result;
  
  SWIG_check_num_args("DriverStationEnhancedIO::GetFirmwareVersion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationEnhancedIO::GetFirmwareVersion",1,"DriverStationEnhancedIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationEnhancedIO,0))){
    SWIG_fail_ptr("DriverStationEnhancedIO_GetFirmwareVersion",1,SWIGTYPE_p_DriverStationEnhancedIO);
  }
  
  result = (UINT8)(arg1)->GetFirmwareVersion();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_DriverStationEnhancedIO_methods[] = {
    {"GetAcceleration", _wrap_DriverStationEnhancedIO_GetAcceleration}, 
    {"GetAnalogIn", _wrap_DriverStationEnhancedIO_GetAnalogIn}, 
    {"GetAnalogInRatio", _wrap_DriverStationEnhancedIO_GetAnalogInRatio}, 
    {"GetAnalogOut", _wrap_DriverStationEnhancedIO_GetAnalogOut}, 
    {"SetAnalogOut", _wrap_DriverStationEnhancedIO_SetAnalogOut}, 
    {"GetButton", _wrap_DriverStationEnhancedIO_GetButton}, 
    {"GetButtons", _wrap_DriverStationEnhancedIO_GetButtons}, 
    {"SetLED", _wrap_DriverStationEnhancedIO_SetLED}, 
    {"SetLEDs", _wrap_DriverStationEnhancedIO_SetLEDs}, 
    {"GetDigital", _wrap_DriverStationEnhancedIO_GetDigital}, 
    {"GetDigitals", _wrap_DriverStationEnhancedIO_GetDigitals}, 
    {"SetDigitalOutput", _wrap_DriverStationEnhancedIO_SetDigitalOutput}, 
    {"GetDigitalConfig", _wrap_DriverStationEnhancedIO_GetDigitalConfig}, 
    {"SetDigitalConfig", _wrap_DriverStationEnhancedIO_SetDigitalConfig}, 
    {"GetPWMPeriod", _wrap_DriverStationEnhancedIO_GetPWMPeriod}, 
    {"SetPWMPeriod", _wrap_DriverStationEnhancedIO_SetPWMPeriod}, 
    {"GetFixedDigitalOutput", _wrap_DriverStationEnhancedIO_GetFixedDigitalOutput}, 
    {"SetFixedDigitalOutput", _wrap_DriverStationEnhancedIO_SetFixedDigitalOutput}, 
    {"GetEncoder", _wrap_DriverStationEnhancedIO_GetEncoder}, 
    {"ResetEncoder", _wrap_DriverStationEnhancedIO_ResetEncoder}, 
    {"GetEncoderIndexEnable", _wrap_DriverStationEnhancedIO_GetEncoderIndexEnable}, 
    {"SetEncoderIndexEnable", _wrap_DriverStationEnhancedIO_SetEncoderIndexEnable}, 
    {"GetTouchSlider", _wrap_DriverStationEnhancedIO_GetTouchSlider}, 
    {"GetPWMOutput", _wrap_DriverStationEnhancedIO_GetPWMOutput}, 
    {"SetPWMOutput", _wrap_DriverStationEnhancedIO_SetPWMOutput}, 
    {"GetFirmwareVersion", _wrap_DriverStationEnhancedIO_GetFirmwareVersion}, 
    {0,0}
};
static swig_lua_attribute swig_DriverStationEnhancedIO_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_DriverStationEnhancedIO_bases[] = {0,0};
static const char *swig_DriverStationEnhancedIO_base_names[] = {"ErrorBase *",0};
static swig_lua_class _wrap_class_DriverStationEnhancedIO = { "DriverStationEnhancedIO", &SWIGTYPE_p_DriverStationEnhancedIO,0,0, swig_DriverStationEnhancedIO_methods, swig_DriverStationEnhancedIO_attributes, swig_DriverStationEnhancedIO_bases, swig_DriverStationEnhancedIO_base_names };

static int _wrap_DriverStationLCD_GetInstance(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationLCD *result = 0 ;
  
  SWIG_check_num_args("DriverStationLCD::GetInstance",0,0)
  result = (DriverStationLCD *)DriverStationLCD::GetInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DriverStationLCD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationLCD_UpdateLCD(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationLCD *arg1 = (DriverStationLCD *) 0 ;
  
  SWIG_check_num_args("DriverStationLCD::UpdateLCD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationLCD::UpdateLCD",1,"DriverStationLCD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationLCD,0))){
    SWIG_fail_ptr("DriverStationLCD_UpdateLCD",1,SWIGTYPE_p_DriverStationLCD);
  }
  
  (arg1)->UpdateLCD();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationLCD_Clear(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationLCD *arg1 = (DriverStationLCD *) 0 ;
  
  SWIG_check_num_args("DriverStationLCD::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationLCD::Clear",1,"DriverStationLCD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationLCD,0))){
    SWIG_fail_ptr("DriverStationLCD_Clear",1,SWIGTYPE_p_DriverStationLCD);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationLCD_Print(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationLCD *arg1 = (DriverStationLCD *) 0 ;
  DriverStationLCD::Line arg2 ;
  INT32 arg3 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("DriverStationLCD::Print",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationLCD::Print",1,"DriverStationLCD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationLCD::Print",2,"DriverStationLCD::Line");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DriverStationLCD::Print",3,"INT32");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("DriverStationLCD::Print",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationLCD,0))){
    SWIG_fail_ptr("DriverStationLCD_Print",1,SWIGTYPE_p_DriverStationLCD);
  }
  
  arg2 = (DriverStationLCD::Line)(int)lua_tonumber(L, 2);
  arg3 = (INT32)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  DriverStationLCD_Print(arg1,arg2,arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DriverStationLCD_PrintLine(lua_State* L) {
  int SWIG_arg = 0;
  DriverStationLCD *arg1 = (DriverStationLCD *) 0 ;
  DriverStationLCD::Line arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("DriverStationLCD::PrintLine",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DriverStationLCD::PrintLine",1,"DriverStationLCD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DriverStationLCD::PrintLine",2,"DriverStationLCD::Line");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("DriverStationLCD::PrintLine",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DriverStationLCD,0))){
    SWIG_fail_ptr("DriverStationLCD_PrintLine",1,SWIGTYPE_p_DriverStationLCD);
  }
  
  arg2 = (DriverStationLCD::Line)(int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  DriverStationLCD_PrintLine(arg1,arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DriverStationLCD(void *obj) {
DriverStationLCD *arg1 = (DriverStationLCD *) obj;
delete arg1;
}
static swig_lua_method swig_DriverStationLCD_methods[] = {
    {"UpdateLCD", _wrap_DriverStationLCD_UpdateLCD}, 
    {"Clear", _wrap_DriverStationLCD_Clear}, 
    {"Print", _wrap_DriverStationLCD_Print}, 
    {"PrintLine", _wrap_DriverStationLCD_PrintLine}, 
    {0,0}
};
static swig_lua_attribute swig_DriverStationLCD_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_DriverStationLCD_bases[] = {0,0};
static const char *swig_DriverStationLCD_base_names[] = {"SensorBase *",0};
static swig_lua_class _wrap_class_DriverStationLCD = { "DriverStationLCD", &SWIGTYPE_p_DriverStationLCD,0, swig_delete_DriverStationLCD, swig_DriverStationLCD_methods, swig_DriverStationLCD_attributes, swig_DriverStationLCD_bases, swig_DriverStationLCD_base_names };

static int _wrap_new_Encoder__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  bool arg3 ;
  CounterBase::EncodingType arg4 ;
  Encoder *result = 0 ;
  
  SWIG_check_num_args("Encoder::Encoder",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Encoder::Encoder",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Encoder::Encoder",2,"UINT32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Encoder::Encoder",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Encoder::Encoder",4,"CounterBase::EncodingType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (CounterBase::EncodingType)(int)lua_tonumber(L, 4);
  result = (Encoder *)new Encoder(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Encoder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Encoder__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  bool arg3 ;
  Encoder *result = 0 ;
  
  SWIG_check_num_args("Encoder::Encoder",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Encoder::Encoder",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Encoder::Encoder",2,"UINT32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Encoder::Encoder",3,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Encoder *)new Encoder(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Encoder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Encoder__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  Encoder *result = 0 ;
  
  SWIG_check_num_args("Encoder::Encoder",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Encoder::Encoder",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Encoder::Encoder",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (Encoder *)new Encoder(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Encoder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Encoder__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  UINT32 arg4 ;
  bool arg5 ;
  CounterBase::EncodingType arg6 ;
  Encoder *result = 0 ;
  
  SWIG_check_num_args("Encoder::Encoder",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Encoder::Encoder",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Encoder::Encoder",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Encoder::Encoder",3,"UINT32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Encoder::Encoder",4,"UINT32");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Encoder::Encoder",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Encoder::Encoder",6,"CounterBase::EncodingType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UINT32)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (CounterBase::EncodingType)(int)lua_tonumber(L, 6);
  result = (Encoder *)new Encoder(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Encoder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Encoder__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  UINT32 arg4 ;
  bool arg5 ;
  Encoder *result = 0 ;
  
  SWIG_check_num_args("Encoder::Encoder",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Encoder::Encoder",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Encoder::Encoder",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Encoder::Encoder",3,"UINT32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Encoder::Encoder",4,"UINT32");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Encoder::Encoder",5,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UINT32)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (Encoder *)new Encoder(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Encoder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Encoder__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  UINT32 arg4 ;
  Encoder *result = 0 ;
  
  SWIG_check_num_args("Encoder::Encoder",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Encoder::Encoder",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Encoder::Encoder",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Encoder::Encoder",3,"UINT32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Encoder::Encoder",4,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UINT32)lua_tonumber(L, 4);
  result = (Encoder *)new Encoder(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Encoder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Encoder__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  DigitalSource *arg1 = (DigitalSource *) 0 ;
  DigitalSource *arg2 = (DigitalSource *) 0 ;
  bool arg3 ;
  CounterBase::EncodingType arg4 ;
  Encoder *result = 0 ;
  
  SWIG_check_num_args("Encoder::Encoder",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::Encoder",1,"DigitalSource *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Encoder::Encoder",2,"DigitalSource *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Encoder::Encoder",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Encoder::Encoder",4,"CounterBase::EncodingType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("new_Encoder",1,SWIGTYPE_p_DigitalSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("new_Encoder",2,SWIGTYPE_p_DigitalSource);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (CounterBase::EncodingType)(int)lua_tonumber(L, 4);
  result = (Encoder *)new Encoder(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Encoder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Encoder__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  DigitalSource *arg1 = (DigitalSource *) 0 ;
  DigitalSource *arg2 = (DigitalSource *) 0 ;
  bool arg3 ;
  Encoder *result = 0 ;
  
  SWIG_check_num_args("Encoder::Encoder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::Encoder",1,"DigitalSource *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Encoder::Encoder",2,"DigitalSource *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Encoder::Encoder",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("new_Encoder",1,SWIGTYPE_p_DigitalSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("new_Encoder",2,SWIGTYPE_p_DigitalSource);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Encoder *)new Encoder(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Encoder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Encoder__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  DigitalSource *arg1 = (DigitalSource *) 0 ;
  DigitalSource *arg2 = (DigitalSource *) 0 ;
  Encoder *result = 0 ;
  
  SWIG_check_num_args("Encoder::Encoder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::Encoder",1,"DigitalSource *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Encoder::Encoder",2,"DigitalSource *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("new_Encoder",1,SWIGTYPE_p_DigitalSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("new_Encoder",2,SWIGTYPE_p_DigitalSource);
  }
  
  result = (Encoder *)new Encoder(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Encoder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Encoder(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalSource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DigitalSource, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Encoder__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Encoder__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalSource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DigitalSource, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Encoder__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Encoder__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalSource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DigitalSource, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Encoder__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Encoder__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Encoder__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_Encoder__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_Encoder__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Encoder'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Encoder::Encoder(UINT32,UINT32,bool,CounterBase::EncodingType)\n"
    "    Encoder::Encoder(UINT32,UINT32,bool)\n"
    "    Encoder::Encoder(UINT32,UINT32)\n"
    "    Encoder::Encoder(UINT32,UINT32,UINT32,UINT32,bool,CounterBase::EncodingType)\n"
    "    Encoder::Encoder(UINT32,UINT32,UINT32,UINT32,bool)\n"
    "    Encoder::Encoder(UINT32,UINT32,UINT32,UINT32)\n"
    "    Encoder::Encoder(DigitalSource *,DigitalSource *,bool,CounterBase::EncodingType)\n"
    "    Encoder::Encoder(DigitalSource *,DigitalSource *,bool)\n"
    "    Encoder::Encoder(DigitalSource *,DigitalSource *)\n");
  lua_error(L);return 0;
}


static int _wrap_Encoder_Start(lua_State* L) {
  int SWIG_arg = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  
  SWIG_check_num_args("Encoder::Start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::Start",1,"Encoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Encoder,0))){
    SWIG_fail_ptr("Encoder_Start",1,SWIGTYPE_p_Encoder);
  }
  
  (arg1)->Start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Encoder_Get(lua_State* L) {
  int SWIG_arg = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  INT32 result;
  
  SWIG_check_num_args("Encoder::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::Get",1,"Encoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Encoder,0))){
    SWIG_fail_ptr("Encoder_Get",1,SWIGTYPE_p_Encoder);
  }
  
  result = (INT32)(arg1)->Get();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Encoder_GetRaw(lua_State* L) {
  int SWIG_arg = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  INT32 result;
  
  SWIG_check_num_args("Encoder::GetRaw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::GetRaw",1,"Encoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Encoder,0))){
    SWIG_fail_ptr("Encoder_GetRaw",1,SWIGTYPE_p_Encoder);
  }
  
  result = (INT32)(arg1)->GetRaw();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Encoder_Reset(lua_State* L) {
  int SWIG_arg = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  
  SWIG_check_num_args("Encoder::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::Reset",1,"Encoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Encoder,0))){
    SWIG_fail_ptr("Encoder_Reset",1,SWIGTYPE_p_Encoder);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Encoder_Stop(lua_State* L) {
  int SWIG_arg = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  
  SWIG_check_num_args("Encoder::Stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::Stop",1,"Encoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Encoder,0))){
    SWIG_fail_ptr("Encoder_Stop",1,SWIGTYPE_p_Encoder);
  }
  
  (arg1)->Stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Encoder_GetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  double result;
  
  SWIG_check_num_args("Encoder::GetPeriod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::GetPeriod",1,"Encoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Encoder,0))){
    SWIG_fail_ptr("Encoder_GetPeriod",1,SWIGTYPE_p_Encoder);
  }
  
  result = (double)(arg1)->GetPeriod();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Encoder_SetMaxPeriod(lua_State* L) {
  int SWIG_arg = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Encoder::SetMaxPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::SetMaxPeriod",1,"Encoder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Encoder::SetMaxPeriod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Encoder,0))){
    SWIG_fail_ptr("Encoder_SetMaxPeriod",1,SWIGTYPE_p_Encoder);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->SetMaxPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Encoder_GetStopped(lua_State* L) {
  int SWIG_arg = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  bool result;
  
  SWIG_check_num_args("Encoder::GetStopped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::GetStopped",1,"Encoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Encoder,0))){
    SWIG_fail_ptr("Encoder_GetStopped",1,SWIGTYPE_p_Encoder);
  }
  
  result = (bool)(arg1)->GetStopped();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Encoder_GetDirection(lua_State* L) {
  int SWIG_arg = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  bool result;
  
  SWIG_check_num_args("Encoder::GetDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::GetDirection",1,"Encoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Encoder,0))){
    SWIG_fail_ptr("Encoder_GetDirection",1,SWIGTYPE_p_Encoder);
  }
  
  result = (bool)(arg1)->GetDirection();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Encoder_GetDistance(lua_State* L) {
  int SWIG_arg = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  double result;
  
  SWIG_check_num_args("Encoder::GetDistance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::GetDistance",1,"Encoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Encoder,0))){
    SWIG_fail_ptr("Encoder_GetDistance",1,SWIGTYPE_p_Encoder);
  }
  
  result = (double)(arg1)->GetDistance();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Encoder_GetRate(lua_State* L) {
  int SWIG_arg = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  double result;
  
  SWIG_check_num_args("Encoder::GetRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::GetRate",1,"Encoder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Encoder,0))){
    SWIG_fail_ptr("Encoder_GetRate",1,SWIGTYPE_p_Encoder);
  }
  
  result = (double)(arg1)->GetRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Encoder_SetMinRate(lua_State* L) {
  int SWIG_arg = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Encoder::SetMinRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::SetMinRate",1,"Encoder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Encoder::SetMinRate",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Encoder,0))){
    SWIG_fail_ptr("Encoder_SetMinRate",1,SWIGTYPE_p_Encoder);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->SetMinRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Encoder_SetDistancePerPulse(lua_State* L) {
  int SWIG_arg = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Encoder::SetDistancePerPulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::SetDistancePerPulse",1,"Encoder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Encoder::SetDistancePerPulse",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Encoder,0))){
    SWIG_fail_ptr("Encoder_SetDistancePerPulse",1,SWIGTYPE_p_Encoder);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->SetDistancePerPulse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Encoder_SetReverseDirection(lua_State* L) {
  int SWIG_arg = 0;
  Encoder *arg1 = (Encoder *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Encoder::SetReverseDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Encoder::SetReverseDirection",1,"Encoder *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Encoder::SetReverseDirection",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Encoder,0))){
    SWIG_fail_ptr("Encoder_SetReverseDirection",1,SWIGTYPE_p_Encoder);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetReverseDirection(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Encoder(void *obj) {
Encoder *arg1 = (Encoder *) obj;
delete arg1;
}
static swig_lua_method swig_Encoder_methods[] = {
    {"Start", _wrap_Encoder_Start}, 
    {"Get", _wrap_Encoder_Get}, 
    {"GetRaw", _wrap_Encoder_GetRaw}, 
    {"Reset", _wrap_Encoder_Reset}, 
    {"Stop", _wrap_Encoder_Stop}, 
    {"GetPeriod", _wrap_Encoder_GetPeriod}, 
    {"SetMaxPeriod", _wrap_Encoder_SetMaxPeriod}, 
    {"GetStopped", _wrap_Encoder_GetStopped}, 
    {"GetDirection", _wrap_Encoder_GetDirection}, 
    {"GetDistance", _wrap_Encoder_GetDistance}, 
    {"GetRate", _wrap_Encoder_GetRate}, 
    {"SetMinRate", _wrap_Encoder_SetMinRate}, 
    {"SetDistancePerPulse", _wrap_Encoder_SetDistancePerPulse}, 
    {"SetReverseDirection", _wrap_Encoder_SetReverseDirection}, 
    {0,0}
};
static swig_lua_attribute swig_Encoder_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Encoder_bases[] = {0,0,0};
static const char *swig_Encoder_base_names[] = {"SensorBase *","CounterBase *",0};
static swig_lua_class _wrap_class_Encoder = { "Encoder", &SWIGTYPE_p_Encoder,_wrap_new_Encoder, swig_delete_Encoder, swig_Encoder_methods, swig_Encoder_attributes, swig_Encoder_bases, swig_Encoder_base_names };

static int _wrap_new_GearTooth__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  bool arg3 ;
  GearTooth *result = 0 ;
  
  SWIG_check_num_args("GearTooth::GearTooth",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GearTooth::GearTooth",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GearTooth::GearTooth",2,"UINT32");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("GearTooth::GearTooth",3,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (GearTooth *)new GearTooth(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GearTooth,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GearTooth__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DigitalSource *arg1 = (DigitalSource *) 0 ;
  bool arg2 ;
  GearTooth *result = 0 ;
  
  SWIG_check_num_args("GearTooth::GearTooth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GearTooth::GearTooth",1,"DigitalSource *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("GearTooth::GearTooth",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalSource,0))){
    SWIG_fail_ptr("new_GearTooth",1,SWIGTYPE_p_DigitalSource);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (GearTooth *)new GearTooth(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GearTooth,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GearTooth(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalSource, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_GearTooth__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_GearTooth__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_GearTooth'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GearTooth::GearTooth(UINT32,UINT32,bool)\n"
    "    GearTooth::GearTooth(DigitalSource *,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_GearTooth_EnableDirectionSensing(lua_State* L) {
  int SWIG_arg = 0;
  GearTooth *arg1 = (GearTooth *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("GearTooth::EnableDirectionSensing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GearTooth::EnableDirectionSensing",1,"GearTooth *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("GearTooth::EnableDirectionSensing",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GearTooth,0))){
    SWIG_fail_ptr("GearTooth_EnableDirectionSensing",1,SWIGTYPE_p_GearTooth);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->EnableDirectionSensing(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GearTooth(void *obj) {
GearTooth *arg1 = (GearTooth *) obj;
delete arg1;
}
static swig_lua_method swig_GearTooth_methods[] = {
    {"EnableDirectionSensing", _wrap_GearTooth_EnableDirectionSensing}, 
    {0,0}
};
static swig_lua_attribute swig_GearTooth_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GearTooth_bases[] = {0,0};
static const char *swig_GearTooth_base_names[] = {"Counter *",0};
static swig_lua_class _wrap_class_GearTooth = { "GearTooth", &SWIGTYPE_p_GearTooth,_wrap_new_GearTooth, swig_delete_GearTooth, swig_GearTooth_methods, swig_GearTooth_attributes, swig_GearTooth_bases, swig_GearTooth_base_names };

static int _wrap_new_Gyro__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  Gyro *result = 0 ;
  
  SWIG_check_num_args("Gyro::Gyro",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Gyro::Gyro",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Gyro::Gyro",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (Gyro *)new Gyro(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Gyro,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Gyro__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  Gyro *result = 0 ;
  
  SWIG_check_num_args("Gyro::Gyro",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Gyro::Gyro",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (Gyro *)new Gyro(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Gyro,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Gyro__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AnalogChannel *arg1 = (AnalogChannel *) 0 ;
  Gyro *result = 0 ;
  
  SWIG_check_num_args("Gyro::Gyro",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gyro::Gyro",1,"AnalogChannel *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnalogChannel,0))){
    SWIG_fail_ptr("new_Gyro",1,SWIGTYPE_p_AnalogChannel);
  }
  
  result = (Gyro *)new Gyro(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Gyro,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Gyro(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AnalogChannel, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Gyro__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Gyro__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Gyro__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Gyro'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gyro::Gyro(UINT32,UINT32)\n"
    "    Gyro::Gyro(UINT32)\n"
    "    Gyro::Gyro(AnalogChannel *)\n");
  lua_error(L);return 0;
}


static int _wrap_Gyro_GetAngle(lua_State* L) {
  int SWIG_arg = 0;
  Gyro *arg1 = (Gyro *) 0 ;
  float result;
  
  SWIG_check_num_args("Gyro::GetAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gyro::GetAngle",1,"Gyro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gyro,0))){
    SWIG_fail_ptr("Gyro_GetAngle",1,SWIGTYPE_p_Gyro);
  }
  
  result = (float)(arg1)->GetAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Gyro_SetSensitivity(lua_State* L) {
  int SWIG_arg = 0;
  Gyro *arg1 = (Gyro *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Gyro::SetSensitivity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gyro::SetSensitivity",1,"Gyro *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Gyro::SetSensitivity",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gyro,0))){
    SWIG_fail_ptr("Gyro_SetSensitivity",1,SWIGTYPE_p_Gyro);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetSensitivity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Gyro_Reset(lua_State* L) {
  int SWIG_arg = 0;
  Gyro *arg1 = (Gyro *) 0 ;
  
  SWIG_check_num_args("Gyro::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gyro::Reset",1,"Gyro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gyro,0))){
    SWIG_fail_ptr("Gyro_Reset",1,SWIGTYPE_p_Gyro);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Gyro_PIDGet(lua_State* L) {
  int SWIG_arg = 0;
  Gyro *arg1 = (Gyro *) 0 ;
  double result;
  
  SWIG_check_num_args("Gyro::PIDGet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gyro::PIDGet",1,"Gyro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gyro,0))){
    SWIG_fail_ptr("Gyro_PIDGet",1,SWIGTYPE_p_Gyro);
  }
  
  result = (double)(arg1)->PIDGet();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Gyro(void *obj) {
Gyro *arg1 = (Gyro *) obj;
delete arg1;
}
static swig_lua_method swig_Gyro_methods[] = {
    {"GetAngle", _wrap_Gyro_GetAngle}, 
    {"SetSensitivity", _wrap_Gyro_SetSensitivity}, 
    {"Reset", _wrap_Gyro_Reset}, 
    {"PIDGet", _wrap_Gyro_PIDGet}, 
    {0,0}
};
static swig_lua_attribute swig_Gyro_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Gyro_bases[] = {0,0,0};
static const char *swig_Gyro_base_names[] = {"SensorBase *","PIDSource *",0};
static swig_lua_class _wrap_class_Gyro = { "Gyro", &SWIGTYPE_p_Gyro,_wrap_new_Gyro, swig_delete_Gyro, swig_Gyro_methods, swig_Gyro_attributes, swig_Gyro_bases, swig_Gyro_base_names };

static int _wrap_new_HiTechnicCompass(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  HiTechnicCompass *result = 0 ;
  
  SWIG_check_num_args("HiTechnicCompass::HiTechnicCompass",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("HiTechnicCompass::HiTechnicCompass",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (HiTechnicCompass *)new HiTechnicCompass(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_HiTechnicCompass,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HiTechnicCompass_GetAngle(lua_State* L) {
  int SWIG_arg = 0;
  HiTechnicCompass *arg1 = (HiTechnicCompass *) 0 ;
  float result;
  
  SWIG_check_num_args("HiTechnicCompass::GetAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("HiTechnicCompass::GetAngle",1,"HiTechnicCompass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_HiTechnicCompass,0))){
    SWIG_fail_ptr("HiTechnicCompass_GetAngle",1,SWIGTYPE_p_HiTechnicCompass);
  }
  
  result = (float)(arg1)->GetAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_HiTechnicCompass(void *obj) {
HiTechnicCompass *arg1 = (HiTechnicCompass *) obj;
delete arg1;
}
static swig_lua_method swig_HiTechnicCompass_methods[] = {
    {"GetAngle", _wrap_HiTechnicCompass_GetAngle}, 
    {0,0}
};
static swig_lua_attribute swig_HiTechnicCompass_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_HiTechnicCompass_bases[] = {0,0};
static const char *swig_HiTechnicCompass_base_names[] = {"SensorBase *",0};
static swig_lua_class _wrap_class_HiTechnicCompass = { "HiTechnicCompass", &SWIGTYPE_p_HiTechnicCompass,_wrap_new_HiTechnicCompass, swig_delete_HiTechnicCompass, swig_HiTechnicCompass_methods, swig_HiTechnicCompass_attributes, swig_HiTechnicCompass_bases, swig_HiTechnicCompass_base_names };

static int _wrap_new_Jaguar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  Jaguar *result = 0 ;
  
  SWIG_check_num_args("Jaguar::Jaguar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Jaguar::Jaguar",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (Jaguar *)new Jaguar(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Jaguar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Jaguar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  Jaguar *result = 0 ;
  
  SWIG_check_num_args("Jaguar::Jaguar",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Jaguar::Jaguar",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Jaguar::Jaguar",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (Jaguar *)new Jaguar(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Jaguar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Jaguar(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Jaguar__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Jaguar__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Jaguar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Jaguar::Jaguar(UINT32)\n"
    "    Jaguar::Jaguar(UINT32,UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_Jaguar_Get(lua_State* L) {
  int SWIG_arg = 0;
  Jaguar *arg1 = (Jaguar *) 0 ;
  float result;
  
  SWIG_check_num_args("Jaguar::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Jaguar::Get",1,"Jaguar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Jaguar,0))){
    SWIG_fail_ptr("Jaguar_Get",1,SWIGTYPE_p_Jaguar);
  }
  
  result = (float)(arg1)->Get();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Jaguar_Set(lua_State* L) {
  int SWIG_arg = 0;
  Jaguar *arg1 = (Jaguar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Jaguar::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Jaguar::Set",1,"Jaguar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Jaguar::Set",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Jaguar,0))){
    SWIG_fail_ptr("Jaguar_Set",1,SWIGTYPE_p_Jaguar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Jaguar_PIDWrite(lua_State* L) {
  int SWIG_arg = 0;
  Jaguar *arg1 = (Jaguar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Jaguar::PIDWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Jaguar::PIDWrite",1,"Jaguar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Jaguar::PIDWrite",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Jaguar,0))){
    SWIG_fail_ptr("Jaguar_PIDWrite",1,SWIGTYPE_p_Jaguar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->PIDWrite(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Jaguar(void *obj) {
Jaguar *arg1 = (Jaguar *) obj;
delete arg1;
}
static swig_lua_method swig_Jaguar_methods[] = {
    {"Get", _wrap_Jaguar_Get}, 
    {"Set", _wrap_Jaguar_Set}, 
    {"PIDWrite", _wrap_Jaguar_PIDWrite}, 
    {0,0}
};
static swig_lua_attribute swig_Jaguar_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Jaguar_bases[] = {0,0,0,0};
static const char *swig_Jaguar_base_names[] = {"SafePWM *","SpeedController *","PIDOutput *",0};
static swig_lua_class _wrap_class_Jaguar = { "Jaguar", &SWIGTYPE_p_Jaguar,_wrap_new_Jaguar, swig_delete_Jaguar, swig_Jaguar_methods, swig_Jaguar_attributes, swig_Jaguar_bases, swig_Jaguar_base_names };

static int _wrap_new_Joystick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  Joystick *result = 0 ;
  
  SWIG_check_num_args("Joystick::Joystick",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Joystick::Joystick",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (Joystick *)new Joystick(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Joystick,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Joystick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  Joystick *result = 0 ;
  
  SWIG_check_num_args("Joystick::Joystick",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Joystick::Joystick",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Joystick::Joystick",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Joystick::Joystick",3,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  result = (Joystick *)new Joystick(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Joystick,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Joystick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Joystick__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Joystick__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Joystick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Joystick::Joystick(UINT32)\n"
    "    Joystick::Joystick(UINT32,UINT32,UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_Joystick_GetAxisChannel(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  Joystick::AxisType arg2 ;
  UINT32 result;
  
  SWIG_check_num_args("Joystick::GetAxisChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetAxisChannel",1,"Joystick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Joystick::GetAxisChannel",2,"Joystick::AxisType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetAxisChannel",1,SWIGTYPE_p_Joystick);
  }
  
  arg2 = (Joystick::AxisType)(int)lua_tonumber(L, 2);
  result = (UINT32)(arg1)->GetAxisChannel(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_SetAxisChannel(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  Joystick::AxisType arg2 ;
  UINT32 arg3 ;
  
  SWIG_check_num_args("Joystick::SetAxisChannel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::SetAxisChannel",1,"Joystick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Joystick::SetAxisChannel",2,"Joystick::AxisType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Joystick::SetAxisChannel",3,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_SetAxisChannel",1,SWIGTYPE_p_Joystick);
  }
  
  arg2 = (Joystick::AxisType)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  (arg1)->SetAxisChannel(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetX__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  GenericHID::JoystickHand arg2 ;
  float result;
  
  SWIG_check_num_args("Joystick::GetX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetX",1,"Joystick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Joystick::GetX",2,"GenericHID::JoystickHand");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetX",1,SWIGTYPE_p_Joystick);
  }
  
  arg2 = (GenericHID::JoystickHand)(int)lua_tonumber(L, 2);
  result = (float)(arg1)->GetX(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetX__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  float result;
  
  SWIG_check_num_args("Joystick::GetX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetX",1,"Joystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetX",1,SWIGTYPE_p_Joystick);
  }
  
  result = (float)(arg1)->GetX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetX(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Joystick, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Joystick_GetX__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Joystick, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Joystick_GetX__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Joystick_GetX'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Joystick::GetX(GenericHID::JoystickHand)\n"
    "    Joystick::GetX()\n");
  lua_error(L);return 0;
}


static int _wrap_Joystick_GetY__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  GenericHID::JoystickHand arg2 ;
  float result;
  
  SWIG_check_num_args("Joystick::GetY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetY",1,"Joystick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Joystick::GetY",2,"GenericHID::JoystickHand");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetY",1,SWIGTYPE_p_Joystick);
  }
  
  arg2 = (GenericHID::JoystickHand)(int)lua_tonumber(L, 2);
  result = (float)(arg1)->GetY(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetY__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  float result;
  
  SWIG_check_num_args("Joystick::GetY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetY",1,"Joystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetY",1,SWIGTYPE_p_Joystick);
  }
  
  result = (float)(arg1)->GetY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetY(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Joystick, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Joystick_GetY__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Joystick, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Joystick_GetY__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Joystick_GetY'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Joystick::GetY(GenericHID::JoystickHand)\n"
    "    Joystick::GetY()\n");
  lua_error(L);return 0;
}


static int _wrap_Joystick_GetZ(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  float result;
  
  SWIG_check_num_args("Joystick::GetZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetZ",1,"Joystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetZ",1,SWIGTYPE_p_Joystick);
  }
  
  result = (float)(arg1)->GetZ();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetTwist(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  float result;
  
  SWIG_check_num_args("Joystick::GetTwist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetTwist",1,"Joystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetTwist",1,SWIGTYPE_p_Joystick);
  }
  
  result = (float)(arg1)->GetTwist();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetThrottle(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  float result;
  
  SWIG_check_num_args("Joystick::GetThrottle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetThrottle",1,"Joystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetThrottle",1,SWIGTYPE_p_Joystick);
  }
  
  result = (float)(arg1)->GetThrottle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetAxis(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  Joystick::AxisType arg2 ;
  float result;
  
  SWIG_check_num_args("Joystick::GetAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetAxis",1,"Joystick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Joystick::GetAxis",2,"Joystick::AxisType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetAxis",1,SWIGTYPE_p_Joystick);
  }
  
  arg2 = (Joystick::AxisType)(int)lua_tonumber(L, 2);
  result = (float)(arg1)->GetAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetRawAxis(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  UINT32 arg2 ;
  float result;
  
  SWIG_check_num_args("Joystick::GetRawAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetRawAxis",1,"Joystick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Joystick::GetRawAxis",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetRawAxis",1,SWIGTYPE_p_Joystick);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (float)(arg1)->GetRawAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetTrigger__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  GenericHID::JoystickHand arg2 ;
  bool result;
  
  SWIG_check_num_args("Joystick::GetTrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetTrigger",1,"Joystick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Joystick::GetTrigger",2,"GenericHID::JoystickHand");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetTrigger",1,SWIGTYPE_p_Joystick);
  }
  
  arg2 = (GenericHID::JoystickHand)(int)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetTrigger(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetTrigger__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  bool result;
  
  SWIG_check_num_args("Joystick::GetTrigger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetTrigger",1,"Joystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetTrigger",1,SWIGTYPE_p_Joystick);
  }
  
  result = (bool)(arg1)->GetTrigger();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetTrigger(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Joystick, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Joystick_GetTrigger__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Joystick, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Joystick_GetTrigger__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Joystick_GetTrigger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Joystick::GetTrigger(GenericHID::JoystickHand)\n"
    "    Joystick::GetTrigger()\n");
  lua_error(L);return 0;
}


static int _wrap_Joystick_GetTop__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  GenericHID::JoystickHand arg2 ;
  bool result;
  
  SWIG_check_num_args("Joystick::GetTop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetTop",1,"Joystick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Joystick::GetTop",2,"GenericHID::JoystickHand");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetTop",1,SWIGTYPE_p_Joystick);
  }
  
  arg2 = (GenericHID::JoystickHand)(int)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetTop(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetTop__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  bool result;
  
  SWIG_check_num_args("Joystick::GetTop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetTop",1,"Joystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetTop",1,SWIGTYPE_p_Joystick);
  }
  
  result = (bool)(arg1)->GetTop();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetTop(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Joystick, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Joystick_GetTop__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Joystick, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Joystick_GetTop__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Joystick_GetTop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Joystick::GetTop(GenericHID::JoystickHand)\n"
    "    Joystick::GetTop()\n");
  lua_error(L);return 0;
}


static int _wrap_Joystick_GetBumper__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  GenericHID::JoystickHand arg2 ;
  bool result;
  
  SWIG_check_num_args("Joystick::GetBumper",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetBumper",1,"Joystick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Joystick::GetBumper",2,"GenericHID::JoystickHand");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetBumper",1,SWIGTYPE_p_Joystick);
  }
  
  arg2 = (GenericHID::JoystickHand)(int)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetBumper(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetBumper__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  bool result;
  
  SWIG_check_num_args("Joystick::GetBumper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetBumper",1,"Joystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetBumper",1,SWIGTYPE_p_Joystick);
  }
  
  result = (bool)(arg1)->GetBumper();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetBumper(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Joystick, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Joystick_GetBumper__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Joystick, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Joystick_GetBumper__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Joystick_GetBumper'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Joystick::GetBumper(GenericHID::JoystickHand)\n"
    "    Joystick::GetBumper()\n");
  lua_error(L);return 0;
}


static int _wrap_Joystick_GetButton(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  Joystick::ButtonType arg2 ;
  bool result;
  
  SWIG_check_num_args("Joystick::GetButton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetButton",1,"Joystick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Joystick::GetButton",2,"Joystick::ButtonType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetButton",1,SWIGTYPE_p_Joystick);
  }
  
  arg2 = (Joystick::ButtonType)(int)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetButton(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetRawButton(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  UINT32 arg2 ;
  bool result;
  
  SWIG_check_num_args("Joystick::GetRawButton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetRawButton",1,"Joystick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Joystick::GetRawButton",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetRawButton",1,SWIGTYPE_p_Joystick);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (bool)(arg1)->GetRawButton(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetStickForPort(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  Joystick *result = 0 ;
  
  SWIG_check_num_args("Joystick::GetStickForPort",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Joystick::GetStickForPort",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (Joystick *)Joystick::GetStickForPort(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Joystick,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  float result;
  
  SWIG_check_num_args("Joystick::GetMagnitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetMagnitude",1,"Joystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetMagnitude",1,SWIGTYPE_p_Joystick);
  }
  
  result = (float)(arg1)->GetMagnitude();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetDirectionRadians(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  float result;
  
  SWIG_check_num_args("Joystick::GetDirectionRadians",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetDirectionRadians",1,"Joystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetDirectionRadians",1,SWIGTYPE_p_Joystick);
  }
  
  result = (float)(arg1)->GetDirectionRadians();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Joystick_GetDirectionDegrees(lua_State* L) {
  int SWIG_arg = 0;
  Joystick *arg1 = (Joystick *) 0 ;
  float result;
  
  SWIG_check_num_args("Joystick::GetDirectionDegrees",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Joystick::GetDirectionDegrees",1,"Joystick *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Joystick,0))){
    SWIG_fail_ptr("Joystick_GetDirectionDegrees",1,SWIGTYPE_p_Joystick);
  }
  
  result = (float)(arg1)->GetDirectionDegrees();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Joystick(void *obj) {
Joystick *arg1 = (Joystick *) obj;
delete arg1;
}
static swig_lua_method swig_Joystick_methods[] = {
    {"GetAxisChannel", _wrap_Joystick_GetAxisChannel}, 
    {"SetAxisChannel", _wrap_Joystick_SetAxisChannel}, 
    {"GetX", _wrap_Joystick_GetX}, 
    {"GetY", _wrap_Joystick_GetY}, 
    {"GetZ", _wrap_Joystick_GetZ}, 
    {"GetTwist", _wrap_Joystick_GetTwist}, 
    {"GetThrottle", _wrap_Joystick_GetThrottle}, 
    {"GetAxis", _wrap_Joystick_GetAxis}, 
    {"GetRawAxis", _wrap_Joystick_GetRawAxis}, 
    {"GetTrigger", _wrap_Joystick_GetTrigger}, 
    {"GetTop", _wrap_Joystick_GetTop}, 
    {"GetBumper", _wrap_Joystick_GetBumper}, 
    {"GetButton", _wrap_Joystick_GetButton}, 
    {"GetRawButton", _wrap_Joystick_GetRawButton}, 
    {"GetMagnitude", _wrap_Joystick_GetMagnitude}, 
    {"GetDirectionRadians", _wrap_Joystick_GetDirectionRadians}, 
    {"GetDirectionDegrees", _wrap_Joystick_GetDirectionDegrees}, 
    {0,0}
};
static swig_lua_attribute swig_Joystick_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Joystick_bases[] = {0,0};
static const char *swig_Joystick_base_names[] = {"GenericHID *",0};
static swig_lua_class _wrap_class_Joystick = { "Joystick", &SWIGTYPE_p_Joystick,_wrap_new_Joystick, swig_delete_Joystick, swig_Joystick_methods, swig_Joystick_attributes, swig_Joystick_bases, swig_Joystick_base_names };

static int _wrap_LiveWindow_GetInstance(lua_State* L) {
  int SWIG_arg = 0;
  LiveWindow *result = 0 ;
  
  SWIG_check_num_args("LiveWindow::GetInstance",0,0)
  result = (LiveWindow *)LiveWindow::GetInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LiveWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LiveWindow_Run(lua_State* L) {
  int SWIG_arg = 0;
  LiveWindow *arg1 = (LiveWindow *) 0 ;
  
  SWIG_check_num_args("LiveWindow::Run",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LiveWindow::Run",1,"LiveWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LiveWindow,0))){
    SWIG_fail_ptr("LiveWindow_Run",1,SWIGTYPE_p_LiveWindow);
  }
  
  (arg1)->Run();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LiveWindow_IsEnabled(lua_State* L) {
  int SWIG_arg = 0;
  LiveWindow *arg1 = (LiveWindow *) 0 ;
  bool result;
  
  SWIG_check_num_args("LiveWindow::IsEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LiveWindow::IsEnabled",1,"LiveWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LiveWindow,0))){
    SWIG_fail_ptr("LiveWindow_IsEnabled",1,SWIGTYPE_p_LiveWindow);
  }
  
  result = (bool)(arg1)->IsEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LiveWindow_SetEnabled(lua_State* L) {
  int SWIG_arg = 0;
  LiveWindow *arg1 = (LiveWindow *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("LiveWindow::SetEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LiveWindow::SetEnabled",1,"LiveWindow *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("LiveWindow::SetEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LiveWindow,0))){
    SWIG_fail_ptr("LiveWindow_SetEnabled",1,SWIGTYPE_p_LiveWindow);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_LiveWindow_methods[] = {
    {"Run", _wrap_LiveWindow_Run}, 
    {"IsEnabled", _wrap_LiveWindow_IsEnabled}, 
    {"SetEnabled", _wrap_LiveWindow_SetEnabled}, 
    {0,0}
};
static swig_lua_attribute swig_LiveWindow_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LiveWindow_bases[] = {0};
static const char *swig_LiveWindow_base_names[] = {0};
static swig_lua_class _wrap_class_LiveWindow = { "LiveWindow", &SWIGTYPE_p_LiveWindow,0,0, swig_LiveWindow_methods, swig_LiveWindow_attributes, swig_LiveWindow_bases, swig_LiveWindow_base_names };

static int _wrap_NetworkTable_PATH_SEPARATOR_CHAR_get(lua_State* L) {
  int SWIG_arg = 0;
  char result;
  
  SWIG_check_num_args("NetworkTable::PATH_SEPARATOR_CHAR",0,0)
  result = (char)(char)NetworkTable::PATH_SEPARATOR_CHAR;
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_PATH_SEPARATOR_get(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("NetworkTable::PATH_SEPARATOR",0,0)
  result = (std::string *) &NetworkTable::PATH_SEPARATOR;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_DEFAULT_PORT_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("NetworkTable::DEFAULT_PORT",0,0)
  result = (int)(int)NetworkTable::DEFAULT_PORT;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("NetworkTable::Initialize",0,0)
  NetworkTable::Initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_SetServerMode(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("NetworkTable::SetServerMode",0,0)
  NetworkTable::SetServerMode();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_SetTeam(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("NetworkTable::SetTeam",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("NetworkTable::SetTeam",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  NetworkTable::SetTeam(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_SetIPAddress(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("NetworkTable::SetIPAddress",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("NetworkTable::SetIPAddress",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  NetworkTable::SetIPAddress((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_GetTable(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  NetworkTable *result = 0 ;
  
  SWIG_check_num_args("NetworkTable::GetTable",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("NetworkTable::GetTable",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  result = (NetworkTable *)NetworkTable::GetTable(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NetworkTable,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkTable(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  NetworkTableProvider *arg2 = 0 ;
  NetworkTable *result = 0 ;
  
  SWIG_check_num_args("NetworkTable::NetworkTable",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("NetworkTable::NetworkTable",1,"std::string");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NetworkTable::NetworkTable",2,"NetworkTableProvider &");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NetworkTableProvider,0))){
    SWIG_fail_ptr("new_NetworkTable",2,SWIGTYPE_p_NetworkTableProvider);
  }
  
  result = (NetworkTable *)new NetworkTable(arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NetworkTable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_IsConnected(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  bool result;
  
  SWIG_check_num_args("NetworkTable::IsConnected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::IsConnected",1,"NetworkTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_IsConnected",1,SWIGTYPE_p_NetworkTable);
  }
  
  result = (bool)(arg1)->IsConnected();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_IsServer(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  bool result;
  
  SWIG_check_num_args("NetworkTable::IsServer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::IsServer",1,"NetworkTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_IsServer",1,SWIGTYPE_p_NetworkTable);
  }
  
  result = (bool)(arg1)->IsServer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_AddConnectionListener(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  IRemoteConnectionListener *arg2 = (IRemoteConnectionListener *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("NetworkTable::AddConnectionListener",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::AddConnectionListener",1,"NetworkTable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NetworkTable::AddConnectionListener",2,"IRemoteConnectionListener *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("NetworkTable::AddConnectionListener",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_AddConnectionListener",1,SWIGTYPE_p_NetworkTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IRemoteConnectionListener,0))){
    SWIG_fail_ptr("NetworkTable_AddConnectionListener",2,SWIGTYPE_p_IRemoteConnectionListener);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->AddConnectionListener(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_RemoveConnectionListener(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  IRemoteConnectionListener *arg2 = (IRemoteConnectionListener *) 0 ;
  
  SWIG_check_num_args("NetworkTable::RemoveConnectionListener",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::RemoveConnectionListener",1,"NetworkTable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NetworkTable::RemoveConnectionListener",2,"IRemoteConnectionListener *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_RemoveConnectionListener",1,SWIGTYPE_p_NetworkTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IRemoteConnectionListener,0))){
    SWIG_fail_ptr("NetworkTable_RemoveConnectionListener",2,SWIGTYPE_p_IRemoteConnectionListener);
  }
  
  (arg1)->RemoveConnectionListener(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_AddTableListener__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  ITableListener *arg2 = (ITableListener *) 0 ;
  
  SWIG_check_num_args("NetworkTable::AddTableListener",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::AddTableListener",1,"NetworkTable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NetworkTable::AddTableListener",2,"ITableListener *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_AddTableListener",1,SWIGTYPE_p_NetworkTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ITableListener,0))){
    SWIG_fail_ptr("NetworkTable_AddTableListener",2,SWIGTYPE_p_ITableListener);
  }
  
  (arg1)->AddTableListener(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_AddTableListener__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  ITableListener *arg2 = (ITableListener *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("NetworkTable::AddTableListener",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::AddTableListener",1,"NetworkTable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NetworkTable::AddTableListener",2,"ITableListener *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("NetworkTable::AddTableListener",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_AddTableListener",1,SWIGTYPE_p_NetworkTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ITableListener,0))){
    SWIG_fail_ptr("NetworkTable_AddTableListener",2,SWIGTYPE_p_ITableListener);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->AddTableListener(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_AddTableListener__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  ITableListener *arg3 = (ITableListener *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("NetworkTable::AddTableListener",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::AddTableListener",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::AddTableListener",2,"std::string");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("NetworkTable::AddTableListener",3,"ITableListener *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("NetworkTable::AddTableListener",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_AddTableListener",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ITableListener,0))){
    SWIG_fail_ptr("NetworkTable_AddTableListener",3,SWIGTYPE_p_ITableListener);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->AddTableListener(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_AddTableListener(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ITableListener, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NetworkTable_AddTableListener__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ITableListener, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkTable_AddTableListener__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ITableListener, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkTable_AddTableListener__SWIG_2(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NetworkTable_AddTableListener'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkTable::AddTableListener(ITableListener *)\n"
    "    NetworkTable::AddTableListener(ITableListener *,bool)\n"
    "    NetworkTable::AddTableListener(std::string,ITableListener *,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkTable_AddSubTableListener(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  ITableListener *arg2 = (ITableListener *) 0 ;
  
  SWIG_check_num_args("NetworkTable::AddSubTableListener",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::AddSubTableListener",1,"NetworkTable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NetworkTable::AddSubTableListener",2,"ITableListener *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_AddSubTableListener",1,SWIGTYPE_p_NetworkTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ITableListener,0))){
    SWIG_fail_ptr("NetworkTable_AddSubTableListener",2,SWIGTYPE_p_ITableListener);
  }
  
  (arg1)->AddSubTableListener(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_RemoveTableListener(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  ITableListener *arg2 = (ITableListener *) 0 ;
  
  SWIG_check_num_args("NetworkTable::RemoveTableListener",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::RemoveTableListener",1,"NetworkTable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NetworkTable::RemoveTableListener",2,"ITableListener *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_RemoveTableListener",1,SWIGTYPE_p_NetworkTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ITableListener,0))){
    SWIG_fail_ptr("NetworkTable_RemoveTableListener",2,SWIGTYPE_p_ITableListener);
  }
  
  (arg1)->RemoveTableListener(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_GetSubTable(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  NetworkTable *result = 0 ;
  
  SWIG_check_num_args("NetworkTable::GetSubTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::GetSubTable",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::GetSubTable",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_GetSubTable",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (NetworkTable *)(arg1)->GetSubTable(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NetworkTable,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_ContainsKey(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  bool result;
  
  SWIG_check_num_args("NetworkTable::ContainsKey",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::ContainsKey",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::ContainsKey",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_ContainsKey",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->ContainsKey(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_ContainsSubTable(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  bool result;
  
  SWIG_check_num_args("NetworkTable::ContainsSubTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::ContainsSubTable",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::ContainsSubTable",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_ContainsSubTable",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->ContainsSubTable(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_PutNumber(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("NetworkTable::PutNumber",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::PutNumber",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::PutNumber",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkTable::PutNumber",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_PutNumber",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->PutNumber(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_GetNumber__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  double result;
  
  SWIG_check_num_args("NetworkTable::GetNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::GetNumber",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::GetNumber",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_GetNumber",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (double)(arg1)->GetNumber(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_GetNumber__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("NetworkTable::GetNumber",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::GetNumber",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::GetNumber",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkTable::GetNumber",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_GetNumber",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->GetNumber(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_GetNumber(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NetworkTable_GetNumber__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkTable_GetNumber__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NetworkTable_GetNumber'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkTable::GetNumber(std::string)\n"
    "    NetworkTable::GetNumber(std::string,double)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkTable_PutString(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  SWIG_check_num_args("NetworkTable::PutString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::PutString",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::PutString",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("NetworkTable::PutString",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_PutString",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  (arg1)->PutString(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_GetString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  std::string result;
  
  SWIG_check_num_args("NetworkTable::GetString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::GetString",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::GetString",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_GetString",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (arg1)->GetString(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_GetString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  SWIG_check_num_args("NetworkTable::GetString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::GetString",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::GetString",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("NetworkTable::GetString",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_GetString",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  result = (arg1)->GetString(arg2,arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_GetString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NetworkTable_GetString__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkTable_GetString__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NetworkTable_GetString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkTable::GetString(std::string)\n"
    "    NetworkTable::GetString(std::string,std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkTable_PutBoolean(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("NetworkTable::PutBoolean",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::PutBoolean",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::PutBoolean",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("NetworkTable::PutBoolean",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_PutBoolean",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->PutBoolean(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_GetBoolean__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  bool result;
  
  SWIG_check_num_args("NetworkTable::GetBoolean",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::GetBoolean",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::GetBoolean",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_GetBoolean",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->GetBoolean(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_GetBoolean__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("NetworkTable::GetBoolean",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::GetBoolean",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::GetBoolean",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("NetworkTable::GetBoolean",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_GetBoolean",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->GetBoolean(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_GetBoolean(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NetworkTable_GetBoolean__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkTable_GetBoolean__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NetworkTable_GetBoolean'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkTable::GetBoolean(std::string)\n"
    "    NetworkTable::GetBoolean(std::string,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkTable_PutValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  NetworkTableEntryType *arg3 = (NetworkTableEntryType *) 0 ;
  EntryValue arg4 ;
  EntryValue *argp4 ;
  
  SWIG_check_num_args("NetworkTable::PutValue",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::PutValue",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::PutValue",2,"std::string");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("NetworkTable::PutValue",3,"NetworkTableEntryType *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("NetworkTable::PutValue",4,"EntryValue");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_PutValue",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_NetworkTableEntryType,0))){
    SWIG_fail_ptr("NetworkTable_PutValue",3,SWIGTYPE_p_NetworkTableEntryType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_EntryValue,0))){
    SWIG_fail_ptr("NetworkTable_PutValue",4,SWIGTYPE_p_EntryValue);
  }
  arg4 = *argp4;
  
  (arg1)->PutValue(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_RetrieveValue(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  ComplexData *arg3 = 0 ;
  
  SWIG_check_num_args("NetworkTable::RetrieveValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::RetrieveValue",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::RetrieveValue",2,"std::string");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("NetworkTable::RetrieveValue",3,"ComplexData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_RetrieveValue",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexData,0))){
    SWIG_fail_ptr("NetworkTable_RetrieveValue",3,SWIGTYPE_p_ComplexData);
  }
  
  (arg1)->RetrieveValue(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_PutValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  ComplexData *arg3 = 0 ;
  
  SWIG_check_num_args("NetworkTable::PutValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::PutValue",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::PutValue",2,"std::string");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("NetworkTable::PutValue",3,"ComplexData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_PutValue",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexData,0))){
    SWIG_fail_ptr("NetworkTable_PutValue",3,SWIGTYPE_p_ComplexData);
  }
  
  (arg1)->PutValue(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_PutValue(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexData, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NetworkTable_PutValue__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_NetworkTableEntryType, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_EntryValue, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_NetworkTable_PutValue__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NetworkTable_PutValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkTable::PutValue(std::string,NetworkTableEntryType *,EntryValue)\n"
    "    NetworkTable::PutValue(std::string,ComplexData &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkTable_GetValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  EntryValue result;
  
  SWIG_check_num_args("NetworkTable::GetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::GetValue",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::GetValue",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_GetValue",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (arg1)->GetValue(arg2);
  {
    EntryValue * resultptr = new EntryValue((const EntryValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_EntryValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_GetValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkTable *arg1 = (NetworkTable *) 0 ;
  std::string arg2 ;
  EntryValue arg3 ;
  EntryValue *argp3 ;
  EntryValue result;
  
  SWIG_check_num_args("NetworkTable::GetValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkTable::GetValue",1,"NetworkTable *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkTable::GetValue",2,"std::string");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("NetworkTable::GetValue",3,"EntryValue");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkTable,0))){
    SWIG_fail_ptr("NetworkTable_GetValue",1,SWIGTYPE_p_NetworkTable);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_EntryValue,0))){
    SWIG_fail_ptr("NetworkTable_GetValue",3,SWIGTYPE_p_EntryValue);
  }
  arg3 = *argp3;
  
  result = (arg1)->GetValue(arg2,arg3);
  {
    EntryValue * resultptr = new EntryValue((const EntryValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_EntryValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkTable_GetValue(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NetworkTable_GetValue__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_EntryValue, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NetworkTable_GetValue__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'NetworkTable_GetValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkTable::GetValue(std::string)\n"
    "    NetworkTable::GetValue(std::string,EntryValue)\n");
  lua_error(L);return 0;
}


static void swig_delete_NetworkTable(void *obj) {
NetworkTable *arg1 = (NetworkTable *) obj;
delete arg1;
}
static swig_lua_method swig_NetworkTable_methods[] = {
    {"IsConnected", _wrap_NetworkTable_IsConnected}, 
    {"IsServer", _wrap_NetworkTable_IsServer}, 
    {"AddConnectionListener", _wrap_NetworkTable_AddConnectionListener}, 
    {"RemoveConnectionListener", _wrap_NetworkTable_RemoveConnectionListener}, 
    {"AddTableListener", _wrap_NetworkTable_AddTableListener}, 
    {"AddSubTableListener", _wrap_NetworkTable_AddSubTableListener}, 
    {"RemoveTableListener", _wrap_NetworkTable_RemoveTableListener}, 
    {"GetSubTable", _wrap_NetworkTable_GetSubTable}, 
    {"ContainsKey", _wrap_NetworkTable_ContainsKey}, 
    {"ContainsSubTable", _wrap_NetworkTable_ContainsSubTable}, 
    {"PutNumber", _wrap_NetworkTable_PutNumber}, 
    {"GetNumber", _wrap_NetworkTable_GetNumber}, 
    {"PutString", _wrap_NetworkTable_PutString}, 
    {"GetString", _wrap_NetworkTable_GetString}, 
    {"PutBoolean", _wrap_NetworkTable_PutBoolean}, 
    {"GetBoolean", _wrap_NetworkTable_GetBoolean}, 
    {"RetrieveValue", _wrap_NetworkTable_RetrieveValue}, 
    {"PutValue", _wrap_NetworkTable_PutValue}, 
    {"GetValue", _wrap_NetworkTable_GetValue}, 
    {0,0}
};
static swig_lua_attribute swig_NetworkTable_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_NetworkTable_bases[] = {0,0};
static const char *swig_NetworkTable_base_names[] = {"ErrorBase *",0};
static swig_lua_class _wrap_class_NetworkTable = { "NetworkTable", &SWIGTYPE_p_NetworkTable,_wrap_new_NetworkTable, swig_delete_NetworkTable, swig_NetworkTable_methods, swig_NetworkTable_attributes, swig_NetworkTable_bases, swig_NetworkTable_base_names };

static int _wrap_new_PIDController__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  PIDSource *arg4 = (PIDSource *) 0 ;
  PIDOutput *arg5 = (PIDOutput *) 0 ;
  float arg6 ;
  PIDController *result = 0 ;
  
  SWIG_check_num_args("PIDController::PIDController",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PIDController::PIDController",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PIDController::PIDController",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("PIDController::PIDController",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("PIDController::PIDController",4,"PIDSource *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("PIDController::PIDController",5,"PIDOutput *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("PIDController::PIDController",6,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_PIDSource,0))){
    SWIG_fail_ptr("new_PIDController",4,SWIGTYPE_p_PIDSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_PIDOutput,0))){
    SWIG_fail_ptr("new_PIDController",5,SWIGTYPE_p_PIDOutput);
  }
  
  arg6 = (float)lua_tonumber(L, 6);
  result = (PIDController *)new PIDController(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PIDController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PIDController__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  PIDSource *arg4 = (PIDSource *) 0 ;
  PIDOutput *arg5 = (PIDOutput *) 0 ;
  PIDController *result = 0 ;
  
  SWIG_check_num_args("PIDController::PIDController",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PIDController::PIDController",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PIDController::PIDController",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("PIDController::PIDController",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("PIDController::PIDController",4,"PIDSource *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("PIDController::PIDController",5,"PIDOutput *");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_PIDSource,0))){
    SWIG_fail_ptr("new_PIDController",4,SWIGTYPE_p_PIDSource);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_PIDOutput,0))){
    SWIG_fail_ptr("new_PIDController",5,SWIGTYPE_p_PIDOutput);
  }
  
  result = (PIDController *)new PIDController(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PIDController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PIDController(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_PIDSource, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_PIDOutput, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_new_PIDController__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_PIDSource, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_PIDOutput, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_PIDController__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_PIDController'\n"
    "  Possible C/C++ prototypes are:\n"
    "    PIDController::PIDController(float,float,float,PIDSource *,PIDOutput *,float)\n"
    "    PIDController::PIDController(float,float,float,PIDSource *,PIDOutput *)\n");
  lua_error(L);return 0;
}


static int _wrap_PIDController_Get(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  float result;
  
  SWIG_check_num_args("PIDController::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::Get",1,"PIDController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_Get",1,SWIGTYPE_p_PIDController);
  }
  
  result = (float)(arg1)->Get();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_SetContinuous__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("PIDController::SetContinuous",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::SetContinuous",1,"PIDController *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("PIDController::SetContinuous",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_SetContinuous",1,SWIGTYPE_p_PIDController);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetContinuous(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_SetContinuous__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  
  SWIG_check_num_args("PIDController::SetContinuous",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::SetContinuous",1,"PIDController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_SetContinuous",1,SWIGTYPE_p_PIDController);
  }
  
  (arg1)->SetContinuous();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_SetContinuous(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_PIDController, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PIDController_SetContinuous__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_PIDController, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_PIDController_SetContinuous__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'PIDController_SetContinuous'\n"
    "  Possible C/C++ prototypes are:\n"
    "    PIDController::SetContinuous(bool)\n"
    "    PIDController::SetContinuous()\n");
  lua_error(L);return 0;
}


static int _wrap_PIDController_SetInputRange(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("PIDController::SetInputRange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::SetInputRange",1,"PIDController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PIDController::SetInputRange",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("PIDController::SetInputRange",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_SetInputRange",1,SWIGTYPE_p_PIDController);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->SetInputRange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_SetOutputRange(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("PIDController::SetOutputRange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::SetOutputRange",1,"PIDController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PIDController::SetOutputRange",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("PIDController::SetOutputRange",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_SetOutputRange",1,SWIGTYPE_p_PIDController);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->SetOutputRange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_SetPID(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("PIDController::SetPID",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::SetPID",1,"PIDController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PIDController::SetPID",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("PIDController::SetPID",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("PIDController::SetPID",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_SetPID",1,SWIGTYPE_p_PIDController);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->SetPID(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_GetP(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  float result;
  
  SWIG_check_num_args("PIDController::GetP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::GetP",1,"PIDController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_GetP",1,SWIGTYPE_p_PIDController);
  }
  
  result = (float)(arg1)->GetP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_GetI(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  float result;
  
  SWIG_check_num_args("PIDController::GetI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::GetI",1,"PIDController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_GetI",1,SWIGTYPE_p_PIDController);
  }
  
  result = (float)(arg1)->GetI();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_GetD(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  float result;
  
  SWIG_check_num_args("PIDController::GetD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::GetD",1,"PIDController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_GetD",1,SWIGTYPE_p_PIDController);
  }
  
  result = (float)(arg1)->GetD();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_SetSetpoint(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("PIDController::SetSetpoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::SetSetpoint",1,"PIDController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PIDController::SetSetpoint",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_SetSetpoint",1,SWIGTYPE_p_PIDController);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetSetpoint(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_GetSetpoint(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  float result;
  
  SWIG_check_num_args("PIDController::GetSetpoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::GetSetpoint",1,"PIDController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_GetSetpoint",1,SWIGTYPE_p_PIDController);
  }
  
  result = (float)(arg1)->GetSetpoint();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_GetError(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  float result;
  
  SWIG_check_num_args("PIDController::GetError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::GetError",1,"PIDController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_GetError",1,SWIGTYPE_p_PIDController);
  }
  
  result = (float)(arg1)->GetError();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_SetTolerance(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("PIDController::SetTolerance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::SetTolerance",1,"PIDController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PIDController::SetTolerance",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_SetTolerance",1,SWIGTYPE_p_PIDController);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetTolerance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_OnTarget(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  bool result;
  
  SWIG_check_num_args("PIDController::OnTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::OnTarget",1,"PIDController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_OnTarget",1,SWIGTYPE_p_PIDController);
  }
  
  result = (bool)(arg1)->OnTarget();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_Enable(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  
  SWIG_check_num_args("PIDController::Enable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::Enable",1,"PIDController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_Enable",1,SWIGTYPE_p_PIDController);
  }
  
  (arg1)->Enable();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_Disable(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  
  SWIG_check_num_args("PIDController::Disable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::Disable",1,"PIDController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_Disable",1,SWIGTYPE_p_PIDController);
  }
  
  (arg1)->Disable();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PIDController_Reset(lua_State* L) {
  int SWIG_arg = 0;
  PIDController *arg1 = (PIDController *) 0 ;
  
  SWIG_check_num_args("PIDController::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PIDController::Reset",1,"PIDController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PIDController,0))){
    SWIG_fail_ptr("PIDController_Reset",1,SWIGTYPE_p_PIDController);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PIDController(void *obj) {
PIDController *arg1 = (PIDController *) obj;
delete arg1;
}
static swig_lua_method swig_PIDController_methods[] = {
    {"Get", _wrap_PIDController_Get}, 
    {"SetContinuous", _wrap_PIDController_SetContinuous}, 
    {"SetInputRange", _wrap_PIDController_SetInputRange}, 
    {"SetOutputRange", _wrap_PIDController_SetOutputRange}, 
    {"SetPID", _wrap_PIDController_SetPID}, 
    {"GetP", _wrap_PIDController_GetP}, 
    {"GetI", _wrap_PIDController_GetI}, 
    {"GetD", _wrap_PIDController_GetD}, 
    {"SetSetpoint", _wrap_PIDController_SetSetpoint}, 
    {"GetSetpoint", _wrap_PIDController_GetSetpoint}, 
    {"GetError", _wrap_PIDController_GetError}, 
    {"SetTolerance", _wrap_PIDController_SetTolerance}, 
    {"OnTarget", _wrap_PIDController_OnTarget}, 
    {"Enable", _wrap_PIDController_Enable}, 
    {"Disable", _wrap_PIDController_Disable}, 
    {"Reset", _wrap_PIDController_Reset}, 
    {0,0}
};
static swig_lua_attribute swig_PIDController_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_PIDController_bases[] = {0};
static const char *swig_PIDController_base_names[] = {0};
static swig_lua_class _wrap_class_PIDController = { "PIDController", &SWIGTYPE_p_PIDController,_wrap_new_PIDController, swig_delete_PIDController, swig_PIDController_methods, swig_PIDController_attributes, swig_PIDController_bases, swig_PIDController_base_names };

static int _wrap_new_Relay(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  Relay::Direction arg3 ;
  Relay *result = 0 ;
  
  SWIG_check_num_args("Relay::Relay",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Relay::Relay",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Relay::Relay",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Relay::Relay",3,"Relay::Direction");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (Relay::Direction)(int)lua_tonumber(L, 3);
  result = (Relay *)new Relay(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Relay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Relay_Set(lua_State* L) {
  int SWIG_arg = 0;
  Relay *arg1 = (Relay *) 0 ;
  Relay::Value arg2 ;
  
  SWIG_check_num_args("Relay::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Relay::Set",1,"Relay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Relay::Set",2,"Relay::Value");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Relay,0))){
    SWIG_fail_ptr("Relay_Set",1,SWIGTYPE_p_Relay);
  }
  
  arg2 = (Relay::Value)(int)lua_tonumber(L, 2);
  (arg1)->Set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Relay(void *obj) {
Relay *arg1 = (Relay *) obj;
delete arg1;
}
static swig_lua_method swig_Relay_methods[] = {
    {"Set", _wrap_Relay_Set}, 
    {0,0}
};
static swig_lua_attribute swig_Relay_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Relay_bases[] = {0,0};
static const char *swig_Relay_base_names[] = {"SensorBase *",0};
static swig_lua_class _wrap_class_Relay = { "Relay", &SWIGTYPE_p_Relay,_wrap_new_Relay, swig_delete_Relay, swig_Relay_methods, swig_Relay_attributes, swig_Relay_bases, swig_Relay_base_names };

static int _wrap_new_RobotDrive__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  RobotDrive *result = 0 ;
  
  SWIG_check_num_args("RobotDrive::RobotDrive",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RobotDrive::RobotDrive",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RobotDrive::RobotDrive",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (RobotDrive *)new RobotDrive(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RobotDrive,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RobotDrive__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  UINT32 arg4 ;
  RobotDrive *result = 0 ;
  
  SWIG_check_num_args("RobotDrive::RobotDrive",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RobotDrive::RobotDrive",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RobotDrive::RobotDrive",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RobotDrive::RobotDrive",3,"UINT32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("RobotDrive::RobotDrive",4,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UINT32)lua_tonumber(L, 4);
  result = (RobotDrive *)new RobotDrive(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RobotDrive,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RobotDrive__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SpeedController *arg1 = (SpeedController *) 0 ;
  SpeedController *arg2 = (SpeedController *) 0 ;
  RobotDrive *result = 0 ;
  
  SWIG_check_num_args("RobotDrive::RobotDrive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::RobotDrive",1,"SpeedController *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RobotDrive::RobotDrive",2,"SpeedController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpeedController,0))){
    SWIG_fail_ptr("new_RobotDrive",1,SWIGTYPE_p_SpeedController);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SpeedController,0))){
    SWIG_fail_ptr("new_RobotDrive",2,SWIGTYPE_p_SpeedController);
  }
  
  result = (RobotDrive *)new RobotDrive(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RobotDrive,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RobotDrive__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SpeedController *arg1 = (SpeedController *) 0 ;
  SpeedController *arg2 = (SpeedController *) 0 ;
  SpeedController *arg3 = (SpeedController *) 0 ;
  SpeedController *arg4 = (SpeedController *) 0 ;
  RobotDrive *result = 0 ;
  
  SWIG_check_num_args("RobotDrive::RobotDrive",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::RobotDrive",1,"SpeedController *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RobotDrive::RobotDrive",2,"SpeedController *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("RobotDrive::RobotDrive",3,"SpeedController *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("RobotDrive::RobotDrive",4,"SpeedController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpeedController,0))){
    SWIG_fail_ptr("new_RobotDrive",1,SWIGTYPE_p_SpeedController);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SpeedController,0))){
    SWIG_fail_ptr("new_RobotDrive",2,SWIGTYPE_p_SpeedController);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SpeedController,0))){
    SWIG_fail_ptr("new_RobotDrive",3,SWIGTYPE_p_SpeedController);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SpeedController,0))){
    SWIG_fail_ptr("new_RobotDrive",4,SWIGTYPE_p_SpeedController);
  }
  
  result = (RobotDrive *)new RobotDrive(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RobotDrive,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RobotDrive(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SpeedController, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SpeedController, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_RobotDrive__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RobotDrive__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SpeedController, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SpeedController, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SpeedController, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SpeedController, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_RobotDrive__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_RobotDrive__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_RobotDrive'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RobotDrive::RobotDrive(UINT32,UINT32)\n"
    "    RobotDrive::RobotDrive(UINT32,UINT32,UINT32,UINT32)\n"
    "    RobotDrive::RobotDrive(SpeedController *,SpeedController *)\n"
    "    RobotDrive::RobotDrive(SpeedController *,SpeedController *,SpeedController *,SpeedController *)\n");
  lua_error(L);return 0;
}


static int _wrap_RobotDrive_Drive(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("RobotDrive::Drive",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::Drive",1,"RobotDrive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RobotDrive::Drive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RobotDrive::Drive",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_Drive",1,SWIGTYPE_p_RobotDrive);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->Drive(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_TankDrive__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  GenericHID *arg2 = (GenericHID *) 0 ;
  GenericHID *arg3 = (GenericHID *) 0 ;
  
  SWIG_check_num_args("RobotDrive::TankDrive",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::TankDrive",1,"RobotDrive *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RobotDrive::TankDrive",2,"GenericHID *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("RobotDrive::TankDrive",3,"GenericHID *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_TankDrive",1,SWIGTYPE_p_RobotDrive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("RobotDrive_TankDrive",2,SWIGTYPE_p_GenericHID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("RobotDrive_TankDrive",3,SWIGTYPE_p_GenericHID);
  }
  
  (arg1)->TankDrive(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_TankDrive__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  GenericHID *arg2 = (GenericHID *) 0 ;
  UINT32 arg3 ;
  GenericHID *arg4 = (GenericHID *) 0 ;
  UINT32 arg5 ;
  
  SWIG_check_num_args("RobotDrive::TankDrive",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::TankDrive",1,"RobotDrive *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RobotDrive::TankDrive",2,"GenericHID *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RobotDrive::TankDrive",3,"UINT32");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("RobotDrive::TankDrive",4,"GenericHID *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("RobotDrive::TankDrive",5,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_TankDrive",1,SWIGTYPE_p_RobotDrive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("RobotDrive_TankDrive",2,SWIGTYPE_p_GenericHID);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("RobotDrive_TankDrive",4,SWIGTYPE_p_GenericHID);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UINT32)lua_tonumber(L, 5);
  (arg1)->TankDrive(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_TankDrive__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("RobotDrive::TankDrive",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::TankDrive",1,"RobotDrive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RobotDrive::TankDrive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RobotDrive::TankDrive",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_TankDrive",1,SWIGTYPE_p_RobotDrive);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->TankDrive(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_TankDrive(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RobotDrive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_RobotDrive_TankDrive__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RobotDrive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RobotDrive_TankDrive__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RobotDrive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RobotDrive_TankDrive__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'RobotDrive_TankDrive'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RobotDrive::TankDrive(GenericHID *,GenericHID *)\n"
    "    RobotDrive::TankDrive(GenericHID *,UINT32,GenericHID *,UINT32)\n"
    "    RobotDrive::TankDrive(float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_RobotDrive_ArcadeDrive__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  GenericHID *arg2 = (GenericHID *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("RobotDrive::ArcadeDrive",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::ArcadeDrive",1,"RobotDrive *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RobotDrive::ArcadeDrive",2,"GenericHID *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("RobotDrive::ArcadeDrive",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_ArcadeDrive",1,SWIGTYPE_p_RobotDrive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("RobotDrive_ArcadeDrive",2,SWIGTYPE_p_GenericHID);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->ArcadeDrive(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_ArcadeDrive__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  GenericHID *arg2 = (GenericHID *) 0 ;
  
  SWIG_check_num_args("RobotDrive::ArcadeDrive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::ArcadeDrive",1,"RobotDrive *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RobotDrive::ArcadeDrive",2,"GenericHID *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_ArcadeDrive",1,SWIGTYPE_p_RobotDrive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("RobotDrive_ArcadeDrive",2,SWIGTYPE_p_GenericHID);
  }
  
  (arg1)->ArcadeDrive(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_ArcadeDrive__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  GenericHID *arg2 = (GenericHID *) 0 ;
  UINT32 arg3 ;
  GenericHID *arg4 = (GenericHID *) 0 ;
  UINT32 arg5 ;
  bool arg6 ;
  
  SWIG_check_num_args("RobotDrive::ArcadeDrive",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::ArcadeDrive",1,"RobotDrive *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RobotDrive::ArcadeDrive",2,"GenericHID *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RobotDrive::ArcadeDrive",3,"UINT32");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("RobotDrive::ArcadeDrive",4,"GenericHID *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("RobotDrive::ArcadeDrive",5,"UINT32");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("RobotDrive::ArcadeDrive",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_ArcadeDrive",1,SWIGTYPE_p_RobotDrive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("RobotDrive_ArcadeDrive",2,SWIGTYPE_p_GenericHID);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("RobotDrive_ArcadeDrive",4,SWIGTYPE_p_GenericHID);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UINT32)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->ArcadeDrive(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_ArcadeDrive__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  GenericHID *arg2 = (GenericHID *) 0 ;
  UINT32 arg3 ;
  GenericHID *arg4 = (GenericHID *) 0 ;
  UINT32 arg5 ;
  
  SWIG_check_num_args("RobotDrive::ArcadeDrive",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::ArcadeDrive",1,"RobotDrive *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RobotDrive::ArcadeDrive",2,"GenericHID *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RobotDrive::ArcadeDrive",3,"UINT32");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("RobotDrive::ArcadeDrive",4,"GenericHID *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("RobotDrive::ArcadeDrive",5,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_ArcadeDrive",1,SWIGTYPE_p_RobotDrive);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("RobotDrive_ArcadeDrive",2,SWIGTYPE_p_GenericHID);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_GenericHID,0))){
    SWIG_fail_ptr("RobotDrive_ArcadeDrive",4,SWIGTYPE_p_GenericHID);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (UINT32)lua_tonumber(L, 5);
  (arg1)->ArcadeDrive(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_ArcadeDrive__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("RobotDrive::ArcadeDrive",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::ArcadeDrive",1,"RobotDrive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RobotDrive::ArcadeDrive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RobotDrive::ArcadeDrive",3,"float");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("RobotDrive::ArcadeDrive",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_ArcadeDrive",1,SWIGTYPE_p_RobotDrive);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->ArcadeDrive(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_ArcadeDrive__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("RobotDrive::ArcadeDrive",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::ArcadeDrive",1,"RobotDrive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RobotDrive::ArcadeDrive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RobotDrive::ArcadeDrive",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_ArcadeDrive",1,SWIGTYPE_p_RobotDrive);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->ArcadeDrive(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_ArcadeDrive(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RobotDrive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RobotDrive_ArcadeDrive__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RobotDrive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_RobotDrive_ArcadeDrive__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RobotDrive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RobotDrive_ArcadeDrive__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RobotDrive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_RobotDrive_ArcadeDrive__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RobotDrive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RobotDrive_ArcadeDrive__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RobotDrive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GenericHID, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_RobotDrive_ArcadeDrive__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'RobotDrive_ArcadeDrive'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RobotDrive::ArcadeDrive(GenericHID *,bool)\n"
    "    RobotDrive::ArcadeDrive(GenericHID *)\n"
    "    RobotDrive::ArcadeDrive(GenericHID *,UINT32,GenericHID *,UINT32,bool)\n"
    "    RobotDrive::ArcadeDrive(GenericHID *,UINT32,GenericHID *,UINT32)\n"
    "    RobotDrive::ArcadeDrive(float,float,bool)\n"
    "    RobotDrive::ArcadeDrive(float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_RobotDrive_MecanumDrive_Cartesian__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("RobotDrive::MecanumDrive_Cartesian",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::MecanumDrive_Cartesian",1,"RobotDrive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RobotDrive::MecanumDrive_Cartesian",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RobotDrive::MecanumDrive_Cartesian",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("RobotDrive::MecanumDrive_Cartesian",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("RobotDrive::MecanumDrive_Cartesian",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_MecanumDrive_Cartesian",1,SWIGTYPE_p_RobotDrive);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->MecanumDrive_Cartesian(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_MecanumDrive_Cartesian__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("RobotDrive::MecanumDrive_Cartesian",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::MecanumDrive_Cartesian",1,"RobotDrive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RobotDrive::MecanumDrive_Cartesian",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RobotDrive::MecanumDrive_Cartesian",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("RobotDrive::MecanumDrive_Cartesian",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_MecanumDrive_Cartesian",1,SWIGTYPE_p_RobotDrive);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->MecanumDrive_Cartesian(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_MecanumDrive_Cartesian(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RobotDrive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_RobotDrive_MecanumDrive_Cartesian__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RobotDrive, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RobotDrive_MecanumDrive_Cartesian__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'RobotDrive_MecanumDrive_Cartesian'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RobotDrive::MecanumDrive_Cartesian(float,float,float,float)\n"
    "    RobotDrive::MecanumDrive_Cartesian(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_RobotDrive_MecanumDrive_Polar(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("RobotDrive::MecanumDrive_Polar",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::MecanumDrive_Polar",1,"RobotDrive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RobotDrive::MecanumDrive_Polar",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RobotDrive::MecanumDrive_Polar",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("RobotDrive::MecanumDrive_Polar",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_MecanumDrive_Polar",1,SWIGTYPE_p_RobotDrive);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->MecanumDrive_Polar(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_HolonomicDrive(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("RobotDrive::HolonomicDrive",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::HolonomicDrive",1,"RobotDrive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RobotDrive::HolonomicDrive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RobotDrive::HolonomicDrive",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("RobotDrive::HolonomicDrive",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_HolonomicDrive",1,SWIGTYPE_p_RobotDrive);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->HolonomicDrive(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_SetLeftRightMotorOutputs(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("RobotDrive::SetLeftRightMotorOutputs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::SetLeftRightMotorOutputs",1,"RobotDrive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RobotDrive::SetLeftRightMotorOutputs",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RobotDrive::SetLeftRightMotorOutputs",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_SetLeftRightMotorOutputs",1,SWIGTYPE_p_RobotDrive);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->SetLeftRightMotorOutputs(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_SetInvertedMotor(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  RobotDrive::MotorType arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("RobotDrive::SetInvertedMotor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::SetInvertedMotor",1,"RobotDrive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RobotDrive::SetInvertedMotor",2,"RobotDrive::MotorType");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("RobotDrive::SetInvertedMotor",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_SetInvertedMotor",1,SWIGTYPE_p_RobotDrive);
  }
  
  arg2 = (RobotDrive::MotorType)(int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->SetInvertedMotor(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_SetSensitivity(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("RobotDrive::SetSensitivity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::SetSensitivity",1,"RobotDrive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RobotDrive::SetSensitivity",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_SetSensitivity",1,SWIGTYPE_p_RobotDrive);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetSensitivity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_SetMaxOutput(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("RobotDrive::SetMaxOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::SetMaxOutput",1,"RobotDrive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RobotDrive::SetMaxOutput",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_SetMaxOutput",1,SWIGTYPE_p_RobotDrive);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->SetMaxOutput(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_SetExpiration(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("RobotDrive::SetExpiration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::SetExpiration",1,"RobotDrive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RobotDrive::SetExpiration",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_SetExpiration",1,SWIGTYPE_p_RobotDrive);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetExpiration(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_GetExpiration(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  float result;
  
  SWIG_check_num_args("RobotDrive::GetExpiration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::GetExpiration",1,"RobotDrive *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_GetExpiration",1,SWIGTYPE_p_RobotDrive);
  }
  
  result = (float)(arg1)->GetExpiration();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_IsAlive(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  bool result;
  
  SWIG_check_num_args("RobotDrive::IsAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::IsAlive",1,"RobotDrive *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_IsAlive",1,SWIGTYPE_p_RobotDrive);
  }
  
  result = (bool)(arg1)->IsAlive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_StopMotor(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  
  SWIG_check_num_args("RobotDrive::StopMotor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::StopMotor",1,"RobotDrive *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_StopMotor",1,SWIGTYPE_p_RobotDrive);
  }
  
  (arg1)->StopMotor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_IsSafetyEnabled(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  bool result;
  
  SWIG_check_num_args("RobotDrive::IsSafetyEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::IsSafetyEnabled",1,"RobotDrive *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_IsSafetyEnabled",1,SWIGTYPE_p_RobotDrive);
  }
  
  result = (bool)(arg1)->IsSafetyEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RobotDrive_SetSafetyEnabled(lua_State* L) {
  int SWIG_arg = 0;
  RobotDrive *arg1 = (RobotDrive *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("RobotDrive::SetSafetyEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RobotDrive::SetSafetyEnabled",1,"RobotDrive *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("RobotDrive::SetSafetyEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RobotDrive,0))){
    SWIG_fail_ptr("RobotDrive_SetSafetyEnabled",1,SWIGTYPE_p_RobotDrive);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetSafetyEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RobotDrive(void *obj) {
RobotDrive *arg1 = (RobotDrive *) obj;
delete arg1;
}
static swig_lua_method swig_RobotDrive_methods[] = {
    {"Drive", _wrap_RobotDrive_Drive}, 
    {"TankDrive", _wrap_RobotDrive_TankDrive}, 
    {"ArcadeDrive", _wrap_RobotDrive_ArcadeDrive}, 
    {"MecanumDrive_Cartesian", _wrap_RobotDrive_MecanumDrive_Cartesian}, 
    {"MecanumDrive_Polar", _wrap_RobotDrive_MecanumDrive_Polar}, 
    {"HolonomicDrive", _wrap_RobotDrive_HolonomicDrive}, 
    {"SetLeftRightMotorOutputs", _wrap_RobotDrive_SetLeftRightMotorOutputs}, 
    {"SetInvertedMotor", _wrap_RobotDrive_SetInvertedMotor}, 
    {"SetSensitivity", _wrap_RobotDrive_SetSensitivity}, 
    {"SetMaxOutput", _wrap_RobotDrive_SetMaxOutput}, 
    {"SetExpiration", _wrap_RobotDrive_SetExpiration}, 
    {"GetExpiration", _wrap_RobotDrive_GetExpiration}, 
    {"IsAlive", _wrap_RobotDrive_IsAlive}, 
    {"StopMotor", _wrap_RobotDrive_StopMotor}, 
    {"IsSafetyEnabled", _wrap_RobotDrive_IsSafetyEnabled}, 
    {"SetSafetyEnabled", _wrap_RobotDrive_SetSafetyEnabled}, 
    {0,0}
};
static swig_lua_attribute swig_RobotDrive_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_RobotDrive_bases[] = {0,0};
static const char *swig_RobotDrive_base_names[] = {"MotorSafety *",0};
static swig_lua_class _wrap_class_RobotDrive = { "RobotDrive", &SWIGTYPE_p_RobotDrive,_wrap_new_RobotDrive, swig_delete_RobotDrive, swig_RobotDrive_methods, swig_RobotDrive_attributes, swig_RobotDrive_bases, swig_RobotDrive_base_names };

static int _wrap_new_SerialPort__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT8 arg2 ;
  SerialPort::Parity arg3 ;
  SerialPort::StopBits arg4 ;
  SerialPort *result = 0 ;
  
  SWIG_check_num_args("SerialPort::SerialPort",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SerialPort::SerialPort",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SerialPort::SerialPort",2,"UINT8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SerialPort::SerialPort",3,"SerialPort::Parity");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SerialPort::SerialPort",4,"SerialPort::StopBits");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT8)lua_tonumber(L, 2);
  arg3 = (SerialPort::Parity)(int)lua_tonumber(L, 3);
  arg4 = (SerialPort::StopBits)(int)lua_tonumber(L, 4);
  result = (SerialPort *)new SerialPort(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SerialPort,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SerialPort__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT8 arg2 ;
  SerialPort::Parity arg3 ;
  SerialPort *result = 0 ;
  
  SWIG_check_num_args("SerialPort::SerialPort",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SerialPort::SerialPort",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SerialPort::SerialPort",2,"UINT8");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SerialPort::SerialPort",3,"SerialPort::Parity");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT8)lua_tonumber(L, 2);
  arg3 = (SerialPort::Parity)(int)lua_tonumber(L, 3);
  result = (SerialPort *)new SerialPort(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SerialPort,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SerialPort__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT8 arg2 ;
  SerialPort *result = 0 ;
  
  SWIG_check_num_args("SerialPort::SerialPort",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SerialPort::SerialPort",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SerialPort::SerialPort",2,"UINT8");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT8)lua_tonumber(L, 2);
  result = (SerialPort *)new SerialPort(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SerialPort,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SerialPort__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  SerialPort *result = 0 ;
  
  SWIG_check_num_args("SerialPort::SerialPort",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SerialPort::SerialPort",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (SerialPort *)new SerialPort(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SerialPort,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SerialPort(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SerialPort__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SerialPort__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_SerialPort__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SerialPort__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_SerialPort'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SerialPort::SerialPort(UINT32,UINT8,SerialPort::Parity,SerialPort::StopBits)\n"
    "    SerialPort::SerialPort(UINT32,UINT8,SerialPort::Parity)\n"
    "    SerialPort::SerialPort(UINT32,UINT8)\n"
    "    SerialPort::SerialPort(UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_SerialPort_SetFlowControl(lua_State* L) {
  int SWIG_arg = 0;
  SerialPort *arg1 = (SerialPort *) 0 ;
  SerialPort::FlowControl arg2 ;
  
  SWIG_check_num_args("SerialPort::SetFlowControl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SerialPort::SetFlowControl",1,"SerialPort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SerialPort::SetFlowControl",2,"SerialPort::FlowControl");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SerialPort,0))){
    SWIG_fail_ptr("SerialPort_SetFlowControl",1,SWIGTYPE_p_SerialPort);
  }
  
  arg2 = (SerialPort::FlowControl)(int)lua_tonumber(L, 2);
  (arg1)->SetFlowControl(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerialPort_EnableTermination__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SerialPort *arg1 = (SerialPort *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("SerialPort::EnableTermination",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SerialPort::EnableTermination",1,"SerialPort *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SerialPort::EnableTermination",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SerialPort,0))){
    SWIG_fail_ptr("SerialPort_EnableTermination",1,SWIGTYPE_p_SerialPort);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  (arg1)->EnableTermination(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerialPort_EnableTermination__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SerialPort *arg1 = (SerialPort *) 0 ;
  
  SWIG_check_num_args("SerialPort::EnableTermination",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SerialPort::EnableTermination",1,"SerialPort *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SerialPort,0))){
    SWIG_fail_ptr("SerialPort_EnableTermination",1,SWIGTYPE_p_SerialPort);
  }
  
  (arg1)->EnableTermination();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerialPort_EnableTermination(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SerialPort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SerialPort_EnableTermination__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SerialPort, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_SerialPort_EnableTermination__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SerialPort_EnableTermination'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SerialPort::EnableTermination(char)\n"
    "    SerialPort::EnableTermination()\n");
  lua_error(L);return 0;
}


static int _wrap_SerialPort_DisableTermination(lua_State* L) {
  int SWIG_arg = 0;
  SerialPort *arg1 = (SerialPort *) 0 ;
  
  SWIG_check_num_args("SerialPort::DisableTermination",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SerialPort::DisableTermination",1,"SerialPort *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SerialPort,0))){
    SWIG_fail_ptr("SerialPort_DisableTermination",1,SWIGTYPE_p_SerialPort);
  }
  
  (arg1)->DisableTermination();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerialPort_GetBytesReceived(lua_State* L) {
  int SWIG_arg = 0;
  SerialPort *arg1 = (SerialPort *) 0 ;
  INT32 result;
  
  SWIG_check_num_args("SerialPort::GetBytesReceived",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SerialPort::GetBytesReceived",1,"SerialPort *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SerialPort,0))){
    SWIG_fail_ptr("SerialPort_GetBytesReceived",1,SWIGTYPE_p_SerialPort);
  }
  
  result = (INT32)(arg1)->GetBytesReceived();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerialPort_Read(lua_State* L) {
  int SWIG_arg = 0;
  SerialPort *arg1 = (SerialPort *) 0 ;
  char *arg2 = (char *) 0 ;
  INT32 arg3 ;
  UINT32 result;
  
  SWIG_check_num_args("SerialPort::Read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SerialPort::Read",1,"SerialPort *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SerialPort::Read",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SerialPort::Read",3,"INT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SerialPort,0))){
    SWIG_fail_ptr("SerialPort_Read",1,SWIGTYPE_p_SerialPort);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (INT32)lua_tonumber(L, 3);
  result = (UINT32)(arg1)->Read(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerialPort_Write(lua_State* L) {
  int SWIG_arg = 0;
  SerialPort *arg1 = (SerialPort *) 0 ;
  char *arg2 = (char *) 0 ;
  INT32 arg3 ;
  UINT32 result;
  
  SWIG_check_num_args("SerialPort::Write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SerialPort::Write",1,"SerialPort *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SerialPort::Write",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SerialPort::Write",3,"INT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SerialPort,0))){
    SWIG_fail_ptr("SerialPort_Write",1,SWIGTYPE_p_SerialPort);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (INT32)lua_tonumber(L, 3);
  result = (UINT32)(arg1)->Write((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerialPort_SetTimeout(lua_State* L) {
  int SWIG_arg = 0;
  SerialPort *arg1 = (SerialPort *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SerialPort::SetTimeout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SerialPort::SetTimeout",1,"SerialPort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SerialPort::SetTimeout",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SerialPort,0))){
    SWIG_fail_ptr("SerialPort_SetTimeout",1,SWIGTYPE_p_SerialPort);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetTimeout(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerialPort_SetReadBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  SerialPort *arg1 = (SerialPort *) 0 ;
  UINT32 arg2 ;
  
  SWIG_check_num_args("SerialPort::SetReadBufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SerialPort::SetReadBufferSize",1,"SerialPort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SerialPort::SetReadBufferSize",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SerialPort,0))){
    SWIG_fail_ptr("SerialPort_SetReadBufferSize",1,SWIGTYPE_p_SerialPort);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  (arg1)->SetReadBufferSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerialPort_SetWriteBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  SerialPort *arg1 = (SerialPort *) 0 ;
  UINT32 arg2 ;
  
  SWIG_check_num_args("SerialPort::SetWriteBufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SerialPort::SetWriteBufferSize",1,"SerialPort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SerialPort::SetWriteBufferSize",2,"UINT32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SerialPort,0))){
    SWIG_fail_ptr("SerialPort_SetWriteBufferSize",1,SWIGTYPE_p_SerialPort);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  (arg1)->SetWriteBufferSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerialPort_SetWriteBufferMode(lua_State* L) {
  int SWIG_arg = 0;
  SerialPort *arg1 = (SerialPort *) 0 ;
  SerialPort::WriteBufferMode arg2 ;
  
  SWIG_check_num_args("SerialPort::SetWriteBufferMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SerialPort::SetWriteBufferMode",1,"SerialPort *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SerialPort::SetWriteBufferMode",2,"SerialPort::WriteBufferMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SerialPort,0))){
    SWIG_fail_ptr("SerialPort_SetWriteBufferMode",1,SWIGTYPE_p_SerialPort);
  }
  
  arg2 = (SerialPort::WriteBufferMode)(int)lua_tonumber(L, 2);
  (arg1)->SetWriteBufferMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerialPort_Flush(lua_State* L) {
  int SWIG_arg = 0;
  SerialPort *arg1 = (SerialPort *) 0 ;
  
  SWIG_check_num_args("SerialPort::Flush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SerialPort::Flush",1,"SerialPort *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SerialPort,0))){
    SWIG_fail_ptr("SerialPort_Flush",1,SWIGTYPE_p_SerialPort);
  }
  
  (arg1)->Flush();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerialPort_Reset(lua_State* L) {
  int SWIG_arg = 0;
  SerialPort *arg1 = (SerialPort *) 0 ;
  
  SWIG_check_num_args("SerialPort::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SerialPort::Reset",1,"SerialPort *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SerialPort,0))){
    SWIG_fail_ptr("SerialPort_Reset",1,SWIGTYPE_p_SerialPort);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SerialPort(void *obj) {
SerialPort *arg1 = (SerialPort *) obj;
delete arg1;
}
static swig_lua_method swig_SerialPort_methods[] = {
    {"SetFlowControl", _wrap_SerialPort_SetFlowControl}, 
    {"EnableTermination", _wrap_SerialPort_EnableTermination}, 
    {"DisableTermination", _wrap_SerialPort_DisableTermination}, 
    {"GetBytesReceived", _wrap_SerialPort_GetBytesReceived}, 
    {"Read", _wrap_SerialPort_Read}, 
    {"Write", _wrap_SerialPort_Write}, 
    {"SetTimeout", _wrap_SerialPort_SetTimeout}, 
    {"SetReadBufferSize", _wrap_SerialPort_SetReadBufferSize}, 
    {"SetWriteBufferSize", _wrap_SerialPort_SetWriteBufferSize}, 
    {"SetWriteBufferMode", _wrap_SerialPort_SetWriteBufferMode}, 
    {"Flush", _wrap_SerialPort_Flush}, 
    {"Reset", _wrap_SerialPort_Reset}, 
    {0,0}
};
static swig_lua_attribute swig_SerialPort_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_SerialPort_bases[] = {0};
static const char *swig_SerialPort_base_names[] = {0};
static swig_lua_class _wrap_class_SerialPort = { "SerialPort", &SWIGTYPE_p_SerialPort,_wrap_new_SerialPort, swig_delete_SerialPort, swig_SerialPort_methods, swig_SerialPort_attributes, swig_SerialPort_bases, swig_SerialPort_base_names };

static int _wrap_new_Servo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  Servo *result = 0 ;
  
  SWIG_check_num_args("Servo::Servo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Servo::Servo",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (Servo *)new Servo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Servo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Servo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  Servo *result = 0 ;
  
  SWIG_check_num_args("Servo::Servo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Servo::Servo",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Servo::Servo",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (Servo *)new Servo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Servo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Servo(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Servo__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Servo__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Servo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Servo::Servo(UINT32)\n"
    "    Servo::Servo(UINT32,UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_Servo_Set(lua_State* L) {
  int SWIG_arg = 0;
  Servo *arg1 = (Servo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Servo::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Servo::Set",1,"Servo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Servo::Set",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Servo,0))){
    SWIG_fail_ptr("Servo_Set",1,SWIGTYPE_p_Servo);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Servo_SetOffline(lua_State* L) {
  int SWIG_arg = 0;
  Servo *arg1 = (Servo *) 0 ;
  
  SWIG_check_num_args("Servo::SetOffline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Servo::SetOffline",1,"Servo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Servo,0))){
    SWIG_fail_ptr("Servo_SetOffline",1,SWIGTYPE_p_Servo);
  }
  
  (arg1)->SetOffline();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Servo_Get(lua_State* L) {
  int SWIG_arg = 0;
  Servo *arg1 = (Servo *) 0 ;
  float result;
  
  SWIG_check_num_args("Servo::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Servo::Get",1,"Servo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Servo,0))){
    SWIG_fail_ptr("Servo_Get",1,SWIGTYPE_p_Servo);
  }
  
  result = (float)(arg1)->Get();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Servo_SetAngle(lua_State* L) {
  int SWIG_arg = 0;
  Servo *arg1 = (Servo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Servo::SetAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Servo::SetAngle",1,"Servo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Servo::SetAngle",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Servo,0))){
    SWIG_fail_ptr("Servo_SetAngle",1,SWIGTYPE_p_Servo);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetAngle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Servo_GetAngle(lua_State* L) {
  int SWIG_arg = 0;
  Servo *arg1 = (Servo *) 0 ;
  float result;
  
  SWIG_check_num_args("Servo::GetAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Servo::GetAngle",1,"Servo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Servo,0))){
    SWIG_fail_ptr("Servo_GetAngle",1,SWIGTYPE_p_Servo);
  }
  
  result = (float)(arg1)->GetAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Servo_GetMaxAngle(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Servo::GetMaxAngle",0,0)
  result = (float)Servo::GetMaxAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Servo_GetMinAngle(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Servo::GetMinAngle",0,0)
  result = (float)Servo::GetMinAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Servo(void *obj) {
Servo *arg1 = (Servo *) obj;
delete arg1;
}
static swig_lua_method swig_Servo_methods[] = {
    {"Set", _wrap_Servo_Set}, 
    {"SetOffline", _wrap_Servo_SetOffline}, 
    {"Get", _wrap_Servo_Get}, 
    {"SetAngle", _wrap_Servo_SetAngle}, 
    {"GetAngle", _wrap_Servo_GetAngle}, 
    {0,0}
};
static swig_lua_attribute swig_Servo_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Servo_bases[] = {0,0};
static const char *swig_Servo_base_names[] = {"SafePWM *",0};
static swig_lua_class _wrap_class_Servo = { "Servo", &SWIGTYPE_p_Servo,_wrap_new_Servo, swig_delete_Servo, swig_Servo_methods, swig_Servo_attributes, swig_Servo_bases, swig_Servo_base_names };

static int _wrap_SmartDashboard_init(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("SmartDashboard::init",0,0)
  SmartDashboard::init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDashboard_PutBoolean(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  
  SWIG_check_num_args("SmartDashboard::PutBoolean",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SmartDashboard::PutBoolean",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SmartDashboard::PutBoolean",2,"bool");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (lua_toboolean(L, 2)!=0);
  SmartDashboard::PutBoolean(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDashboard_GetBoolean(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool result;
  
  SWIG_check_num_args("SmartDashboard::GetBoolean",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SmartDashboard::GetBoolean",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  result = (bool)SmartDashboard::GetBoolean(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDashboard_PutNumber(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  double arg2 ;
  
  SWIG_check_num_args("SmartDashboard::PutNumber",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SmartDashboard::PutNumber",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SmartDashboard::PutNumber",2,"double");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (double)lua_tonumber(L, 2);
  SmartDashboard::PutNumber(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDashboard_GetNumber(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  double result;
  
  SWIG_check_num_args("SmartDashboard::GetNumber",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SmartDashboard::GetNumber",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  result = (double)SmartDashboard::GetNumber(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDashboard_PutString(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string arg2 ;
  
  SWIG_check_num_args("SmartDashboard::PutString",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SmartDashboard::PutString",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SmartDashboard::PutString",2,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  SmartDashboard::PutString(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDashboard_GetString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  SWIG_check_num_args("SmartDashboard::GetString",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SmartDashboard::GetString",1,"std::string");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SmartDashboard::GetString",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SmartDashboard::GetString",3,"unsigned int");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (int)SmartDashboard::GetString(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDashboard_GetString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string result;
  
  SWIG_check_num_args("SmartDashboard::GetString",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SmartDashboard::GetString",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  result = SmartDashboard::GetString(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDashboard_GetString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_SmartDashboard_GetString__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SmartDashboard_GetString__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SmartDashboard_GetString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SmartDashboard::GetString(std::string,char *,unsigned int)\n"
    "    SmartDashboard::GetString(std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_SmartDashboard_PutValue(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  ComplexData *arg2 = 0 ;
  
  SWIG_check_num_args("SmartDashboard::PutValue",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SmartDashboard::PutValue",1,"std::string");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SmartDashboard::PutValue",2,"ComplexData &");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexData,0))){
    SWIG_fail_ptr("SmartDashboard_PutValue",2,SWIGTYPE_p_ComplexData);
  }
  
  SmartDashboard::PutValue(arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmartDashboard_RetrieveValue(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  ComplexData *arg2 = 0 ;
  
  SWIG_check_num_args("SmartDashboard::RetrieveValue",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SmartDashboard::RetrieveValue",1,"std::string");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SmartDashboard::RetrieveValue",2,"ComplexData &");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexData,0))){
    SWIG_fail_ptr("SmartDashboard_RetrieveValue",2,SWIGTYPE_p_ComplexData);
  }
  
  SmartDashboard::RetrieveValue(arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_SmartDashboard_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_SmartDashboard_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_SmartDashboard_bases[] = {0,0};
static const char *swig_SmartDashboard_base_names[] = {"SensorBase *",0};
static swig_lua_class _wrap_class_SmartDashboard = { "SmartDashboard", &SWIGTYPE_p_SmartDashboard,0,0, swig_SmartDashboard_methods, swig_SmartDashboard_attributes, swig_SmartDashboard_bases, swig_SmartDashboard_base_names };

static int _wrap_new_Solenoid__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  Solenoid *result = 0 ;
  
  SWIG_check_num_args("Solenoid::Solenoid",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Solenoid::Solenoid",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (Solenoid *)new Solenoid(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Solenoid,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Solenoid__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  Solenoid *result = 0 ;
  
  SWIG_check_num_args("Solenoid::Solenoid",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Solenoid::Solenoid",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Solenoid::Solenoid",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (Solenoid *)new Solenoid(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Solenoid,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Solenoid(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Solenoid__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Solenoid__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Solenoid'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Solenoid::Solenoid(UINT32)\n"
    "    Solenoid::Solenoid(UINT32,UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_Solenoid_Set(lua_State* L) {
  int SWIG_arg = 0;
  Solenoid *arg1 = (Solenoid *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Solenoid::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Solenoid::Set",1,"Solenoid *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Solenoid::Set",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Solenoid,0))){
    SWIG_fail_ptr("Solenoid_Set",1,SWIGTYPE_p_Solenoid);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->Set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Solenoid_Get(lua_State* L) {
  int SWIG_arg = 0;
  Solenoid *arg1 = (Solenoid *) 0 ;
  bool result;
  
  SWIG_check_num_args("Solenoid::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Solenoid::Get",1,"Solenoid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Solenoid,0))){
    SWIG_fail_ptr("Solenoid_Get",1,SWIGTYPE_p_Solenoid);
  }
  
  result = (bool)(arg1)->Get();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Solenoid(void *obj) {
Solenoid *arg1 = (Solenoid *) obj;
delete arg1;
}
static swig_lua_method swig_Solenoid_methods[] = {
    {"Set", _wrap_Solenoid_Set}, 
    {"Get", _wrap_Solenoid_Get}, 
    {0,0}
};
static swig_lua_attribute swig_Solenoid_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Solenoid_bases[] = {0,0};
static const char *swig_Solenoid_base_names[] = {"SolenoidBase *",0};
static swig_lua_class _wrap_class_Solenoid = { "Solenoid", &SWIGTYPE_p_Solenoid,_wrap_new_Solenoid, swig_delete_Solenoid, swig_Solenoid_methods, swig_Solenoid_attributes, swig_Solenoid_bases, swig_Solenoid_base_names };

static int _wrap_new_Talon__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  Talon *result = 0 ;
  
  SWIG_check_num_args("Talon::Talon",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Talon::Talon",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (Talon *)new Talon(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Talon,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Talon__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT8 arg1 ;
  UINT32 arg2 ;
  Talon *result = 0 ;
  
  SWIG_check_num_args("Talon::Talon",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Talon::Talon",1,"UINT8");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Talon::Talon",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT8)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (Talon *)new Talon(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Talon,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Talon(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Talon__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Talon__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Talon'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Talon::Talon(UINT32)\n"
    "    Talon::Talon(UINT8,UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_Talon_Set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Talon *arg1 = (Talon *) 0 ;
  float arg2 ;
  UINT8 arg3 ;
  
  SWIG_check_num_args("Talon::Set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Talon::Set",1,"Talon *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Talon::Set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Talon::Set",3,"UINT8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Talon,0))){
    SWIG_fail_ptr("Talon_Set",1,SWIGTYPE_p_Talon);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT8)lua_tonumber(L, 3);
  (arg1)->Set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Talon_Set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Talon *arg1 = (Talon *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Talon::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Talon::Set",1,"Talon *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Talon::Set",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Talon,0))){
    SWIG_fail_ptr("Talon_Set",1,SWIGTYPE_p_Talon);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Talon_Set(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Talon, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Talon_Set__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Talon, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Talon_Set__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Talon_Set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Talon::Set(float,UINT8)\n"
    "    Talon::Set(float)\n");
  lua_error(L);return 0;
}


static int _wrap_Talon_Get(lua_State* L) {
  int SWIG_arg = 0;
  Talon *arg1 = (Talon *) 0 ;
  float result;
  
  SWIG_check_num_args("Talon::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Talon::Get",1,"Talon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Talon,0))){
    SWIG_fail_ptr("Talon_Get",1,SWIGTYPE_p_Talon);
  }
  
  result = (float)(arg1)->Get();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Talon_Disable(lua_State* L) {
  int SWIG_arg = 0;
  Talon *arg1 = (Talon *) 0 ;
  
  SWIG_check_num_args("Talon::Disable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Talon::Disable",1,"Talon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Talon,0))){
    SWIG_fail_ptr("Talon_Disable",1,SWIGTYPE_p_Talon);
  }
  
  (arg1)->Disable();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Talon_PIDWrite(lua_State* L) {
  int SWIG_arg = 0;
  Talon *arg1 = (Talon *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Talon::PIDWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Talon::PIDWrite",1,"Talon *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Talon::PIDWrite",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Talon,0))){
    SWIG_fail_ptr("Talon_PIDWrite",1,SWIGTYPE_p_Talon);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->PIDWrite(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Talon(void *obj) {
Talon *arg1 = (Talon *) obj;
delete arg1;
}
static swig_lua_method swig_Talon_methods[] = {
    {"Set", _wrap_Talon_Set}, 
    {"Get", _wrap_Talon_Get}, 
    {"Disable", _wrap_Talon_Disable}, 
    {"PIDWrite", _wrap_Talon_PIDWrite}, 
    {0,0}
};
static swig_lua_attribute swig_Talon_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Talon_bases[] = {0,0,0};
static const char *swig_Talon_base_names[] = {"SafePWM *","SpeedController *",0};
static swig_lua_class _wrap_class_Talon = { "Talon", &SWIGTYPE_p_Talon,_wrap_new_Talon, swig_delete_Talon, swig_Talon_methods, swig_Talon_attributes, swig_Talon_bases, swig_Talon_base_names };

static int _wrap_new_Timer(lua_State* L) {
  int SWIG_arg = 0;
  Timer *result = 0 ;
  
  SWIG_check_num_args("Timer::Timer",0,0)
  result = (Timer *)new Timer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Timer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_Get(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  double result;
  
  SWIG_check_num_args("Timer::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::Get",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_Get",1,SWIGTYPE_p_Timer);
  }
  
  result = (double)(arg1)->Get();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_Reset(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::Reset",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_Reset",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_Start(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::Start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::Start",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_Start",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->Start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_Stop(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::Stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::Stop",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_Stop",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->Stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_HasPeriodPassed(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("Timer::HasPeriodPassed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::HasPeriodPassed",1,"Timer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Timer::HasPeriodPassed",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_HasPeriodPassed",1,SWIGTYPE_p_Timer);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->HasPeriodPassed(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_GetFPGATimestamp(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Timer::GetFPGATimestamp",0,0)
  result = (double)Timer::GetFPGATimestamp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_GetPPCTimestamp(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Timer::GetPPCTimestamp",0,0)
  result = (double)Timer::GetPPCTimestamp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Timer(void *obj) {
Timer *arg1 = (Timer *) obj;
delete arg1;
}
static swig_lua_method swig_Timer_methods[] = {
    {"Get", _wrap_Timer_Get}, 
    {"Reset", _wrap_Timer_Reset}, 
    {"Start", _wrap_Timer_Start}, 
    {"Stop", _wrap_Timer_Stop}, 
    {"HasPeriodPassed", _wrap_Timer_HasPeriodPassed}, 
    {0,0}
};
static swig_lua_attribute swig_Timer_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Timer_bases[] = {0};
static const char *swig_Timer_base_names[] = {0};
static swig_lua_class _wrap_class_Timer = { "Timer", &SWIGTYPE_p_Timer,_wrap_new_Timer, swig_delete_Timer, swig_Timer_methods, swig_Timer_attributes, swig_Timer_bases, swig_Timer_base_names };

static int _wrap_Wait(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  
  SWIG_check_num_args("Wait",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Wait",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  Wait(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ultrasonic__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DigitalOutput *arg1 = (DigitalOutput *) 0 ;
  DigitalInput *arg2 = (DigitalInput *) 0 ;
  Ultrasonic::DistanceUnit arg3 ;
  Ultrasonic *result = 0 ;
  
  SWIG_check_num_args("Ultrasonic::Ultrasonic",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ultrasonic::Ultrasonic",1,"DigitalOutput *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ultrasonic::Ultrasonic",2,"DigitalInput *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ultrasonic::Ultrasonic",3,"Ultrasonic::DistanceUnit");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalOutput,0))){
    SWIG_fail_ptr("new_Ultrasonic",1,SWIGTYPE_p_DigitalOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DigitalInput,0))){
    SWIG_fail_ptr("new_Ultrasonic",2,SWIGTYPE_p_DigitalInput);
  }
  
  arg3 = (Ultrasonic::DistanceUnit)(int)lua_tonumber(L, 3);
  result = (Ultrasonic *)new Ultrasonic(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ultrasonic,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ultrasonic__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DigitalOutput *arg1 = (DigitalOutput *) 0 ;
  DigitalInput *arg2 = (DigitalInput *) 0 ;
  Ultrasonic *result = 0 ;
  
  SWIG_check_num_args("Ultrasonic::Ultrasonic",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ultrasonic::Ultrasonic",1,"DigitalOutput *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Ultrasonic::Ultrasonic",2,"DigitalInput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DigitalOutput,0))){
    SWIG_fail_ptr("new_Ultrasonic",1,SWIGTYPE_p_DigitalOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DigitalInput,0))){
    SWIG_fail_ptr("new_Ultrasonic",2,SWIGTYPE_p_DigitalInput);
  }
  
  result = (Ultrasonic *)new Ultrasonic(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ultrasonic,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ultrasonic__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  Ultrasonic::DistanceUnit arg3 ;
  Ultrasonic *result = 0 ;
  
  SWIG_check_num_args("Ultrasonic::Ultrasonic",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ultrasonic::Ultrasonic",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ultrasonic::Ultrasonic",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ultrasonic::Ultrasonic",3,"Ultrasonic::DistanceUnit");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  arg3 = (Ultrasonic::DistanceUnit)(int)lua_tonumber(L, 3);
  result = (Ultrasonic *)new Ultrasonic(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ultrasonic,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ultrasonic__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  Ultrasonic *result = 0 ;
  
  SWIG_check_num_args("Ultrasonic::Ultrasonic",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ultrasonic::Ultrasonic",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ultrasonic::Ultrasonic",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (Ultrasonic *)new Ultrasonic(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ultrasonic,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ultrasonic__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  UINT32 arg4 ;
  Ultrasonic::DistanceUnit arg5 ;
  Ultrasonic *result = 0 ;
  
  SWIG_check_num_args("Ultrasonic::Ultrasonic",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ultrasonic::Ultrasonic",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ultrasonic::Ultrasonic",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ultrasonic::Ultrasonic",3,"UINT32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ultrasonic::Ultrasonic",4,"UINT32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Ultrasonic::Ultrasonic",5,"Ultrasonic::DistanceUnit");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UINT32)lua_tonumber(L, 4);
  arg5 = (Ultrasonic::DistanceUnit)(int)lua_tonumber(L, 5);
  result = (Ultrasonic *)new Ultrasonic(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ultrasonic,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ultrasonic__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  UINT32 arg3 ;
  UINT32 arg4 ;
  Ultrasonic *result = 0 ;
  
  SWIG_check_num_args("Ultrasonic::Ultrasonic",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ultrasonic::Ultrasonic",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ultrasonic::Ultrasonic",2,"UINT32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ultrasonic::Ultrasonic",3,"UINT32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Ultrasonic::Ultrasonic",4,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (UINT32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (UINT32)lua_tonumber(L, 4);
  result = (Ultrasonic *)new Ultrasonic(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ultrasonic,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ultrasonic(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalOutput, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DigitalInput, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Ultrasonic__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Ultrasonic__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DigitalOutput, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DigitalInput, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Ultrasonic__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Ultrasonic__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Ultrasonic__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_Ultrasonic__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Ultrasonic'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ultrasonic::Ultrasonic(DigitalOutput *,DigitalInput *,Ultrasonic::DistanceUnit)\n"
    "    Ultrasonic::Ultrasonic(DigitalOutput *,DigitalInput *)\n"
    "    Ultrasonic::Ultrasonic(UINT32,UINT32,Ultrasonic::DistanceUnit)\n"
    "    Ultrasonic::Ultrasonic(UINT32,UINT32)\n"
    "    Ultrasonic::Ultrasonic(UINT32,UINT32,UINT32,UINT32,Ultrasonic::DistanceUnit)\n"
    "    Ultrasonic::Ultrasonic(UINT32,UINT32,UINT32,UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_Ultrasonic_Ping(lua_State* L) {
  int SWIG_arg = 0;
  Ultrasonic *arg1 = (Ultrasonic *) 0 ;
  
  SWIG_check_num_args("Ultrasonic::Ping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ultrasonic::Ping",1,"Ultrasonic *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ultrasonic,0))){
    SWIG_fail_ptr("Ultrasonic_Ping",1,SWIGTYPE_p_Ultrasonic);
  }
  
  (arg1)->Ping();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ultrasonic_IsRangeValid(lua_State* L) {
  int SWIG_arg = 0;
  Ultrasonic *arg1 = (Ultrasonic *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ultrasonic::IsRangeValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ultrasonic::IsRangeValid",1,"Ultrasonic *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ultrasonic,0))){
    SWIG_fail_ptr("Ultrasonic_IsRangeValid",1,SWIGTYPE_p_Ultrasonic);
  }
  
  result = (bool)(arg1)->IsRangeValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ultrasonic_SetAutomaticMode(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("Ultrasonic::SetAutomaticMode",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("Ultrasonic::SetAutomaticMode",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  Ultrasonic::SetAutomaticMode(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ultrasonic_GetRangeInches(lua_State* L) {
  int SWIG_arg = 0;
  Ultrasonic *arg1 = (Ultrasonic *) 0 ;
  double result;
  
  SWIG_check_num_args("Ultrasonic::GetRangeInches",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ultrasonic::GetRangeInches",1,"Ultrasonic *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ultrasonic,0))){
    SWIG_fail_ptr("Ultrasonic_GetRangeInches",1,SWIGTYPE_p_Ultrasonic);
  }
  
  result = (double)(arg1)->GetRangeInches();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ultrasonic_GetRangeMM(lua_State* L) {
  int SWIG_arg = 0;
  Ultrasonic *arg1 = (Ultrasonic *) 0 ;
  double result;
  
  SWIG_check_num_args("Ultrasonic::GetRangeMM",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ultrasonic::GetRangeMM",1,"Ultrasonic *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ultrasonic,0))){
    SWIG_fail_ptr("Ultrasonic_GetRangeMM",1,SWIGTYPE_p_Ultrasonic);
  }
  
  result = (double)(arg1)->GetRangeMM();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ultrasonic_IsEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Ultrasonic *arg1 = (Ultrasonic *) 0 ;
  bool result;
  
  SWIG_check_num_args("Ultrasonic::IsEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ultrasonic::IsEnabled",1,"Ultrasonic *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ultrasonic,0))){
    SWIG_fail_ptr("Ultrasonic_IsEnabled",1,SWIGTYPE_p_Ultrasonic);
  }
  
  result = (bool)(arg1)->IsEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ultrasonic_SetEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Ultrasonic *arg1 = (Ultrasonic *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Ultrasonic::SetEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ultrasonic::SetEnabled",1,"Ultrasonic *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Ultrasonic::SetEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ultrasonic,0))){
    SWIG_fail_ptr("Ultrasonic_SetEnabled",1,SWIGTYPE_p_Ultrasonic);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ultrasonic_PIDGet(lua_State* L) {
  int SWIG_arg = 0;
  Ultrasonic *arg1 = (Ultrasonic *) 0 ;
  double result;
  
  SWIG_check_num_args("Ultrasonic::PIDGet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ultrasonic::PIDGet",1,"Ultrasonic *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ultrasonic,0))){
    SWIG_fail_ptr("Ultrasonic_PIDGet",1,SWIGTYPE_p_Ultrasonic);
  }
  
  result = (double)(arg1)->PIDGet();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ultrasonic_SetDistanceUnits(lua_State* L) {
  int SWIG_arg = 0;
  Ultrasonic *arg1 = (Ultrasonic *) 0 ;
  Ultrasonic::DistanceUnit arg2 ;
  
  SWIG_check_num_args("Ultrasonic::SetDistanceUnits",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ultrasonic::SetDistanceUnits",1,"Ultrasonic *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ultrasonic::SetDistanceUnits",2,"Ultrasonic::DistanceUnit");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ultrasonic,0))){
    SWIG_fail_ptr("Ultrasonic_SetDistanceUnits",1,SWIGTYPE_p_Ultrasonic);
  }
  
  arg2 = (Ultrasonic::DistanceUnit)(int)lua_tonumber(L, 2);
  (arg1)->SetDistanceUnits(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ultrasonic_GetDistanceUnits(lua_State* L) {
  int SWIG_arg = 0;
  Ultrasonic *arg1 = (Ultrasonic *) 0 ;
  Ultrasonic::DistanceUnit result;
  
  SWIG_check_num_args("Ultrasonic::GetDistanceUnits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Ultrasonic::GetDistanceUnits",1,"Ultrasonic *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ultrasonic,0))){
    SWIG_fail_ptr("Ultrasonic_GetDistanceUnits",1,SWIGTYPE_p_Ultrasonic);
  }
  
  result = (Ultrasonic::DistanceUnit)(arg1)->GetDistanceUnits();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Ultrasonic(void *obj) {
Ultrasonic *arg1 = (Ultrasonic *) obj;
delete arg1;
}
static swig_lua_method swig_Ultrasonic_methods[] = {
    {"Ping", _wrap_Ultrasonic_Ping}, 
    {"IsRangeValid", _wrap_Ultrasonic_IsRangeValid}, 
    {"GetRangeInches", _wrap_Ultrasonic_GetRangeInches}, 
    {"GetRangeMM", _wrap_Ultrasonic_GetRangeMM}, 
    {"IsEnabled", _wrap_Ultrasonic_IsEnabled}, 
    {"SetEnabled", _wrap_Ultrasonic_SetEnabled}, 
    {"PIDGet", _wrap_Ultrasonic_PIDGet}, 
    {"SetDistanceUnits", _wrap_Ultrasonic_SetDistanceUnits}, 
    {"GetDistanceUnits", _wrap_Ultrasonic_GetDistanceUnits}, 
    {0,0}
};
static swig_lua_attribute swig_Ultrasonic_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ultrasonic_bases[] = {0,0,0};
static const char *swig_Ultrasonic_base_names[] = {"SensorBase *","PIDSource *",0};
static swig_lua_class _wrap_class_Ultrasonic = { "Ultrasonic", &SWIGTYPE_p_Ultrasonic,_wrap_new_Ultrasonic, swig_delete_Ultrasonic, swig_Ultrasonic_methods, swig_Ultrasonic_attributes, swig_Ultrasonic_bases, swig_Ultrasonic_base_names };

static int _wrap_new_Victor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  Victor *result = 0 ;
  
  SWIG_check_num_args("Victor::Victor",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Victor::Victor",1,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  result = (Victor *)new Victor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Victor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Victor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UINT32 arg1 ;
  UINT32 arg2 ;
  Victor *result = 0 ;
  
  SWIG_check_num_args("Victor::Victor",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Victor::Victor",1,"UINT32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Victor::Victor",2,"UINT32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (UINT32)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (UINT32)lua_tonumber(L, 2);
  result = (Victor *)new Victor(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Victor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Victor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Victor__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Victor__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Victor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Victor::Victor(UINT32)\n"
    "    Victor::Victor(UINT32,UINT32)\n");
  lua_error(L);return 0;
}


static int _wrap_Victor_Set(lua_State* L) {
  int SWIG_arg = 0;
  Victor *arg1 = (Victor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Victor::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Victor::Set",1,"Victor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Victor::Set",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Victor,0))){
    SWIG_fail_ptr("Victor_Set",1,SWIGTYPE_p_Victor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Victor_Get(lua_State* L) {
  int SWIG_arg = 0;
  Victor *arg1 = (Victor *) 0 ;
  float result;
  
  SWIG_check_num_args("Victor::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Victor::Get",1,"Victor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Victor,0))){
    SWIG_fail_ptr("Victor_Get",1,SWIGTYPE_p_Victor);
  }
  
  result = (float)(arg1)->Get();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Victor_PIDWrite(lua_State* L) {
  int SWIG_arg = 0;
  Victor *arg1 = (Victor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Victor::PIDWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Victor::PIDWrite",1,"Victor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Victor::PIDWrite",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Victor,0))){
    SWIG_fail_ptr("Victor_PIDWrite",1,SWIGTYPE_p_Victor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->PIDWrite(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Victor(void *obj) {
Victor *arg1 = (Victor *) obj;
delete arg1;
}
static swig_lua_method swig_Victor_methods[] = {
    {"Set", _wrap_Victor_Set}, 
    {"Get", _wrap_Victor_Get}, 
    {"PIDWrite", _wrap_Victor_PIDWrite}, 
    {0,0}
};
static swig_lua_attribute swig_Victor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Victor_bases[] = {0,0,0,0};
static const char *swig_Victor_base_names[] = {"SafePWM *","SpeedController *","PIDOutput *",0};
static swig_lua_class _wrap_class_Victor = { "Victor", &SWIGTYPE_p_Victor,_wrap_new_Victor, swig_delete_Victor, swig_Victor_methods, swig_Victor_attributes, swig_Victor_bases, swig_Victor_base_names };

static int _wrap_new_Watchdog(lua_State* L) {
  int SWIG_arg = 0;
  Watchdog *result = 0 ;
  
  SWIG_check_num_args("Watchdog::Watchdog",0,0)
  result = (Watchdog *)new Watchdog();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Watchdog,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Watchdog_Feed(lua_State* L) {
  int SWIG_arg = 0;
  Watchdog *arg1 = (Watchdog *) 0 ;
  bool result;
  
  SWIG_check_num_args("Watchdog::Feed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Watchdog::Feed",1,"Watchdog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Watchdog,0))){
    SWIG_fail_ptr("Watchdog_Feed",1,SWIGTYPE_p_Watchdog);
  }
  
  result = (bool)(arg1)->Feed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Watchdog_Kill(lua_State* L) {
  int SWIG_arg = 0;
  Watchdog *arg1 = (Watchdog *) 0 ;
  
  SWIG_check_num_args("Watchdog::Kill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Watchdog::Kill",1,"Watchdog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Watchdog,0))){
    SWIG_fail_ptr("Watchdog_Kill",1,SWIGTYPE_p_Watchdog);
  }
  
  (arg1)->Kill();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Watchdog_GetTimer(lua_State* L) {
  int SWIG_arg = 0;
  Watchdog *arg1 = (Watchdog *) 0 ;
  double result;
  
  SWIG_check_num_args("Watchdog::GetTimer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Watchdog::GetTimer",1,"Watchdog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Watchdog,0))){
    SWIG_fail_ptr("Watchdog_GetTimer",1,SWIGTYPE_p_Watchdog);
  }
  
  result = (double)(arg1)->GetTimer();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Watchdog_GetExpiration(lua_State* L) {
  int SWIG_arg = 0;
  Watchdog *arg1 = (Watchdog *) 0 ;
  double result;
  
  SWIG_check_num_args("Watchdog::GetExpiration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Watchdog::GetExpiration",1,"Watchdog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Watchdog,0))){
    SWIG_fail_ptr("Watchdog_GetExpiration",1,SWIGTYPE_p_Watchdog);
  }
  
  result = (double)(arg1)->GetExpiration();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Watchdog_SetExpiration(lua_State* L) {
  int SWIG_arg = 0;
  Watchdog *arg1 = (Watchdog *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Watchdog::SetExpiration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Watchdog::SetExpiration",1,"Watchdog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Watchdog::SetExpiration",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Watchdog,0))){
    SWIG_fail_ptr("Watchdog_SetExpiration",1,SWIGTYPE_p_Watchdog);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->SetExpiration(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Watchdog_GetEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Watchdog *arg1 = (Watchdog *) 0 ;
  bool result;
  
  SWIG_check_num_args("Watchdog::GetEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Watchdog::GetEnabled",1,"Watchdog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Watchdog,0))){
    SWIG_fail_ptr("Watchdog_GetEnabled",1,SWIGTYPE_p_Watchdog);
  }
  
  result = (bool)(arg1)->GetEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Watchdog_SetEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Watchdog *arg1 = (Watchdog *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Watchdog::SetEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Watchdog::SetEnabled",1,"Watchdog *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Watchdog::SetEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Watchdog,0))){
    SWIG_fail_ptr("Watchdog_SetEnabled",1,SWIGTYPE_p_Watchdog);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Watchdog_IsAlive(lua_State* L) {
  int SWIG_arg = 0;
  Watchdog *arg1 = (Watchdog *) 0 ;
  bool result;
  
  SWIG_check_num_args("Watchdog::IsAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Watchdog::IsAlive",1,"Watchdog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Watchdog,0))){
    SWIG_fail_ptr("Watchdog_IsAlive",1,SWIGTYPE_p_Watchdog);
  }
  
  result = (bool)(arg1)->IsAlive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Watchdog_IsSystemActive(lua_State* L) {
  int SWIG_arg = 0;
  Watchdog *arg1 = (Watchdog *) 0 ;
  bool result;
  
  SWIG_check_num_args("Watchdog::IsSystemActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Watchdog::IsSystemActive",1,"Watchdog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Watchdog,0))){
    SWIG_fail_ptr("Watchdog_IsSystemActive",1,SWIGTYPE_p_Watchdog);
  }
  
  result = (bool)(arg1)->IsSystemActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Watchdog(void *obj) {
Watchdog *arg1 = (Watchdog *) obj;
delete arg1;
}
static swig_lua_method swig_Watchdog_methods[] = {
    {"Feed", _wrap_Watchdog_Feed}, 
    {"Kill", _wrap_Watchdog_Kill}, 
    {"GetTimer", _wrap_Watchdog_GetTimer}, 
    {"GetExpiration", _wrap_Watchdog_GetExpiration}, 
    {"SetExpiration", _wrap_Watchdog_SetExpiration}, 
    {"GetEnabled", _wrap_Watchdog_GetEnabled}, 
    {"SetEnabled", _wrap_Watchdog_SetEnabled}, 
    {"IsAlive", _wrap_Watchdog_IsAlive}, 
    {"IsSystemActive", _wrap_Watchdog_IsSystemActive}, 
    {0,0}
};
static swig_lua_attribute swig_Watchdog_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Watchdog_bases[] = {0,0};
static const char *swig_Watchdog_base_names[] = {"SensorBase *",0};
static swig_lua_class _wrap_class_Watchdog = { "Watchdog", &SWIGTYPE_p_Watchdog,_wrap_new_Watchdog, swig_delete_Watchdog, swig_Watchdog_methods, swig_Watchdog_attributes, swig_Watchdog_bases, swig_Watchdog_base_names };

static int _wrap_IsEnabled(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsEnabled",0,0)
  result = (bool)IsEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsDisabled(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsDisabled",0,0)
  result = (bool)IsDisabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsAutonomous(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsAutonomous",0,0)
  result = (bool)IsAutonomous();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsOperatorControl(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsOperatorControl",0,0)
  result = (bool)IsOperatorControl();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsTest(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsTest",0,0)
  result = (bool)IsTest();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsSystemActive(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsSystemActive",0,0)
  result = (bool)IsSystemActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsNewDataAvailable(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsNewDataAvailable",0,0)
  result = (bool)IsNewDataAvailable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetWatchdog(lua_State* L) {
  int SWIG_arg = 0;
  Watchdog *result = 0 ;
  
  SWIG_check_num_args("GetWatchdog",0,0)
  result = (Watchdog *)GetWatchdog();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Watchdog,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


#ifdef __cplusplus
}
#endif

static const struct luaL_Reg swig_commands[] = {
    { "new_UINT8array", _wrap_new_UINT8array},
    { "delete_UINT8array", _wrap_delete_UINT8array},
    { "UINT8array_getitem", _wrap_UINT8array_getitem},
    { "UINT8array_setitem", _wrap_UINT8array_setitem},
    { "Error_EnableStackTrace", _wrap_Error_EnableStackTrace},
    { "Error_EnableSuspendOnError", _wrap_Error_EnableSuspendOnError},
    { "ErrorBase_GetGlobalError", _wrap_ErrorBase_GetGlobalError},
    { "SensorBase_DeleteSingletons", _wrap_SensorBase_DeleteSingletons},
    { "SensorBase_GetDefaultAnalogModule", _wrap_SensorBase_GetDefaultAnalogModule},
    { "SensorBase_GetDefaultDigitalModule", _wrap_SensorBase_GetDefaultDigitalModule},
    { "SensorBase_GetDefaultSolenoidModule", _wrap_SensorBase_GetDefaultSolenoidModule},
    { "SensorBase_CheckAnalogModule", _wrap_SensorBase_CheckAnalogModule},
    { "SensorBase_CheckDigitalModule", _wrap_SensorBase_CheckDigitalModule},
    { "SensorBase_CheckPWMModule", _wrap_SensorBase_CheckPWMModule},
    { "SensorBase_CheckRelayModule", _wrap_SensorBase_CheckRelayModule},
    { "SensorBase_CheckSolenoidModule", _wrap_SensorBase_CheckSolenoidModule},
    { "SensorBase_CheckDigitalChannel", _wrap_SensorBase_CheckDigitalChannel},
    { "SensorBase_CheckRelayChannel", _wrap_SensorBase_CheckRelayChannel},
    { "SensorBase_CheckPWMChannel", _wrap_SensorBase_CheckPWMChannel},
    { "SensorBase_CheckAnalogChannel", _wrap_SensorBase_CheckAnalogChannel},
    { "SensorBase_CheckSolenoidChannel", _wrap_SensorBase_CheckSolenoidChannel},
    { "Module_GetModule", _wrap_Module_GetModule},
    { "MotorSafetyHelper_CheckMotors", _wrap_MotorSafetyHelper_CheckMotors},
    { "AnalogModule_GetInstance", _wrap_AnalogModule_GetInstance},
    { "DigitalModule_GetInstance", _wrap_DigitalModule_GetInstance},
    { "DigitalModule_RemapDigitalChannel", _wrap_DigitalModule_RemapDigitalChannel},
    { "DigitalModule_UnmapDigitalChannel", _wrap_DigitalModule_UnmapDigitalChannel},
    { "DriverStation_GetInstance", _wrap_DriverStation_GetInstance},
    { "DriverStationLCD_GetInstance", _wrap_DriverStationLCD_GetInstance},
    { "Joystick_GetStickForPort", _wrap_Joystick_GetStickForPort},
    { "LiveWindow_GetInstance", _wrap_LiveWindow_GetInstance},
    { "NetworkTable_Initialize", _wrap_NetworkTable_Initialize},
    { "NetworkTable_SetServerMode", _wrap_NetworkTable_SetServerMode},
    { "NetworkTable_SetTeam", _wrap_NetworkTable_SetTeam},
    { "NetworkTable_SetIPAddress", _wrap_NetworkTable_SetIPAddress},
    { "NetworkTable_GetTable", _wrap_NetworkTable_GetTable},
    { "Servo_GetMaxAngle", _wrap_Servo_GetMaxAngle},
    { "Servo_GetMinAngle", _wrap_Servo_GetMinAngle},
    { "SmartDashboard_init", _wrap_SmartDashboard_init},
    { "SmartDashboard_PutBoolean", _wrap_SmartDashboard_PutBoolean},
    { "SmartDashboard_GetBoolean", _wrap_SmartDashboard_GetBoolean},
    { "SmartDashboard_PutNumber", _wrap_SmartDashboard_PutNumber},
    { "SmartDashboard_GetNumber", _wrap_SmartDashboard_GetNumber},
    { "SmartDashboard_PutString", _wrap_SmartDashboard_PutString},
    { "SmartDashboard_GetString",_wrap_SmartDashboard_GetString},
    { "SmartDashboard_PutValue", _wrap_SmartDashboard_PutValue},
    { "SmartDashboard_RetrieveValue", _wrap_SmartDashboard_RetrieveValue},
    { "Timer_GetFPGATimestamp", _wrap_Timer_GetFPGATimestamp},
    { "Timer_GetPPCTimestamp", _wrap_Timer_GetPPCTimestamp},
    { "Wait", _wrap_Wait},
    { "Ultrasonic_SetAutomaticMode", _wrap_Ultrasonic_SetAutomaticMode},
    { "IsEnabled", _wrap_IsEnabled},
    { "IsDisabled", _wrap_IsDisabled},
    { "IsAutonomous", _wrap_IsAutonomous},
    { "IsOperatorControl", _wrap_IsOperatorControl},
    { "IsTest", _wrap_IsTest},
    { "IsSystemActive", _wrap_IsSystemActive},
    { "IsNewDataAvailable", _wrap_IsNewDataAvailable},
    { "GetWatchdog", _wrap_GetWatchdog},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "AnalogChannel_kAccumulatorChannels", _wrap_AnalogChannel_kAccumulatorChannels_get, SWIG_Lua_set_immutable },
    { "NetworkTable_PATH_SEPARATOR_CHAR", _wrap_NetworkTable_PATH_SEPARATOR_CHAR_get, SWIG_Lua_set_immutable },
    { "NetworkTable_PATH_SEPARATOR", _wrap_NetworkTable_PATH_SEPARATOR_get, SWIG_Lua_set_immutable },
    { "NetworkTable_DEFAULT_PORT", _wrap_NetworkTable_DEFAULT_PORT_get, SWIG_Lua_set_immutable },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("SensorBase_kSystemClockTicksPerMicrosecond", SensorBase::kSystemClockTicksPerMicrosecond)},
    {SWIG_LUA_CONSTTAB_INT("SensorBase_kDigitalChannels", SensorBase::kDigitalChannels)},
    {SWIG_LUA_CONSTTAB_INT("SensorBase_kAnalogChannels", SensorBase::kAnalogChannels)},
    {SWIG_LUA_CONSTTAB_INT("SensorBase_kAnalogModules", SensorBase::kAnalogModules)},
    {SWIG_LUA_CONSTTAB_INT("SensorBase_kDigitalModules", SensorBase::kDigitalModules)},
    {SWIG_LUA_CONSTTAB_INT("SensorBase_kSolenoidChannels", SensorBase::kSolenoidChannels)},
    {SWIG_LUA_CONSTTAB_INT("SensorBase_kSolenoidModules", SensorBase::kSolenoidModules)},
    {SWIG_LUA_CONSTTAB_INT("SensorBase_kPwmChannels", SensorBase::kPwmChannels)},
    {SWIG_LUA_CONSTTAB_INT("SensorBase_kRelayChannels", SensorBase::kRelayChannels)},
    {SWIG_LUA_CONSTTAB_INT("SensorBase_kChassisSlots", SensorBase::kChassisSlots)},
    {SWIG_LUA_CONSTTAB_INT("CounterBase_k1X", CounterBase::k1X)},
    {SWIG_LUA_CONSTTAB_INT("CounterBase_k2X", CounterBase::k2X)},
    {SWIG_LUA_CONSTTAB_INT("CounterBase_k4X", CounterBase::k4X)},
    {SWIG_LUA_CONSTTAB_INT("PWM_kPeriodMultiplier_1X", PWM::kPeriodMultiplier_1X)},
    {SWIG_LUA_CONSTTAB_INT("PWM_kPeriodMultiplier_2X", PWM::kPeriodMultiplier_2X)},
    {SWIG_LUA_CONSTTAB_INT("PWM_kPeriodMultiplier_4X", PWM::kPeriodMultiplier_4X)},
    {SWIG_LUA_CONSTTAB_INT("GenericHID_kLeftHand", GenericHID::kLeftHand)},
    {SWIG_LUA_CONSTTAB_INT("GenericHID_kRightHand", GenericHID::kRightHand)},
    {SWIG_LUA_CONSTTAB_INT("ADXL345_I2C_kRange_2G", ADXL345_I2C::kRange_2G)},
    {SWIG_LUA_CONSTTAB_INT("ADXL345_I2C_kRange_4G", ADXL345_I2C::kRange_4G)},
    {SWIG_LUA_CONSTTAB_INT("ADXL345_I2C_kRange_8G", ADXL345_I2C::kRange_8G)},
    {SWIG_LUA_CONSTTAB_INT("ADXL345_I2C_kRange_16G", ADXL345_I2C::kRange_16G)},
    {SWIG_LUA_CONSTTAB_INT("ADXL345_I2C_kAxis_X", ADXL345_I2C::kAxis_X)},
    {SWIG_LUA_CONSTTAB_INT("ADXL345_I2C_kAxis_Y", ADXL345_I2C::kAxis_Y)},
    {SWIG_LUA_CONSTTAB_INT("ADXL345_I2C_kAxis_Z", ADXL345_I2C::kAxis_Z)},
    {SWIG_LUA_CONSTTAB_INT("AnalogChannel_kAccumulatorModuleNumber", AnalogChannel::kAccumulatorModuleNumber)},
    {SWIG_LUA_CONSTTAB_INT("AnalogChannel_kAccumulatorNumChannels", AnalogChannel::kAccumulatorNumChannels)},
    {SWIG_LUA_CONSTTAB_INT("AnalogModule_kTimebase", AnalogModule::kTimebase)},
    {SWIG_LUA_CONSTTAB_INT("AnalogModule_kDefaultOversampleBits", AnalogModule::kDefaultOversampleBits)},
    {SWIG_LUA_CONSTTAB_INT("AnalogModule_kDefaultAverageBits", AnalogModule::kDefaultAverageBits)},
    {SWIG_LUA_CONSTTAB_FLOAT("AnalogModule_kDefaultSampleRate", AnalogModule::kDefaultSampleRate)},
    {SWIG_LUA_CONSTTAB_INT("AnalogTriggerOutput_kInWindow", AnalogTriggerOutput::kInWindow)},
    {SWIG_LUA_CONSTTAB_INT("AnalogTriggerOutput_kState", AnalogTriggerOutput::kState)},
    {SWIG_LUA_CONSTTAB_INT("AnalogTriggerOutput_kRisingPulse", AnalogTriggerOutput::kRisingPulse)},
    {SWIG_LUA_CONSTTAB_INT("AnalogTriggerOutput_kFallingPulse", AnalogTriggerOutput::kFallingPulse)},
    {SWIG_LUA_CONSTTAB_INT("Counter_kTwoPulse", Counter::kTwoPulse)},
    {SWIG_LUA_CONSTTAB_INT("Counter_kSemiperiod", Counter::kSemiperiod)},
    {SWIG_LUA_CONSTTAB_INT("Counter_kPulseLength", Counter::kPulseLength)},
    {SWIG_LUA_CONSTTAB_INT("Counter_kExternalDirection", Counter::kExternalDirection)},
    {SWIG_LUA_CONSTTAB_INT("Dashboard_kI8", Dashboard::kI8)},
    {SWIG_LUA_CONSTTAB_INT("Dashboard_kI16", Dashboard::kI16)},
    {SWIG_LUA_CONSTTAB_INT("Dashboard_kI32", Dashboard::kI32)},
    {SWIG_LUA_CONSTTAB_INT("Dashboard_kU8", Dashboard::kU8)},
    {SWIG_LUA_CONSTTAB_INT("Dashboard_kU16", Dashboard::kU16)},
    {SWIG_LUA_CONSTTAB_INT("Dashboard_kU32", Dashboard::kU32)},
    {SWIG_LUA_CONSTTAB_INT("Dashboard_kFloat", Dashboard::kFloat)},
    {SWIG_LUA_CONSTTAB_INT("Dashboard_kDouble", Dashboard::kDouble)},
    {SWIG_LUA_CONSTTAB_INT("Dashboard_kBoolean", Dashboard::kBoolean)},
    {SWIG_LUA_CONSTTAB_INT("Dashboard_kString", Dashboard::kString)},
    {SWIG_LUA_CONSTTAB_INT("Dashboard_kOther", Dashboard::kOther)},
    {SWIG_LUA_CONSTTAB_INT("Dashboard_kArray", Dashboard::kArray)},
    {SWIG_LUA_CONSTTAB_INT("Dashboard_kCluster", Dashboard::kCluster)},
    {SWIG_LUA_CONSTTAB_INT("DoubleSolenoid_kOff", DoubleSolenoid::kOff)},
    {SWIG_LUA_CONSTTAB_INT("DoubleSolenoid_kForward", DoubleSolenoid::kForward)},
    {SWIG_LUA_CONSTTAB_INT("DoubleSolenoid_kReverse", DoubleSolenoid::kReverse)},
    {SWIG_LUA_CONSTTAB_INT("DriverStation_kRed", DriverStation::kRed)},
    {SWIG_LUA_CONSTTAB_INT("DriverStation_kBlue", DriverStation::kBlue)},
    {SWIG_LUA_CONSTTAB_INT("DriverStation_kInvalid", DriverStation::kInvalid)},
    {SWIG_LUA_CONSTTAB_INT("DriverStation_kBatteryModuleNumber", DriverStation::kBatteryModuleNumber)},
    {SWIG_LUA_CONSTTAB_INT("DriverStation_kBatteryChannel", DriverStation::kBatteryChannel)},
    {SWIG_LUA_CONSTTAB_INT("DriverStation_kJoystickPorts", DriverStation::kJoystickPorts)},
    {SWIG_LUA_CONSTTAB_INT("DriverStation_kJoystickAxes", DriverStation::kJoystickAxes)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationEnhancedIO_kUnknown", DriverStationEnhancedIO::kUnknown)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationEnhancedIO_kInputFloating", DriverStationEnhancedIO::kInputFloating)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationEnhancedIO_kInputPullUp", DriverStationEnhancedIO::kInputPullUp)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationEnhancedIO_kInputPullDown", DriverStationEnhancedIO::kInputPullDown)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationEnhancedIO_kOutput", DriverStationEnhancedIO::kOutput)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationEnhancedIO_kPWM", DriverStationEnhancedIO::kPWM)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationEnhancedIO_kAnalogComparator", DriverStationEnhancedIO::kAnalogComparator)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationEnhancedIO_kAccelX", DriverStationEnhancedIO::kAccelX)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationEnhancedIO_kAccelY", DriverStationEnhancedIO::kAccelY)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationEnhancedIO_kAccelZ", DriverStationEnhancedIO::kAccelZ)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationEnhancedIO_kPWMChannels1and2", DriverStationEnhancedIO::kPWMChannels1and2)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationEnhancedIO_kPWMChannels3and4", DriverStationEnhancedIO::kPWMChannels3and4)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationLCD_kSyncTimeout_ms", DriverStationLCD::kSyncTimeout_ms)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationLCD_kFullDisplayTextCommand", DriverStationLCD::kFullDisplayTextCommand)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationLCD_kLineLength", DriverStationLCD::kLineLength)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationLCD_kNumLines", DriverStationLCD::kNumLines)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationLCD_kMain_Line6", DriverStationLCD::kMain_Line6)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationLCD_kUser_Line1", DriverStationLCD::kUser_Line1)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationLCD_kUser_Line2", DriverStationLCD::kUser_Line2)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationLCD_kUser_Line3", DriverStationLCD::kUser_Line3)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationLCD_kUser_Line4", DriverStationLCD::kUser_Line4)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationLCD_kUser_Line5", DriverStationLCD::kUser_Line5)},
    {SWIG_LUA_CONSTTAB_INT("DriverStationLCD_kUser_Line6", DriverStationLCD::kUser_Line6)},
    {SWIG_LUA_CONSTTAB_FLOAT("GearTooth_kGearToothThreshold", GearTooth::kGearToothThreshold)},
    {SWIG_LUA_CONSTTAB_INT("Gyro_kOversampleBits", Gyro::kOversampleBits)},
    {SWIG_LUA_CONSTTAB_INT("Gyro_kAverageBits", Gyro::kAverageBits)},
    {SWIG_LUA_CONSTTAB_FLOAT("Gyro_kSamplesPerSecond", Gyro::kSamplesPerSecond)},
    {SWIG_LUA_CONSTTAB_FLOAT("Gyro_kCalibrationSampleTime", Gyro::kCalibrationSampleTime)},
    {SWIG_LUA_CONSTTAB_FLOAT("Gyro_kDefaultVoltsPerDegreePerSecond", Gyro::kDefaultVoltsPerDegreePerSecond)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kDefaultXAxis", Joystick::kDefaultXAxis)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kDefaultYAxis", Joystick::kDefaultYAxis)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kDefaultZAxis", Joystick::kDefaultZAxis)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kDefaultTwistAxis", Joystick::kDefaultTwistAxis)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kDefaultThrottleAxis", Joystick::kDefaultThrottleAxis)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kXAxis", Joystick::kXAxis)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kYAxis", Joystick::kYAxis)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kZAxis", Joystick::kZAxis)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kTwistAxis", Joystick::kTwistAxis)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kThrottleAxis", Joystick::kThrottleAxis)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kNumAxisTypes", Joystick::kNumAxisTypes)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kDefaultTriggerButton", Joystick::kDefaultTriggerButton)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kDefaultTopButton", Joystick::kDefaultTopButton)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kTriggerButton", Joystick::kTriggerButton)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kTopButton", Joystick::kTopButton)},
    {SWIG_LUA_CONSTTAB_INT("Joystick_kNumButtonTypes", Joystick::kNumButtonTypes)},
    {SWIG_LUA_CONSTTAB_INT("Relay_kOff", Relay::kOff)},
    {SWIG_LUA_CONSTTAB_INT("Relay_kOn", Relay::kOn)},
    {SWIG_LUA_CONSTTAB_INT("Relay_kForward", Relay::kForward)},
    {SWIG_LUA_CONSTTAB_INT("Relay_kReverse", Relay::kReverse)},
    {SWIG_LUA_CONSTTAB_INT("Relay_kBothDirections", Relay::kBothDirections)},
    {SWIG_LUA_CONSTTAB_INT("Relay_kForwardOnly", Relay::kForwardOnly)},
    {SWIG_LUA_CONSTTAB_INT("Relay_kReverseOnly", Relay::kReverseOnly)},
    {SWIG_LUA_CONSTTAB_INT("RobotDrive_kFrontLeftMotor", RobotDrive::kFrontLeftMotor)},
    {SWIG_LUA_CONSTTAB_INT("RobotDrive_kFrontRightMotor", RobotDrive::kFrontRightMotor)},
    {SWIG_LUA_CONSTTAB_INT("RobotDrive_kRearLeftMotor", RobotDrive::kRearLeftMotor)},
    {SWIG_LUA_CONSTTAB_INT("RobotDrive_kRearRightMotor", RobotDrive::kRearRightMotor)},
    {SWIG_LUA_CONSTTAB_INT("SerialPort_kParity_None", SerialPort::kParity_None)},
    {SWIG_LUA_CONSTTAB_INT("SerialPort_kParity_Odd", SerialPort::kParity_Odd)},
    {SWIG_LUA_CONSTTAB_INT("SerialPort_kParity_Even", SerialPort::kParity_Even)},
    {SWIG_LUA_CONSTTAB_INT("SerialPort_kParity_Mark", SerialPort::kParity_Mark)},
    {SWIG_LUA_CONSTTAB_INT("SerialPort_kParity_Space", SerialPort::kParity_Space)},
    {SWIG_LUA_CONSTTAB_INT("SerialPort_kStopBits_One", SerialPort::kStopBits_One)},
    {SWIG_LUA_CONSTTAB_INT("SerialPort_kStopBits_OnePointFive", SerialPort::kStopBits_OnePointFive)},
    {SWIG_LUA_CONSTTAB_INT("SerialPort_kStopBits_Two", SerialPort::kStopBits_Two)},
    {SWIG_LUA_CONSTTAB_INT("SerialPort_kFlowControl_None", SerialPort::kFlowControl_None)},
    {SWIG_LUA_CONSTTAB_INT("SerialPort_kFlowControl_XonXoff", SerialPort::kFlowControl_XonXoff)},
    {SWIG_LUA_CONSTTAB_INT("SerialPort_kFlowControl_RtsCts", SerialPort::kFlowControl_RtsCts)},
    {SWIG_LUA_CONSTTAB_INT("SerialPort_kFlowControl_DtrDsr", SerialPort::kFlowControl_DtrDsr)},
    {SWIG_LUA_CONSTTAB_INT("SerialPort_kFlushOnAccess", SerialPort::kFlushOnAccess)},
    {SWIG_LUA_CONSTTAB_INT("SerialPort_kFlushWhenFull", SerialPort::kFlushWhenFull)},
    {SWIG_LUA_CONSTTAB_INT("Ultrasonic_kInches", Ultrasonic::kInches)},
    {SWIG_LUA_CONSTTAB_INT("Ultrasonic_kMilliMeters", Ultrasonic::kMilliMeters)},
    {SWIG_LUA_CONSTTAB_FLOAT("Watchdog_kDefaultWatchdogExpiration", Watchdog::kDefaultWatchdogExpiration)},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_JaguarTo_p_PWM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PWM *) (SafePWM *) ((Jaguar *) x));
}
static void *_p_VictorTo_p_PWM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PWM *) (SafePWM *) ((Victor *) x));
}
static void *_p_SafePWMTo_p_PWM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PWM *)  ((SafePWM *) x));
}
static void *_p_ServoTo_p_PWM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PWM *) (SafePWM *) ((Servo *) x));
}
static void *_p_TalonTo_p_PWM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PWM *) (SafePWM *) ((Talon *) x));
}
static void *_p_JaguarTo_p_MotorSafety(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MotorSafety *) (SafePWM *) ((Jaguar *) x));
}
static void *_p_VictorTo_p_MotorSafety(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MotorSafety *) (SafePWM *) ((Victor *) x));
}
static void *_p_SafePWMTo_p_MotorSafety(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MotorSafety *)  ((SafePWM *) x));
}
static void *_p_RobotDriveTo_p_MotorSafety(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MotorSafety *)  ((RobotDrive *) x));
}
static void *_p_ServoTo_p_MotorSafety(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MotorSafety *) (SafePWM *) ((Servo *) x));
}
static void *_p_TalonTo_p_MotorSafety(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MotorSafety *) (SafePWM *) ((Talon *) x));
}
static void *_p_DigitalModuleTo_p_Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Module *)  ((DigitalModule *) x));
}
static void *_p_AnalogModuleTo_p_Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Module *)  ((AnalogModule *) x));
}
static void *_p_DoubleSolenoidTo_p_SolenoidBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SolenoidBase *)  ((DoubleSolenoid *) x));
}
static void *_p_SolenoidTo_p_SolenoidBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SolenoidBase *)  ((Solenoid *) x));
}
static void *_p_GearToothTo_p_Counter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Counter *)  ((GearTooth *) x));
}
static void *_p_RelayTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((Relay *) x));
}
static void *_p_HiTechnicCompassTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((HiTechnicCompass *) x));
}
static void *_p_WatchdogTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((Watchdog *) x));
}
static void *_p_TalonTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *)(PWM *)(SafePWM *) ((Talon *) x));
}
static void *_p_AccelerometerTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((Accelerometer *) x));
}
static void *_p_UltrasonicTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((Ultrasonic *) x));
}
static void *_p_DriverStationTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((DriverStation *) x));
}
static void *_p_DigitalSourceTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *)(InterruptableSensorBase *) ((DigitalSource *) x));
}
static void *_p_DigitalModuleTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *)(Module *) ((DigitalModule *) x));
}
static void *_p_ModuleTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((Module *) x));
}
static void *_p_CompressorTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((Compressor *) x));
}
static void *_p_PWMTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((PWM *) x));
}
static void *_p_SolenoidTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *)(SolenoidBase *) ((Solenoid *) x));
}
static void *_p_DoubleSolenoidTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *)(SolenoidBase *) ((DoubleSolenoid *) x));
}
static void *_p_DriverStationEnhancedIOTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *)  ((DriverStationEnhancedIO *) x));
}
static void *_p_GyroTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((Gyro *) x));
}
static void *_p_ADXL345_I2CTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((ADXL345_I2C *) x));
}
static void *_p_SensorBaseTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *)  ((SensorBase *) x));
}
static void *_p_InterruptableSensorBaseTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((InterruptableSensorBase *) x));
}
static void *_p_VictorTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *)(PWM *)(SafePWM *) ((Victor *) x));
}
static void *_p_DigitalOutputTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((DigitalOutput *) x));
}
static void *_p_AnalogTriggerOutputTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *)(InterruptableSensorBase *)(DigitalSource *) ((AnalogTriggerOutput *) x));
}
static void *_p_SmartDashboardTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((SmartDashboard *) x));
}
static void *_p_DashboardTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (DashboardBase *) ((Dashboard *) x));
}
static void *_p_CounterTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((Counter *) x));
}
static void *_p_SafePWMTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *)(PWM *) ((SafePWM *) x));
}
static void *_p_DriverStationLCDTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((DriverStationLCD *) x));
}
static void *_p_AnalogModuleTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *)(Module *) ((AnalogModule *) x));
}
static void *_p_DashboardBaseTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *)  ((DashboardBase *) x));
}
static void *_p_AnalogTriggerTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((AnalogTrigger *) x));
}
static void *_p_GearToothTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *)(Counter *) ((GearTooth *) x));
}
static void *_p_AnalogChannelTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((AnalogChannel *) x));
}
static void *_p_NetworkTableTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *)  ((NetworkTable *) x));
}
static void *_p_SolenoidBaseTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((SolenoidBase *) x));
}
static void *_p_EncoderTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *) ((Encoder *) x));
}
static void *_p_ServoTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *)(PWM *)(SafePWM *) ((Servo *) x));
}
static void *_p_JaguarTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *)(PWM *)(SafePWM *) ((Jaguar *) x));
}
static void *_p_DigitalInputTo_p_ErrorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ErrorBase *) (SensorBase *)(InterruptableSensorBase *)(DigitalSource *) ((DigitalInput *) x));
}
static void *_p_DigitalSourceTo_p_InterruptableSensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((InterruptableSensorBase *)  ((DigitalSource *) x));
}
static void *_p_AnalogTriggerOutputTo_p_InterruptableSensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((InterruptableSensorBase *) (DigitalSource *) ((AnalogTriggerOutput *) x));
}
static void *_p_DigitalInputTo_p_InterruptableSensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((InterruptableSensorBase *) (DigitalSource *) ((DigitalInput *) x));
}
static void *_p_RelayTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((Relay *) x));
}
static void *_p_HiTechnicCompassTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((HiTechnicCompass *) x));
}
static void *_p_WatchdogTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((Watchdog *) x));
}
static void *_p_TalonTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *) (PWM *)(SafePWM *) ((Talon *) x));
}
static void *_p_AccelerometerTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((Accelerometer *) x));
}
static void *_p_UltrasonicTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((Ultrasonic *) x));
}
static void *_p_DriverStationTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((DriverStation *) x));
}
static void *_p_DigitalSourceTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *) (InterruptableSensorBase *) ((DigitalSource *) x));
}
static void *_p_DigitalModuleTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *) (Module *) ((DigitalModule *) x));
}
static void *_p_ModuleTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((Module *) x));
}
static void *_p_CompressorTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((Compressor *) x));
}
static void *_p_I2CTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((I2C *) x));
}
static void *_p_PWMTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((PWM *) x));
}
static void *_p_SolenoidTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *) (SolenoidBase *) ((Solenoid *) x));
}
static void *_p_DoubleSolenoidTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *) (SolenoidBase *) ((DoubleSolenoid *) x));
}
static void *_p_GyroTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((Gyro *) x));
}
static void *_p_ADXL345_I2CTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((ADXL345_I2C *) x));
}
static void *_p_VictorTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *) (PWM *)(SafePWM *) ((Victor *) x));
}
static void *_p_InterruptableSensorBaseTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((InterruptableSensorBase *) x));
}
static void *_p_DigitalOutputTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((DigitalOutput *) x));
}
static void *_p_AnalogTriggerOutputTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *) (InterruptableSensorBase *)(DigitalSource *) ((AnalogTriggerOutput *) x));
}
static void *_p_SmartDashboardTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((SmartDashboard *) x));
}
static void *_p_CounterTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((Counter *) x));
}
static void *_p_SafePWMTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *) (PWM *) ((SafePWM *) x));
}
static void *_p_DriverStationLCDTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((DriverStationLCD *) x));
}
static void *_p_AnalogModuleTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *) (Module *) ((AnalogModule *) x));
}
static void *_p_AnalogTriggerTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((AnalogTrigger *) x));
}
static void *_p_GearToothTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *) (Counter *) ((GearTooth *) x));
}
static void *_p_AnalogChannelTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((AnalogChannel *) x));
}
static void *_p_SolenoidBaseTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((SolenoidBase *) x));
}
static void *_p_EncoderTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *)  ((Encoder *) x));
}
static void *_p_ServoTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *) (PWM *)(SafePWM *) ((Servo *) x));
}
static void *_p_JaguarTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *) (PWM *)(SafePWM *) ((Jaguar *) x));
}
static void *_p_DigitalInputTo_p_SensorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SensorBase *) (InterruptableSensorBase *)(DigitalSource *) ((DigitalInput *) x));
}
static void *_p_JaguarTo_p_PIDOutput(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PIDOutput *)  ((Jaguar *) x));
}
static void *_p_VictorTo_p_PIDOutput(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PIDOutput *)  ((Victor *) x));
}
static void *_p_JaguarTo_p_SafePWM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SafePWM *)  ((Jaguar *) x));
}
static void *_p_VictorTo_p_SafePWM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SafePWM *)  ((Victor *) x));
}
static void *_p_ServoTo_p_SafePWM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SafePWM *)  ((Servo *) x));
}
static void *_p_TalonTo_p_SafePWM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SafePWM *)  ((Talon *) x));
}
static void *_p_AnalogTriggerOutputTo_p_DigitalSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DigitalSource *)  ((AnalogTriggerOutput *) x));
}
static void *_p_DigitalInputTo_p_DigitalSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DigitalSource *)  ((DigitalInput *) x));
}
static void *_p_AnalogChannelTo_p_PIDSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PIDSource *)  ((AnalogChannel *) x));
}
static void *_p_AccelerometerTo_p_PIDSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PIDSource *)  ((Accelerometer *) x));
}
static void *_p_UltrasonicTo_p_PIDSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PIDSource *)  ((Ultrasonic *) x));
}
static void *_p_GyroTo_p_PIDSource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((PIDSource *)  ((Gyro *) x));
}
static void *_p_CounterTo_p_CounterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CounterBase *)  ((Counter *) x));
}
static void *_p_EncoderTo_p_CounterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CounterBase *)  ((Encoder *) x));
}
static void *_p_GearToothTo_p_CounterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CounterBase *) (Counter *) ((GearTooth *) x));
}
static void *_p_JaguarTo_p_SpeedController(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SpeedController *)  ((Jaguar *) x));
}
static void *_p_VictorTo_p_SpeedController(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SpeedController *)  ((Victor *) x));
}
static void *_p_TalonTo_p_SpeedController(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SpeedController *)  ((Talon *) x));
}
static void *_p_JoystickTo_p_GenericHID(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GenericHID *)  ((Joystick *) x));
}
static void *_p_DashboardTo_p_DashboardBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DashboardBase *)  ((Dashboard *) x));
}
static swig_type_info _swigt__p_ADXL345_I2C = {"_p_ADXL345_I2C", "ADXL345_I2C *", 0, 0, (void*)&_wrap_class_ADXL345_I2C, 0};
static swig_type_info _swigt__p_Accelerometer = {"_p_Accelerometer", "Accelerometer *", 0, 0, (void*)&_wrap_class_Accelerometer, 0};
static swig_type_info _swigt__p_AnalogChannel = {"_p_AnalogChannel", "AnalogChannel *", 0, 0, (void*)&_wrap_class_AnalogChannel, 0};
static swig_type_info _swigt__p_AnalogModule = {"_p_AnalogModule", "AnalogModule *", 0, 0, (void*)&_wrap_class_AnalogModule, 0};
static swig_type_info _swigt__p_AnalogTrigger = {"_p_AnalogTrigger", "AnalogTrigger *", 0, 0, (void*)&_wrap_class_AnalogTrigger, 0};
static swig_type_info _swigt__p_AnalogTriggerOutput = {"_p_AnalogTriggerOutput", "AnalogTriggerOutput *", 0, 0, (void*)&_wrap_class_AnalogTriggerOutput, 0};
static swig_type_info _swigt__p_AxisType = {"_p_AxisType", "AxisType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ButtonType = {"_p_ButtonType", "ButtonType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Code = {"_p_Code", "Code *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ComplexData = {"_p_ComplexData", "ComplexData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Compressor = {"_p_Compressor", "Compressor *", 0, 0, (void*)&_wrap_class_Compressor, 0};
static swig_type_info _swigt__p_Counter = {"_p_Counter", "Counter *", 0, 0, (void*)&_wrap_class_Counter, 0};
static swig_type_info _swigt__p_CounterBase = {"_p_CounterBase", "CounterBase *", 0, 0, (void*)&_wrap_class_CounterBase, 0};
static swig_type_info _swigt__p_Dashboard = {"_p_Dashboard", "Dashboard *", 0, 0, (void*)&_wrap_class_Dashboard, 0};
static swig_type_info _swigt__p_DashboardBase = {"_p_DashboardBase", "DashboardBase *", 0, 0, (void*)&_wrap_class_DashboardBase, 0};
static swig_type_info _swigt__p_DigitalInput = {"_p_DigitalInput", "DigitalInput *", 0, 0, (void*)&_wrap_class_DigitalInput, 0};
static swig_type_info _swigt__p_DigitalModule = {"_p_DigitalModule", "DigitalModule *", 0, 0, (void*)&_wrap_class_DigitalModule, 0};
static swig_type_info _swigt__p_DigitalOutput = {"_p_DigitalOutput", "DigitalOutput *", 0, 0, (void*)&_wrap_class_DigitalOutput, 0};
static swig_type_info _swigt__p_DigitalSource = {"_p_DigitalSource", "DigitalSource *", 0, 0, (void*)&_wrap_class_DigitalSource, 0};
static swig_type_info _swigt__p_Direction = {"_p_Direction", "Direction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DistanceUnit = {"_p_DistanceUnit", "DistanceUnit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DoubleSolenoid = {"_p_DoubleSolenoid", "DoubleSolenoid *", 0, 0, (void*)&_wrap_class_DoubleSolenoid, 0};
static swig_type_info _swigt__p_DriverStation = {"_p_DriverStation", "DriverStation *", 0, 0, (void*)&_wrap_class_DriverStation, 0};
static swig_type_info _swigt__p_DriverStationEnhancedIO = {"_p_DriverStationEnhancedIO", "DriverStationEnhancedIO *", 0, 0, (void*)&_wrap_class_DriverStationEnhancedIO, 0};
static swig_type_info _swigt__p_DriverStationLCD = {"_p_DriverStationLCD", "DriverStationLCD *", 0, 0, (void*)&_wrap_class_DriverStationLCD, 0};
static swig_type_info _swigt__p_Encoder = {"_p_Encoder", "Encoder *", 0, 0, (void*)&_wrap_class_Encoder, 0};
static swig_type_info _swigt__p_EncodingType = {"_p_EncodingType", "EncodingType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EntryValue = {"_p_EntryValue", "EntryValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Error = {"_p_Error", "Error *", 0, 0, (void*)&_wrap_class_Error, 0};
static swig_type_info _swigt__p_ErrorBase = {"_p_ErrorBase", "ErrorBase *", 0, 0, (void*)&_wrap_class_ErrorBase, 0};
static swig_type_info _swigt__p_FlowControl = {"_p_FlowControl", "FlowControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GearTooth = {"_p_GearTooth", "GearTooth *", 0, 0, (void*)&_wrap_class_GearTooth, 0};
static swig_type_info _swigt__p_GenericHID = {"_p_GenericHID", "GenericHID *", 0, 0, (void*)&_wrap_class_GenericHID, 0};
static swig_type_info _swigt__p_Gyro = {"_p_Gyro", "Gyro *", 0, 0, (void*)&_wrap_class_Gyro, 0};
static swig_type_info _swigt__p_HiTechnicCompass = {"_p_HiTechnicCompass", "HiTechnicCompass *", 0, 0, (void*)&_wrap_class_HiTechnicCompass, 0};
static swig_type_info _swigt__p_I2C = {"_p_I2C", "I2C *", 0, 0, (void*)&_wrap_class_I2C, 0};
static swig_type_info _swigt__p_IRemoteConnectionListener = {"_p_IRemoteConnectionListener", "IRemoteConnectionListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ITableListener = {"_p_ITableListener", "ITableListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InterruptableSensorBase = {"_p_InterruptableSensorBase", "InterruptableSensorBase *", 0, 0, (void*)&_wrap_class_InterruptableSensorBase, 0};
static swig_type_info _swigt__p_Jaguar = {"_p_Jaguar", "Jaguar *", 0, 0, (void*)&_wrap_class_Jaguar, 0};
static swig_type_info _swigt__p_Joystick = {"_p_Joystick", "Joystick *", 0, 0, (void*)&_wrap_class_Joystick, 0};
static swig_type_info _swigt__p_JoystickHand = {"_p_JoystickHand", "JoystickHand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LiveWindow = {"_p_LiveWindow", "LiveWindow *", 0, 0, (void*)&_wrap_class_LiveWindow, 0};
static swig_type_info _swigt__p_Mode = {"_p_Mode", "Mode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Module = {"_p_Module", "Module *", 0, 0, (void*)&_wrap_class_Module, 0};
static swig_type_info _swigt__p_MotorSafety = {"_p_MotorSafety", "MotorSafety *", 0, 0, (void*)&_wrap_class_MotorSafety, 0};
static swig_type_info _swigt__p_MotorSafetyHelper = {"_p_MotorSafetyHelper", "MotorSafetyHelper *", 0, 0, (void*)&_wrap_class_MotorSafetyHelper, 0};
static swig_type_info _swigt__p_MotorType = {"_p_MotorType", "MotorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NetworkTable = {"_p_NetworkTable", "NetworkTable *", 0, 0, (void*)&_wrap_class_NetworkTable, 0};
static swig_type_info _swigt__p_NetworkTableEntryType = {"_p_NetworkTableEntryType", "NetworkTableEntryType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NetworkTableProvider = {"_p_NetworkTableProvider", "NetworkTableProvider *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PIDController = {"_p_PIDController", "PIDController *", 0, 0, (void*)&_wrap_class_PIDController, 0};
static swig_type_info _swigt__p_PIDOutput = {"_p_PIDOutput", "PIDOutput *", 0, 0, (void*)&_wrap_class_PIDOutput, 0};
static swig_type_info _swigt__p_PIDSource = {"_p_PIDSource", "PIDSource *", 0, 0, (void*)&_wrap_class_PIDSource, 0};
static swig_type_info _swigt__p_PWM = {"_p_PWM", "PWM *", 0, 0, (void*)&_wrap_class_PWM, 0};
static swig_type_info _swigt__p_Parity = {"_p_Parity", "Parity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PeriodMultiplier = {"_p_PeriodMultiplier", "PeriodMultiplier *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Relay = {"_p_Relay", "Relay *", 0, 0, (void*)&_wrap_class_Relay, 0};
static swig_type_info _swigt__p_RobotDrive = {"_p_RobotDrive", "RobotDrive *", 0, 0, (void*)&_wrap_class_RobotDrive, 0};
static swig_type_info _swigt__p_SEM_ID = {"_p_SEM_ID", "SEM_ID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SafePWM = {"_p_SafePWM", "SafePWM *", 0, 0, (void*)&_wrap_class_SafePWM, 0};
static swig_type_info _swigt__p_SensorBase = {"_p_SensorBase", "SensorBase *", 0, 0, (void*)&_wrap_class_SensorBase, 0};
static swig_type_info _swigt__p_SerialPort = {"_p_SerialPort", "SerialPort *", 0, 0, (void*)&_wrap_class_SerialPort, 0};
static swig_type_info _swigt__p_Servo = {"_p_Servo", "Servo *", 0, 0, (void*)&_wrap_class_Servo, 0};
static swig_type_info _swigt__p_SmartDashboard = {"_p_SmartDashboard", "SmartDashboard *", 0, 0, (void*)&_wrap_class_SmartDashboard, 0};
static swig_type_info _swigt__p_Solenoid = {"_p_Solenoid", "Solenoid *", 0, 0, (void*)&_wrap_class_Solenoid, 0};
static swig_type_info _swigt__p_SolenoidBase = {"_p_SolenoidBase", "SolenoidBase *", 0, 0, (void*)&_wrap_class_SolenoidBase, 0};
static swig_type_info _swigt__p_SpeedController = {"_p_SpeedController", "SpeedController *", 0, 0, (void*)&_wrap_class_SpeedController, 0};
static swig_type_info _swigt__p_StopBits = {"_p_StopBits", "StopBits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Talon = {"_p_Talon", "Talon *", 0, 0, (void*)&_wrap_class_Talon, 0};
static swig_type_info _swigt__p_Timer = {"_p_Timer", "Timer *", 0, 0, (void*)&_wrap_class_Timer, 0};
static swig_type_info _swigt__p_Type = {"_p_Type", "Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ultrasonic = {"_p_Ultrasonic", "Ultrasonic *", 0, 0, (void*)&_wrap_class_Ultrasonic, 0};
static swig_type_info _swigt__p_Value = {"_p_Value", "Value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Victor = {"_p_Victor", "Victor *", 0, 0, (void*)&_wrap_class_Victor, 0};
static swig_type_info _swigt__p_Watchdog = {"_p_Watchdog", "Watchdog *", 0, 0, (void*)&_wrap_class_Watchdog, 0};
static swig_type_info _swigt__p_WriteBufferMode = {"_p_WriteBufferMode", "WriteBufferMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "INT32 *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "INT64 *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nLoadOut__tModuleType = {"_p_nLoadOut__tModuleType", "nLoadOut::tModuleType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|INT16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|INT8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_std__vectorT_char_const_p_t = {"_p_std__vectorT_char_const_p_t", "std::vector< char const * > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_char_SS_const_Sm__Sg_, 0};
static swig_type_info _swigt__p_tRioStatusCode = {"_p_tRioStatusCode", "Error::Code *|tRioStatusCode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|UINT8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "UINT32 *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "UINT64 *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|UINT16 *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ADXL345_I2C,
  &_swigt__p_Accelerometer,
  &_swigt__p_AnalogChannel,
  &_swigt__p_AnalogModule,
  &_swigt__p_AnalogTrigger,
  &_swigt__p_AnalogTriggerOutput,
  &_swigt__p_AxisType,
  &_swigt__p_ButtonType,
  &_swigt__p_Code,
  &_swigt__p_ComplexData,
  &_swigt__p_Compressor,
  &_swigt__p_Counter,
  &_swigt__p_CounterBase,
  &_swigt__p_Dashboard,
  &_swigt__p_DashboardBase,
  &_swigt__p_DigitalInput,
  &_swigt__p_DigitalModule,
  &_swigt__p_DigitalOutput,
  &_swigt__p_DigitalSource,
  &_swigt__p_Direction,
  &_swigt__p_DistanceUnit,
  &_swigt__p_DoubleSolenoid,
  &_swigt__p_DriverStation,
  &_swigt__p_DriverStationEnhancedIO,
  &_swigt__p_DriverStationLCD,
  &_swigt__p_Encoder,
  &_swigt__p_EncodingType,
  &_swigt__p_EntryValue,
  &_swigt__p_Error,
  &_swigt__p_ErrorBase,
  &_swigt__p_FlowControl,
  &_swigt__p_GearTooth,
  &_swigt__p_GenericHID,
  &_swigt__p_Gyro,
  &_swigt__p_HiTechnicCompass,
  &_swigt__p_I2C,
  &_swigt__p_IRemoteConnectionListener,
  &_swigt__p_ITableListener,
  &_swigt__p_InterruptableSensorBase,
  &_swigt__p_Jaguar,
  &_swigt__p_Joystick,
  &_swigt__p_JoystickHand,
  &_swigt__p_LiveWindow,
  &_swigt__p_Mode,
  &_swigt__p_Module,
  &_swigt__p_MotorSafety,
  &_swigt__p_MotorSafetyHelper,
  &_swigt__p_MotorType,
  &_swigt__p_NetworkTable,
  &_swigt__p_NetworkTableEntryType,
  &_swigt__p_NetworkTableProvider,
  &_swigt__p_PIDController,
  &_swigt__p_PIDOutput,
  &_swigt__p_PIDSource,
  &_swigt__p_PWM,
  &_swigt__p_Parity,
  &_swigt__p_PeriodMultiplier,
  &_swigt__p_Relay,
  &_swigt__p_RobotDrive,
  &_swigt__p_SEM_ID,
  &_swigt__p_SafePWM,
  &_swigt__p_SensorBase,
  &_swigt__p_SerialPort,
  &_swigt__p_Servo,
  &_swigt__p_SmartDashboard,
  &_swigt__p_Solenoid,
  &_swigt__p_SolenoidBase,
  &_swigt__p_SpeedController,
  &_swigt__p_StopBits,
  &_swigt__p_Talon,
  &_swigt__p_Timer,
  &_swigt__p_Type,
  &_swigt__p_Ultrasonic,
  &_swigt__p_Value,
  &_swigt__p_Victor,
  &_swigt__p_Watchdog,
  &_swigt__p_WriteBufferMode,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_nLoadOut__tModuleType,
  &_swigt__p_p_char,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_char_const_p_t,
  &_swigt__p_tRioStatusCode,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_ADXL345_I2C[] = {  {&_swigt__p_ADXL345_I2C, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Accelerometer[] = {  {&_swigt__p_Accelerometer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AnalogChannel[] = {  {&_swigt__p_AnalogChannel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AnalogModule[] = {  {&_swigt__p_AnalogModule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AnalogTrigger[] = {  {&_swigt__p_AnalogTrigger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AnalogTriggerOutput[] = {  {&_swigt__p_AnalogTriggerOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AxisType[] = {  {&_swigt__p_AxisType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ButtonType[] = {  {&_swigt__p_ButtonType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Code[] = {  {&_swigt__p_Code, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComplexData[] = {  {&_swigt__p_ComplexData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Compressor[] = {  {&_swigt__p_Compressor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Counter[] = {  {&_swigt__p_Counter, 0, 0, 0},  {&_swigt__p_GearTooth, _p_GearToothTo_p_Counter, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CounterBase[] = {  {&_swigt__p_CounterBase, 0, 0, 0},  {&_swigt__p_Counter, _p_CounterTo_p_CounterBase, 0, 0},  {&_swigt__p_Encoder, _p_EncoderTo_p_CounterBase, 0, 0},  {&_swigt__p_GearTooth, _p_GearToothTo_p_CounterBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dashboard[] = {  {&_swigt__p_Dashboard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DashboardBase[] = {  {&_swigt__p_Dashboard, _p_DashboardTo_p_DashboardBase, 0, 0},  {&_swigt__p_DashboardBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DigitalInput[] = {  {&_swigt__p_DigitalInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DigitalModule[] = {  {&_swigt__p_DigitalModule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DigitalOutput[] = {  {&_swigt__p_DigitalOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DigitalSource[] = {  {&_swigt__p_DigitalSource, 0, 0, 0},  {&_swigt__p_AnalogTriggerOutput, _p_AnalogTriggerOutputTo_p_DigitalSource, 0, 0},  {&_swigt__p_DigitalInput, _p_DigitalInputTo_p_DigitalSource, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Direction[] = {  {&_swigt__p_Direction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DistanceUnit[] = {  {&_swigt__p_DistanceUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DoubleSolenoid[] = {  {&_swigt__p_DoubleSolenoid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DriverStation[] = {  {&_swigt__p_DriverStation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DriverStationEnhancedIO[] = {  {&_swigt__p_DriverStationEnhancedIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DriverStationLCD[] = {  {&_swigt__p_DriverStationLCD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Encoder[] = {  {&_swigt__p_Encoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EncodingType[] = {  {&_swigt__p_EncodingType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EntryValue[] = {  {&_swigt__p_EntryValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Error[] = {  {&_swigt__p_Error, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ErrorBase[] = {  {&_swigt__p_HiTechnicCompass, _p_HiTechnicCompassTo_p_ErrorBase, 0, 0},  {&_swigt__p_I2C, 0, 0, 0},  {&_swigt__p_PWM, _p_PWMTo_p_ErrorBase, 0, 0},  {&_swigt__p_Watchdog, _p_WatchdogTo_p_ErrorBase, 0, 0},  {&_swigt__p_Accelerometer, _p_AccelerometerTo_p_ErrorBase, 0, 0},  {&_swigt__p_Ultrasonic, _p_UltrasonicTo_p_ErrorBase, 0, 0},  {&_swigt__p_Jaguar, _p_JaguarTo_p_ErrorBase, 0, 0},  {&_swigt__p_DriverStation, _p_DriverStationTo_p_ErrorBase, 0, 0},  {&_swigt__p_DigitalSource, _p_DigitalSourceTo_p_ErrorBase, 0, 0},  {&_swigt__p_DigitalModule, _p_DigitalModuleTo_p_ErrorBase, 0, 0},  {&_swigt__p_Compressor, _p_CompressorTo_p_ErrorBase, 0, 0},  {&_swigt__p_Solenoid, _p_SolenoidTo_p_ErrorBase, 0, 0},  {&_swigt__p_DoubleSolenoid, _p_DoubleSolenoidTo_p_ErrorBase, 0, 0},  {&_swigt__p_DriverStationEnhancedIO, _p_DriverStationEnhancedIOTo_p_ErrorBase, 0, 0},  {&_swigt__p_ADXL345_I2C, _p_ADXL345_I2CTo_p_ErrorBase, 0, 0},  {&_swigt__p_SensorBase, _p_SensorBaseTo_p_ErrorBase, 0, 0},  {&_swigt__p_InterruptableSensorBase, _p_InterruptableSensorBaseTo_p_ErrorBase, 0, 0},  {&_swigt__p_DigitalOutput, _p_DigitalOutputTo_p_ErrorBase, 0, 0},  {&_swigt__p_AnalogTriggerOutput, _p_AnalogTriggerOutputTo_p_ErrorBase, 0, 0},  {&_swigt__p_SmartDashboard, _p_SmartDashboardTo_p_ErrorBase, 0, 0},  {&_swigt__p_Dashboard, _p_DashboardTo_p_ErrorBase, 0, 0},  {&_swigt__p_Servo, _p_ServoTo_p_ErrorBase, 0, 0},  {&_swigt__p_Counter, _p_CounterTo_p_ErrorBase, 0, 0},  {&_swigt__p_SafePWM, _p_SafePWMTo_p_ErrorBase, 0, 0},  {&_swigt__p_DriverStationLCD, _p_DriverStationLCDTo_p_ErrorBase, 0, 0},  {&_swigt__p_Module, _p_ModuleTo_p_ErrorBase, 0, 0},  {&_swigt__p_AnalogModule, _p_AnalogModuleTo_p_ErrorBase, 0, 0},  {&_swigt__p_DashboardBase, _p_DashboardBaseTo_p_ErrorBase, 0, 0},  {&_swigt__p_AnalogTrigger, _p_AnalogTriggerTo_p_ErrorBase, 0, 0},  {&_swigt__p_GearTooth, _p_GearToothTo_p_ErrorBase, 0, 0},  {&_swigt__p_AnalogChannel, _p_AnalogChannelTo_p_ErrorBase, 0, 0},  {&_swigt__p_Relay, _p_RelayTo_p_ErrorBase, 0, 0},  {&_swigt__p_SolenoidBase, _p_SolenoidBaseTo_p_ErrorBase, 0, 0},  {&_swigt__p_NetworkTable, _p_NetworkTableTo_p_ErrorBase, 0, 0},  {&_swigt__p_Victor, _p_VictorTo_p_ErrorBase, 0, 0},  {&_swigt__p_ErrorBase, 0, 0, 0},  {&_swigt__p_Encoder, _p_EncoderTo_p_ErrorBase, 0, 0},  {&_swigt__p_Gyro, _p_GyroTo_p_ErrorBase, 0, 0},  {&_swigt__p_Talon, _p_TalonTo_p_ErrorBase, 0, 0},  {&_swigt__p_DigitalInput, _p_DigitalInputTo_p_ErrorBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FlowControl[] = {  {&_swigt__p_FlowControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GearTooth[] = {  {&_swigt__p_GearTooth, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GenericHID[] = {  {&_swigt__p_GenericHID, 0, 0, 0},  {&_swigt__p_Joystick, _p_JoystickTo_p_GenericHID, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gyro[] = {  {&_swigt__p_Gyro, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HiTechnicCompass[] = {  {&_swigt__p_HiTechnicCompass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_I2C[] = {  {&_swigt__p_I2C, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IRemoteConnectionListener[] = {  {&_swigt__p_IRemoteConnectionListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ITableListener[] = {  {&_swigt__p_ITableListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InterruptableSensorBase[] = {  {&_swigt__p_DigitalSource, _p_DigitalSourceTo_p_InterruptableSensorBase, 0, 0},  {&_swigt__p_AnalogTriggerOutput, _p_AnalogTriggerOutputTo_p_InterruptableSensorBase, 0, 0},  {&_swigt__p_DigitalInput, _p_DigitalInputTo_p_InterruptableSensorBase, 0, 0},  {&_swigt__p_InterruptableSensorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Jaguar[] = {  {&_swigt__p_Jaguar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Joystick[] = {  {&_swigt__p_Joystick, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_JoystickHand[] = {  {&_swigt__p_JoystickHand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LiveWindow[] = {  {&_swigt__p_LiveWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mode[] = {  {&_swigt__p_Mode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Module[] = {  {&_swigt__p_DigitalModule, _p_DigitalModuleTo_p_Module, 0, 0},  {&_swigt__p_Module, 0, 0, 0},  {&_swigt__p_AnalogModule, _p_AnalogModuleTo_p_Module, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MotorSafety[] = {  {&_swigt__p_Jaguar, _p_JaguarTo_p_MotorSafety, 0, 0},  {&_swigt__p_Victor, _p_VictorTo_p_MotorSafety, 0, 0},  {&_swigt__p_SafePWM, _p_SafePWMTo_p_MotorSafety, 0, 0},  {&_swigt__p_Servo, _p_ServoTo_p_MotorSafety, 0, 0},  {&_swigt__p_Talon, _p_TalonTo_p_MotorSafety, 0, 0},  {&_swigt__p_RobotDrive, _p_RobotDriveTo_p_MotorSafety, 0, 0},  {&_swigt__p_MotorSafety, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MotorSafetyHelper[] = {  {&_swigt__p_MotorSafetyHelper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MotorType[] = {  {&_swigt__p_MotorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NetworkTable[] = {  {&_swigt__p_NetworkTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NetworkTableEntryType[] = {  {&_swigt__p_NetworkTableEntryType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NetworkTableProvider[] = {  {&_swigt__p_NetworkTableProvider, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PIDController[] = {  {&_swigt__p_PIDController, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PIDOutput[] = {  {&_swigt__p_PIDOutput, 0, 0, 0},  {&_swigt__p_Jaguar, _p_JaguarTo_p_PIDOutput, 0, 0},  {&_swigt__p_Victor, _p_VictorTo_p_PIDOutput, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PIDSource[] = {  {&_swigt__p_AnalogChannel, _p_AnalogChannelTo_p_PIDSource, 0, 0},  {&_swigt__p_PIDSource, 0, 0, 0},  {&_swigt__p_Accelerometer, _p_AccelerometerTo_p_PIDSource, 0, 0},  {&_swigt__p_Ultrasonic, _p_UltrasonicTo_p_PIDSource, 0, 0},  {&_swigt__p_Gyro, _p_GyroTo_p_PIDSource, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PWM[] = {  {&_swigt__p_PWM, 0, 0, 0},  {&_swigt__p_Jaguar, _p_JaguarTo_p_PWM, 0, 0},  {&_swigt__p_Victor, _p_VictorTo_p_PWM, 0, 0},  {&_swigt__p_SafePWM, _p_SafePWMTo_p_PWM, 0, 0},  {&_swigt__p_Servo, _p_ServoTo_p_PWM, 0, 0},  {&_swigt__p_Talon, _p_TalonTo_p_PWM, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Parity[] = {  {&_swigt__p_Parity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PeriodMultiplier[] = {  {&_swigt__p_PeriodMultiplier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Relay[] = {  {&_swigt__p_Relay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RobotDrive[] = {  {&_swigt__p_RobotDrive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SEM_ID[] = {  {&_swigt__p_SEM_ID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SafePWM[] = {  {&_swigt__p_Jaguar, _p_JaguarTo_p_SafePWM, 0, 0},  {&_swigt__p_Victor, _p_VictorTo_p_SafePWM, 0, 0},  {&_swigt__p_SafePWM, 0, 0, 0},  {&_swigt__p_Servo, _p_ServoTo_p_SafePWM, 0, 0},  {&_swigt__p_Talon, _p_TalonTo_p_SafePWM, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SensorBase[] = {  {&_swigt__p_HiTechnicCompass, _p_HiTechnicCompassTo_p_SensorBase, 0, 0},  {&_swigt__p_I2C, _p_I2CTo_p_SensorBase, 0, 0},  {&_swigt__p_PWM, _p_PWMTo_p_SensorBase, 0, 0},  {&_swigt__p_Watchdog, _p_WatchdogTo_p_SensorBase, 0, 0},  {&_swigt__p_Accelerometer, _p_AccelerometerTo_p_SensorBase, 0, 0},  {&_swigt__p_Ultrasonic, _p_UltrasonicTo_p_SensorBase, 0, 0},  {&_swigt__p_Jaguar, _p_JaguarTo_p_SensorBase, 0, 0},  {&_swigt__p_DriverStation, _p_DriverStationTo_p_SensorBase, 0, 0},  {&_swigt__p_DigitalSource, _p_DigitalSourceTo_p_SensorBase, 0, 0},  {&_swigt__p_DigitalModule, _p_DigitalModuleTo_p_SensorBase, 0, 0},  {&_swigt__p_Compressor, _p_CompressorTo_p_SensorBase, 0, 0},  {&_swigt__p_Solenoid, _p_SolenoidTo_p_SensorBase, 0, 0},  {&_swigt__p_DoubleSolenoid, _p_DoubleSolenoidTo_p_SensorBase, 0, 0},  {&_swigt__p_ADXL345_I2C, _p_ADXL345_I2CTo_p_SensorBase, 0, 0},  {&_swigt__p_InterruptableSensorBase, _p_InterruptableSensorBaseTo_p_SensorBase, 0, 0},  {&_swigt__p_SensorBase, 0, 0, 0},  {&_swigt__p_DigitalOutput, _p_DigitalOutputTo_p_SensorBase, 0, 0},  {&_swigt__p_AnalogTriggerOutput, _p_AnalogTriggerOutputTo_p_SensorBase, 0, 0},  {&_swigt__p_SmartDashboard, _p_SmartDashboardTo_p_SensorBase, 0, 0},  {&_swigt__p_Servo, _p_ServoTo_p_SensorBase, 0, 0},  {&_swigt__p_Counter, _p_CounterTo_p_SensorBase, 0, 0},  {&_swigt__p_SafePWM, _p_SafePWMTo_p_SensorBase, 0, 0},  {&_swigt__p_DriverStationLCD, _p_DriverStationLCDTo_p_SensorBase, 0, 0},  {&_swigt__p_Module, _p_ModuleTo_p_SensorBase, 0, 0},  {&_swigt__p_AnalogModule, _p_AnalogModuleTo_p_SensorBase, 0, 0},  {&_swigt__p_AnalogTrigger, _p_AnalogTriggerTo_p_SensorBase, 0, 0},  {&_swigt__p_GearTooth, _p_GearToothTo_p_SensorBase, 0, 0},  {&_swigt__p_AnalogChannel, _p_AnalogChannelTo_p_SensorBase, 0, 0},  {&_swigt__p_Relay, _p_RelayTo_p_SensorBase, 0, 0},  {&_swigt__p_SolenoidBase, _p_SolenoidBaseTo_p_SensorBase, 0, 0},  {&_swigt__p_Victor, _p_VictorTo_p_SensorBase, 0, 0},  {&_swigt__p_Encoder, _p_EncoderTo_p_SensorBase, 0, 0},  {&_swigt__p_Gyro, _p_GyroTo_p_SensorBase, 0, 0},  {&_swigt__p_Talon, _p_TalonTo_p_SensorBase, 0, 0},  {&_swigt__p_DigitalInput, _p_DigitalInputTo_p_SensorBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SerialPort[] = {  {&_swigt__p_SerialPort, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Servo[] = {  {&_swigt__p_Servo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmartDashboard[] = {  {&_swigt__p_SmartDashboard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Solenoid[] = {  {&_swigt__p_Solenoid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SolenoidBase[] = {  {&_swigt__p_SolenoidBase, 0, 0, 0},  {&_swigt__p_DoubleSolenoid, _p_DoubleSolenoidTo_p_SolenoidBase, 0, 0},  {&_swigt__p_Solenoid, _p_SolenoidTo_p_SolenoidBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpeedController[] = {  {&_swigt__p_SpeedController, 0, 0, 0},  {&_swigt__p_Jaguar, _p_JaguarTo_p_SpeedController, 0, 0},  {&_swigt__p_Victor, _p_VictorTo_p_SpeedController, 0, 0},  {&_swigt__p_Talon, _p_TalonTo_p_SpeedController, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StopBits[] = {  {&_swigt__p_StopBits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Talon[] = {  {&_swigt__p_Talon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Timer[] = {  {&_swigt__p_Timer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Type[] = {  {&_swigt__p_Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ultrasonic[] = {  {&_swigt__p_Ultrasonic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Value[] = {  {&_swigt__p_Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Victor[] = {  {&_swigt__p_Victor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Watchdog[] = {  {&_swigt__p_Watchdog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WriteBufferMode[] = {  {&_swigt__p_WriteBufferMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nLoadOut__tModuleType[] = {  {&_swigt__p_nLoadOut__tModuleType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_const_p_t[] = {  {&_swigt__p_std__vectorT_char_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tRioStatusCode[] = {  {&_swigt__p_tRioStatusCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ADXL345_I2C,
  _swigc__p_Accelerometer,
  _swigc__p_AnalogChannel,
  _swigc__p_AnalogModule,
  _swigc__p_AnalogTrigger,
  _swigc__p_AnalogTriggerOutput,
  _swigc__p_AxisType,
  _swigc__p_ButtonType,
  _swigc__p_Code,
  _swigc__p_ComplexData,
  _swigc__p_Compressor,
  _swigc__p_Counter,
  _swigc__p_CounterBase,
  _swigc__p_Dashboard,
  _swigc__p_DashboardBase,
  _swigc__p_DigitalInput,
  _swigc__p_DigitalModule,
  _swigc__p_DigitalOutput,
  _swigc__p_DigitalSource,
  _swigc__p_Direction,
  _swigc__p_DistanceUnit,
  _swigc__p_DoubleSolenoid,
  _swigc__p_DriverStation,
  _swigc__p_DriverStationEnhancedIO,
  _swigc__p_DriverStationLCD,
  _swigc__p_Encoder,
  _swigc__p_EncodingType,
  _swigc__p_EntryValue,
  _swigc__p_Error,
  _swigc__p_ErrorBase,
  _swigc__p_FlowControl,
  _swigc__p_GearTooth,
  _swigc__p_GenericHID,
  _swigc__p_Gyro,
  _swigc__p_HiTechnicCompass,
  _swigc__p_I2C,
  _swigc__p_IRemoteConnectionListener,
  _swigc__p_ITableListener,
  _swigc__p_InterruptableSensorBase,
  _swigc__p_Jaguar,
  _swigc__p_Joystick,
  _swigc__p_JoystickHand,
  _swigc__p_LiveWindow,
  _swigc__p_Mode,
  _swigc__p_Module,
  _swigc__p_MotorSafety,
  _swigc__p_MotorSafetyHelper,
  _swigc__p_MotorType,
  _swigc__p_NetworkTable,
  _swigc__p_NetworkTableEntryType,
  _swigc__p_NetworkTableProvider,
  _swigc__p_PIDController,
  _swigc__p_PIDOutput,
  _swigc__p_PIDSource,
  _swigc__p_PWM,
  _swigc__p_Parity,
  _swigc__p_PeriodMultiplier,
  _swigc__p_Relay,
  _swigc__p_RobotDrive,
  _swigc__p_SEM_ID,
  _swigc__p_SafePWM,
  _swigc__p_SensorBase,
  _swigc__p_SerialPort,
  _swigc__p_Servo,
  _swigc__p_SmartDashboard,
  _swigc__p_Solenoid,
  _swigc__p_SolenoidBase,
  _swigc__p_SpeedController,
  _swigc__p_StopBits,
  _swigc__p_Talon,
  _swigc__p_Timer,
  _swigc__p_Type,
  _swigc__p_Ultrasonic,
  _swigc__p_Value,
  _swigc__p_Victor,
  _swigc__p_Watchdog,
  _swigc__p_WriteBufferMode,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_nLoadOut__tModuleType,
  _swigc__p_p_char,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_char_const_p_t,
  _swigc__p_tRioStatusCode,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

